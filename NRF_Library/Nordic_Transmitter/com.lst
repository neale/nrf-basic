   1               		.file	"com.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.initUART,"ax",@progbits
  11               	.global	initUART
  13               	initUART:
  14               	.LFB11:
  15               		.file 1 "com.c"
   1:com.c         **** /**************************************************
   2:com.c         **** Written By: Tanner Christensen
   3:com.c         **** 
   4:com.c         **** Program Description:
   5:com.c         **** This is a basic example program for a MCU driving
   6:com.c         **** a Nordic 2.4ghz tranceiver. This function constantly
   7:com.c         **** transmits 8 bytes of data, char values 'a' - 'h'.
   8:com.c         **** **************************************************/
   9:com.c         **** 
  10:com.c         **** 
  11:com.c         **** 
  12:com.c         **** 
  13:com.c         **** #define F_CPU 8000000
  14:com.c         **** 
  15:com.c         **** #include <avr/io.h>
  16:com.c         **** #include <avr/pgmspace.h>
  17:com.c         **** #include <avr/interrupt.h>
  18:com.c         **** #include <util/delay.h>
  19:com.c         **** #include <avr/eeprom.h>
  20:com.c         **** #include <avr/cpufunc.h>
  21:com.c         **** #include "spi.h"
  22:com.c         **** #include <stdlib.h>
  23:com.c         **** #include "radioctl.h"
  24:com.c         **** #include "i2c.h"
  25:com.c         **** 
  26:com.c         **** // Teensy 2.0: LED is active high
  27:com.c         **** #if defined(__AVR_ATmega32U4__) || defined(__AVR_AT90USB1286__)
  28:com.c         **** #define LED_ON		(PORTD |= (1<<6))
  29:com.c         **** #define LED_OFF		(PORTD &= ~(1<<6))
  30:com.c         **** 
  31:com.c         **** // Teensy 1.0: LED is active low
  32:com.c         **** #else
  33:com.c         **** #define LED_ON	(PORTD &= ~(1<<6))
  34:com.c         **** #define LED_OFF	(PORTD |= (1<<6))
  35:com.c         **** #endif
  36:com.c         **** 
  37:com.c         **** #define ADC_PRESCALER 0
  38:com.c         **** #define LED_CONFIG	(DDRD |= (1<<6))
  39:com.c         **** #define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
  40:com.c         **** #define DIT 80		/* unit time for mors e code */
  41:com.c         **** #define BAUD_RATE 38.4k
  42:com.c         **** #define F_CPU 8000000
  43:com.c         **** 
  44:com.c         **** 
  45:com.c         **** #define PACKET_SIZE 8
  46:com.c         **** 
  47:com.c         **** 
  48:com.c         **** void initUART(void)
  49:com.c         **** {
  16               		.loc 1 49 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  50:com.c         **** 	//UBRR1 = (F_CPU / 4/ baud - 1) / 2;
  51:com.c         **** 	UBRR1 = 25;  //38.4k baud
  22               		.loc 1 51 0
  23 0000 89E1      		ldi r24,lo8(25)
  24 0002 90E0      		ldi r25,0
  25 0004 9093 CD00 		sts 204+1,r25
  26 0008 8093 CC00 		sts 204,r24
  52:com.c         **** 	UCSR1A = (1<<U2X1);
  27               		.loc 1 52 0
  28 000c 82E0      		ldi r24,lo8(2)
  29 000e 8093 C800 		sts 200,r24
  53:com.c         **** 	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  30               		.loc 1 53 0
  31 0012 88E1      		ldi r24,lo8(24)
  32 0014 8093 C900 		sts 201,r24
  54:com.c         **** 	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  33               		.loc 1 54 0
  34 0018 86E0      		ldi r24,lo8(6)
  35 001a 8093 CA00 		sts 202,r24
  36 001e 0895      		ret
  37               		.cfi_endproc
  38               	.LFE11:
  40               		.section	.text.startup.main,"ax",@progbits
  41               	.global	main
  43               	main:
  44               	.LFB12:
  55:com.c         **** }
  56:com.c         **** 
  57:com.c         **** 
  58:com.c         **** int main(void)
  59:com.c         **** {
  45               		.loc 1 59 0
  46               		.cfi_startproc
  47 0000 CF93      		push r28
  48               	.LCFI0:
  49               		.cfi_def_cfa_offset 3
  50               		.cfi_offset 28, -2
  51 0002 DF93      		push r29
  52               	.LCFI1:
  53               		.cfi_def_cfa_offset 4
  54               		.cfi_offset 29, -3
  55 0004 CDB7      		in r28,__SP_L__
  56 0006 DEB7      		in r29,__SP_H__
  57               	.LCFI2:
  58               		.cfi_def_cfa_register 28
  59 0008 2897      		sbiw r28,8
  60               	.LCFI3:
  61               		.cfi_def_cfa_offset 12
  62 000a 0FB6      		in __tmp_reg__,__SREG__
  63 000c F894      		cli
  64 000e DEBF      		out __SP_H__,r29
  65 0010 0FBE      		out __SREG__,__tmp_reg__
  66 0012 CDBF      		out __SP_L__,r28
  67               	/* prologue: function */
  68               	/* frame size = 8 */
  69               	/* stack size = 10 */
  70               	.L__stack_usage = 10
  60:com.c         **** 	
  61:com.c         **** 
  62:com.c         **** 	CPU_PRESCALE(0x01);  // run at 8 MHz
  71               		.loc 1 62 0
  72 0014 80E8      		ldi r24,lo8(-128)
  73 0016 8093 6100 		sts 97,r24
  74 001a 81E0      		ldi r24,lo8(1)
  75 001c 8093 6100 		sts 97,r24
  63:com.c         **** 
  64:com.c         **** 	INIT_CSN;
  76               		.loc 1 64 0
  77 0020 849A      		sbi 0x10,4
  65:com.c         **** 	INIT_CE;
  78               		.loc 1 65 0
  79 0022 819A      		sbi 0x10,1
  66:com.c         **** 	CSN_HIGH;
  80               		.loc 1 66 0
  81 0024 8C9A      		sbi 0x11,4
  67:com.c         **** 
  68:com.c         **** 	SPI_masterInit();
  82               		.loc 1 68 0
  83 0026 0E94 0000 		call SPI_masterInit
  84               	.LVL0:
  69:com.c         **** 
  70:com.c         **** 	initRadioTX();
  85               		.loc 1 70 0
  86 002a 0E94 0000 		call initRadioTX
  87               	.LVL1:
  71:com.c         **** 	setRadioAddressWidth(THREE_BYTES);
  88               		.loc 1 71 0
  89 002e 81E0      		ldi r24,lo8(1)
  90 0030 0E94 0000 		call setRadioAddressWidth
  91               	.LVL2:
  72:com.c         **** 	setRadioTXAddress(0xABC123);        
  92               		.loc 1 72 0
  93 0034 63E2      		ldi r22,lo8(35)
  94 0036 71EC      		ldi r23,lo8(-63)
  95 0038 8BEA      		ldi r24,lo8(-85)
  96 003a 90E0      		ldi r25,0
  97 003c 0E94 0000 		call setRadioTXAddress
  98               	.LVL3:
  73:com.c         **** 	setRadioRXAddress(0xABC123);
  99               		.loc 1 73 0
 100 0040 63E2      		ldi r22,lo8(35)
 101 0042 71EC      		ldi r23,lo8(-63)
 102 0044 8BEA      		ldi r24,lo8(-85)
 103 0046 90E0      		ldi r25,0
 104 0048 0E94 0000 		call setRadioRXAddress
 105               	.LVL4:
  74:com.c         **** 	setRadioFrequency(0b00000010);
 106               		.loc 1 74 0
 107 004c 82E0      		ldi r24,lo8(2)
 108 004e 0E94 0000 		call setRadioFrequency
 109               	.LVL5:
  75:com.c         **** 
  76:com.c         ****   	uint8_t data[PACKET_SIZE] = {0};
 110               		.loc 1 76 0
 111 0052 FE01      		movw r30,r28
 112 0054 3196      		adiw r30,1
 113 0056 88E0      		ldi r24,lo8(8)
 114 0058 DF01      		movw r26,r30
 115               		0:
 116 005a 1D92      		st X+,__zero_reg__
 117 005c 8A95      		dec r24
 118 005e 01F4      		brne 0b
 119               	.LVL6:
 120               	.L10:
 121               	.LBB13:
 122               	.LBB14:
 123               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 124               		.loc 2 163 0
 125 0060 8FE0      		ldi r24,lo8(9999)
 126 0062 97E2      		ldi r25,hi8(9999)
 127 0064 0197      		1: sbiw r24,1
 128 0066 01F4      		brne 1b
 129 0068 00C0      		rjmp .
 130 006a 0000      		nop
 131               	.LBE14:
 132               	.LBE13:
 133               	.LBB15:
  77:com.c         **** 
  78:com.c         **** 
  79:com.c         **** 
  80:com.c         **** 	_delay_ms(5);
  81:com.c         **** 
  82:com.c         **** 	while(1)
  83:com.c         **** 	{
  84:com.c         **** 
  85:com.c         **** 		
  86:com.c         **** 		for(int i = 0; i < PACKET_SIZE; ++i){
 134               		.loc 1 86 0
 135 006c 80E0      		ldi r24,0
 136 006e 90E0      		ldi r25,0
 137               	.L3:
 138               	.LVL7:
 139               		.loc 1 86 0 is_stmt 0 discriminator 1
 140 0070 8830      		cpi r24,8
 141 0072 9105      		cpc r25,__zero_reg__
 142 0074 04F4      		brge .L13
  87:com.c         **** 			data[i] = 'a' + i; 
 143               		.loc 1 87 0 is_stmt 1 discriminator 2
 144 0076 E1E0      		ldi r30,lo8(1)
 145 0078 F0E0      		ldi r31,0
 146 007a EC0F      		add r30,r28
 147 007c FD1F      		adc r31,r29
 148 007e E80F      		add r30,r24
 149 0080 F91F      		adc r31,r25
 150 0082 21E6      		ldi r18,lo8(97)
 151 0084 280F      		add r18,r24
 152 0086 2083      		st Z,r18
  86:com.c         **** 		for(int i = 0; i < PACKET_SIZE; ++i){
 153               		.loc 1 86 0 discriminator 2
 154 0088 0196      		adiw r24,1
 155               	.LVL8:
 156 008a 00C0      		rjmp .L3
 157               	.L13:
 158               	.LBE15:
  88:com.c         **** 		}
  89:com.c         **** 
  90:com.c         **** 
  91:com.c         **** 
  92:com.c         ****     	setRadioTXPayload(data, PACKET_SIZE);
 159               		.loc 1 92 0
 160 008c 68E0      		ldi r22,lo8(8)
 161 008e CE01      		movw r24,r28
 162               	.LVL9:
 163 0090 0196      		adiw r24,1
 164 0092 0E94 0000 		call setRadioTXPayload
 165               	.LVL10:
  93:com.c         **** 			CE_HIGH;
 166               		.loc 1 93 0
 167 0096 899A      		sbi 0x11,1
 168               	.LVL11:
 169               	.LBB16:
 170               	.LBB17:
 164:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 165:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #else
 166:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	{
 172:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		{
 176:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		}
 180:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		return;
 181:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	}
 182:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	else
 183:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 186:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** }
 187:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 188:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 189:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 191:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 193:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 196:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 198:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 202:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   
 207:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 211:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  
 214:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 222:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 223:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 224:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 226:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 234:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 237:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 240:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 241:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 242:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 244:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 245:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 171               		.loc 2 245 0
 172 0098 98E2      		ldi r25,lo8(40)
 173 009a 9A95      		1: dec r25
 174 009c 01F4      		brne 1b
 175               	.L11:
 176               	.LBE17:
 177               	.LBE16:
  94:com.c         **** 			_delay_us(15);  // pulse CE to start transmition
  95:com.c         **** 			CE_LOW;
  96:com.c         **** 
  97:com.c         **** 		while(!(getTX_DS()))
  98:com.c         **** 		{
  99:com.c         **** 			_delay_us(300);  //retransmit time determined by SETUP_RETR register
 100:com.c         **** 
 101:com.c         **** 			if(getMAX_RT())
 102:com.c         **** 			{
 103:com.c         **** 				clearMAX_RT();
 104:com.c         **** 				CE_HIGH;
 105:com.c         **** 				_delay_us(15);
 106:com.c         **** 				CE_LOW;
 178               		.loc 1 106 0
 179 009e 8998      		cbi 0x11,1
 180               	.L7:
  97:com.c         **** 		while(!(getTX_DS()))
 181               		.loc 1 97 0 discriminator 1
 182 00a0 0E94 0000 		call getTX_DS
 183               	.LVL12:
 184 00a4 8111      		cpse r24,__zero_reg__
 185 00a6 00C0      		rjmp .L14
 186               	.LVL13:
 187               	.LBB18:
 188               	.LBB19:
 189               		.loc 2 245 0
 190 00a8 A7E5      		ldi r26,lo8(599)
 191 00aa B2E0      		ldi r27,hi8(599)
 192 00ac 1197      		1: sbiw r26,1
 193 00ae 01F4      		brne 1b
 194 00b0 00C0      		rjmp .
 195 00b2 0000      		nop
 196               	.LBE19:
 197               	.LBE18:
 101:com.c         **** 			if(getMAX_RT())
 198               		.loc 1 101 0
 199 00b4 0E94 0000 		call getMAX_RT
 200               	.LVL14:
 201 00b8 8823      		tst r24
 202 00ba 01F0      		breq .L7
 103:com.c         **** 				clearMAX_RT();
 203               		.loc 1 103 0
 204 00bc 0E94 0000 		call clearMAX_RT
 205               	.LVL15:
 104:com.c         **** 				CE_HIGH;
 206               		.loc 1 104 0
 207 00c0 899A      		sbi 0x11,1
 208               	.LVL16:
 209               	.LBB20:
 210               	.LBB21:
 211               		.loc 2 245 0
 212 00c2 B8E2      		ldi r27,lo8(40)
 213 00c4 BA95      		1: dec r27
 214 00c6 01F4      		brne 1b
 215 00c8 00C0      		rjmp .L11
 216               	.LVL17:
 217               	.L14:
 218               	.LBE21:
 219               	.LBE20:
 107:com.c         **** 			}
 108:com.c         **** 		}
 109:com.c         **** 
 110:com.c         **** 		clearTX_DS();
 220               		.loc 1 110 0
 221 00ca 0E94 0000 		call clearTX_DS
 222               	.LVL18:
 223 00ce 00C0      		rjmp .L10
 224               		.cfi_endproc
 225               	.LFE12:
 227               		.text
 228               	.Letext0:
 229               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 230               		.file 4 "spi.h"
 231               		.file 5 "radioctl.h"
DEFINED SYMBOLS
                            *ABS*:00000000 com.c
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//cc6lKaeM.s:2      *ABS*:0000003e __SP_H__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//cc6lKaeM.s:3      *ABS*:0000003d __SP_L__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//cc6lKaeM.s:4      *ABS*:0000003f __SREG__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//cc6lKaeM.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//cc6lKaeM.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//cc6lKaeM.s:13     .text.initUART:00000000 initUART
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//cc6lKaeM.s:43     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
SPI_masterInit
initRadioTX
setRadioAddressWidth
setRadioTXAddress
setRadioRXAddress
setRadioFrequency
setRadioTXPayload
getTX_DS
getMAX_RT
clearMAX_RT
clearTX_DS
