
receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000051a  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  000005b6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  000005c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000132a  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052d  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000672  00000000  00000000  00001fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000036c  00000000  00000000  0000263c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a27  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  000037c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e1       	ldi	r30, 0x1A	; 26
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ac 30       	cpi	r26, 0x0C	; 12
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	12 d0       	rcall	.+36     	; 0x104 <main>
  e0:	1a c2       	rjmp	.+1076   	; 0x516 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <initUART>:
char mode = 'r';

void initUART(void)
{
  //UBRR1 = (F_CPU / 4/ baud - 1) / 2;
  UBRR1 = 25;  //38.4k baud
  e4:	89 e1       	ldi	r24, 0x19	; 25
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 cd 00 	sts	0x00CD, r25
  ec:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1A = (1<<U2X1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 c8 00 	sts	0x00C8, r24
  UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c9 00 	sts	0x00C9, r24
  UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 ca 00 	sts	0x00CA, r24
 102:	08 95       	ret

00000104 <main>:
    mode = 'r';
  }
}

int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62

  uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));
 10e:	88 e0       	ldi	r24, 0x08	; 8
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	da d0       	rcall	.+436    	; 0x2c8 <malloc>
 114:	18 2f       	mov	r17, r24
 116:	09 2f       	mov	r16, r25
 118:	80 e8       	ldi	r24, 0x80	; 128


  CPU_PRESCALE(0x01);  // run at 8 MHz
 11a:	80 93 61 00 	sts	0x0061, r24
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 61 00 	sts	0x0061, r24
 124:	84 9a       	sbi	0x10, 4	; 16

  INIT_CSN;
 126:	81 9a       	sbi	0x10, 1	; 16
  INIT_CE;
 128:	8c 9a       	sbi	0x11, 4	; 17
  CSN_HIGH;
 12a:	89 9a       	sbi	0x11, 1	; 17
  CE_HIGH;
 12c:	db df       	rcall	.-74     	; 0xe4 <initUART>


  initUART();
 12e:	32 d0       	rcall	.+100    	; 0x194 <SPI_masterInit>
 130:	4c d0       	rcall	.+152    	; 0x1ca <initRadioRX>

  // Put receiver in sleep mode

  SPI_masterInit();
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	50 d0       	rcall	.+160    	; 0x1d6 <setRadioAddressWidth>
  initRadioRX();
 136:	63 e2       	ldi	r22, 0x23	; 35
 138:	71 ec       	ldi	r23, 0xC1	; 193

  setRadioAddressWidth(THREE_BYTES);
 13a:	8b ea       	ldi	r24, 0xAB	; 171
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	5d d0       	rcall	.+186    	; 0x1fa <setRadioRXAddress>
  setRadioRXAddress(0xABC123);                    
 140:	68 e0       	ldi	r22, 0x08	; 8
 142:	81 e1       	ldi	r24, 0x11	; 17
 144:	71 d0       	rcall	.+226    	; 0x228 <setRadioRXPayloadSize>
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	4f d0       	rcall	.+158    	; 0x1e8 <setRadioFrequency>
 14a:	8f e0       	ldi	r24, 0x0F	; 15
  setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 14c:	97 e2       	ldi	r25, 0x27	; 39
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x4a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x50>
  setRadioFrequency(0b00000010); 
 154:	00 00       	nop
 156:	19 82       	std	Y+1, r1	; 0x01
 158:	ce 01       	movw	r24, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	95 d0       	rcall	.+298    	; 0x288 <getRadioStatus>
 15e:	9e d0       	rcall	.+316    	; 0x29c <getRX_DR>
 160:	88 23       	and	r24, r24
 162:	b1 f0       	breq	.+44     	; 0x190 <main+0x8c>
 164:	ab d0       	rcall	.+342    	; 0x2bc <clearRX_DR>
  _delay_ms(5);


  while (1) {

    uint8_t radioStatus = 0;
 166:	68 e0       	ldi	r22, 0x08	; 8
    
    getRadioStatus(&radioStatus);
 168:	81 2f       	mov	r24, r17
 16a:	90 2f       	mov	r25, r16
 16c:	70 d0       	rcall	.+224    	; 0x24e <getRadioRXPayload>
 16e:	89 98       	cbi	0x11, 1	; 17
    if(getRX_DR())  // if RX data received
 170:	e1 2f       	mov	r30, r17
 172:	f0 2f       	mov	r31, r16
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
    {
      clearRX_DR();
 178:	80 91 c8 00 	lds	r24, 0x00C8
      getRadioRXPayload(load, PACKET_SIZE); //read payload
 17c:	85 ff       	sbrs	r24, 5
 17e:	fc cf       	rjmp	.-8      	; 0x178 <main+0x74>
 180:	81 91       	ld	r24, Z+
 182:	80 93 ce 00 	sts	0x00CE, r24
      CE_LOW;
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	28 30       	cpi	r18, 0x08	; 8
      for(int i = 0; i<PACKET_SIZE; i++)
 18c:	31 05       	cpc	r19, r1
 18e:	a1 f7       	brne	.-24     	; 0x178 <main+0x74>
      {
        while(!(UCSR1A & (1 << UDRE1)));
 190:	89 9a       	sbi	0x11, 1	; 17
 192:	db cf       	rjmp	.-74     	; 0x14a <main+0x46>

00000194 <SPI_masterInit>:


void SPI_masterInit()
{
	/* Set MOSI, /SS and SCK to output, all others to input */
	DDRB = ((1<<DDB0) | (1<<DDB2) | (1<<DDB1));
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI and Master mode, set clock rate to fck/4 */
	SPCR = (1<<SPE) | (1<<MSTR);
 198:	80 e5       	ldi	r24, 0x50	; 80
 19a:	8c bd       	out	0x2c, r24	; 44
 19c:	08 95       	ret

0000019e <SPI_masterReceive>:
}


int8_t SPI_masterReceive(void)     
{
	SPDR = 0xFF; 			// Dummy variable
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){}
 1a2:	0d b4       	in	r0, 0x2d	; 45
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <SPI_masterReceive+0x4>
	return SPDR;
 1a8:	8e b5       	in	r24, 0x2e	; 46
}
 1aa:	08 95       	ret

000001ac <SPI_masterTransmit>:

int8_t SPI_masterTransmit(int8_t cData)
{	
	SPDR = cData;
 1ac:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){}
 1ae:	0d b4       	in	r0, 0x2d	; 45
 1b0:	07 fe       	sbrs	r0, 7
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <SPI_masterTransmit+0x2>
	return SPDR;
 1b4:	8e b5       	in	r24, 0x2e	; 46
}
 1b6:	08 95       	ret

000001b8 <openPort>:

/*************** PORT OPERATIONS ****************/

void openPort()
{
  CSN_LOW;
 1b8:	8c 98       	cbi	0x11, 4	; 17
 1ba:	08 95       	ret

000001bc <closePort>:
}

void closePort()
{ 
  CSN_HIGH;        // sets port high
 1bc:	8c 9a       	sbi	0x11, 4	; 17
  while(!(CSN_PIN_R &= (1<<CSN_PIN)))    //while port is low
 1be:	8f b1       	in	r24, 0x0f	; 15
 1c0:	80 71       	andi	r24, 0x10	; 16
 1c2:	8f b9       	out	0x0f, r24	; 15
 1c4:	88 23       	and	r24, r24
 1c6:	d9 f3       	breq	.-10     	; 0x1be <closePort+0x2>
    ;
}
 1c8:	08 95       	ret

000001ca <initRadioRX>:
  closePort();
}

void initRadioRX()
{
  openPort(); 
 1ca:	f6 df       	rcall	.-20     	; 0x1b8 <openPort>
 1cc:	80 e2       	ldi	r24, 0x20	; 32
  SPI_masterTransmit(0b00100000);
 1ce:	ee df       	rcall	.-36     	; 0x1ac <SPI_masterTransmit>
 1d0:	8b e0       	ldi	r24, 0x0B	; 11
 1d2:	ec df       	rcall	.-40     	; 0x1ac <SPI_masterTransmit>
  SPI_masterTransmit(0b00001011);  // sets RX mode on 
 1d4:	f3 cf       	rjmp	.-26     	; 0x1bc <closePort>

000001d6 <setRadioAddressWidth>:
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
  closePort();
 1da:	ee df       	rcall	.-36     	; 0x1b8 <openPort>
 1dc:	83 e2       	ldi	r24, 0x23	; 35
/*************************************************************/

void setRadioAddressWidth(uint8_t width)
{
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
 1de:	e6 df       	rcall	.-52     	; 0x1ac <SPI_masterTransmit>
 1e0:	8c 2f       	mov	r24, r28
 1e2:	e4 df       	rcall	.-56     	; 0x1ac <SPI_masterTransmit>
  SPI_masterTransmit(width);  // sets address 
 1e4:	cf 91       	pop	r28
 1e6:	ea cf       	rjmp	.-44     	; 0x1bc <closePort>

000001e8 <setRadioFrequency>:
 1e8:	cf 93       	push	r28
  closePort();
}
 1ea:	c8 2f       	mov	r28, r24
void setRadioAddressWidth(uint8_t width)
{
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
  SPI_masterTransmit(width);  // sets address 
  closePort();
 1ec:	e5 df       	rcall	.-54     	; 0x1b8 <openPort>
 1ee:	85 e2       	ldi	r24, 0x25	; 37
}

void setRadioFrequency(uint8_t frequency)
{
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
 1f0:	dd df       	rcall	.-70     	; 0x1ac <SPI_masterTransmit>
 1f2:	8c 2f       	mov	r24, r28
 1f4:	db df       	rcall	.-74     	; 0x1ac <SPI_masterTransmit>
  SPI_masterTransmit(frequency);  // sets frequency 
 1f6:	cf 91       	pop	r28
 1f8:	e1 cf       	rjmp	.-62     	; 0x1bc <closePort>

000001fa <setRadioRXAddress>:
 1fa:	cf 93       	push	r28
  closePort(); 
}
 1fc:	df 93       	push	r29
void setRadioFrequency(uint8_t frequency)
{
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
  SPI_masterTransmit(frequency);  // sets frequency 
  closePort(); 
 1fe:	00 d0       	rcall	.+0      	; 0x200 <setRadioRXAddress+0x6>
 200:	cd b7       	in	r28, 0x3d	; 61

  closePort();
}

void setRadioRXAddress(int32_t address)
{
 202:	de b7       	in	r29, 0x3e	; 62
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 204:	69 83       	std	Y+1, r22	; 0x01
 206:	7a 83       	std	Y+2, r23	; 0x02
 208:	d7 df       	rcall	.-82     	; 0x1b8 <openPort>
 20a:	8a e2       	ldi	r24, 0x2A	; 42
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
 20c:	cf df       	rcall	.-98     	; 0x1ac <SPI_masterTransmit>
 20e:	69 81       	ldd	r22, Y+1	; 0x01
 210:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 212:	cc df       	rcall	.-104    	; 0x1ac <SPI_masterTransmit>
 214:	7a 81       	ldd	r23, Y+2	; 0x02
 216:	87 2f       	mov	r24, r23
 218:	c9 df       	rcall	.-110    	; 0x1ac <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	c7 df       	rcall	.-114    	; 0x1ac <SPI_masterTransmit>
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	ca cf       	rjmp	.-108    	; 0x1bc <closePort>

00000228 <setRadioRXPayloadSize>:

  closePort();
}
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <setRadioRXPayloadSize+0x6>
 22e:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 230:	de b7       	in	r29, 0x3e	; 62
 232:	6a 83       	std	Y+2, r22	; 0x02
 ************************************************************/


void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size)
{
  openPort();
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	c0 df       	rcall	.-128    	; 0x1b8 <openPort>
 238:	89 81       	ldd	r24, Y+1	; 0x01
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	b7 df       	rcall	.-146    	; 0x1ac <SPI_masterTransmit>
 23e:	6a 81       	ldd	r22, Y+2	; 0x02
 240:	86 2f       	mov	r24, r22
  SPI_masterTransmit(size);  // size of payload for data pipe
 242:	b4 df       	rcall	.-152    	; 0x1ac <SPI_masterTransmit>
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	df 91       	pop	r29
  closePort();
}
 24a:	cf 91       	pop	r28
 24c:	b7 cf       	rjmp	.-146    	; 0x1bc <closePort>

0000024e <getRadioRXPayload>:
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size)
{
  openPort();
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
  SPI_masterTransmit(size);  // size of payload for data pipe
  closePort();
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
  closePort();
}


void getRadioRXPayload(uint8_t* payload, uint8_t payloadSize)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	8c 01       	movw	r16, r24
 25c:	e6 2e       	mov	r14, r22
  uint8_t radioStatus;
  openPort();
 25e:	ac df       	rcall	.-168    	; 0x1b8 <openPort>
 260:	81 e6       	ldi	r24, 0x61	; 97
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
 262:	a4 df       	rcall	.-184    	; 0x1ac <SPI_masterTransmit>
 264:	e8 01       	movw	r28, r16
 266:	f1 2c       	mov	r15, r1
  for(int i = 0; i<payloadSize; i++)
 268:	ce 01       	movw	r24, r28
 26a:	80 1b       	sub	r24, r16
 26c:	91 0b       	sbc	r25, r17
 26e:	8e 15       	cp	r24, r14
 270:	9f 05       	cpc	r25, r15
 272:	1c f4       	brge	.+6      	; 0x27a <getRadioRXPayload+0x2c>
 274:	94 df       	rcall	.-216    	; 0x19e <SPI_masterReceive>
 276:	89 93       	st	Y+, r24
  {
    payload[i] = SPI_masterReceive();
 278:	f7 cf       	rjmp	.-18     	; 0x268 <getRadioRXPayload+0x1a>
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
  }
  closePort();
}
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	9a cf       	rjmp	.-204    	; 0x1bc <closePort>

00000288 <getRadioStatus>:
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
  for(int i = 0; i<payloadSize; i++)
  {
    payload[i] = SPI_masterReceive();
  }
  closePort();
 28c:	ec 01       	movw	r28, r24
 28e:	94 df       	rcall	.-216    	; 0x1b8 <openPort>
}


void getRadioStatus(uint8_t* status)
{
  openPort();
 290:	87 e0       	ldi	r24, 0x07	; 7
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
 292:	8c df       	rcall	.-232    	; 0x1ac <SPI_masterTransmit>
 294:	88 83       	st	Y, r24
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
  closePort();
}
 29a:	90 cf       	rjmp	.-224    	; 0x1bc <closePort>

0000029c <getRX_DR>:
 29c:	cf 93       	push	r28

void getRadioStatus(uint8_t* status)
{
  openPort();
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
  closePort();
 29e:	df 93       	push	r29
 2a0:	1f 92       	push	r1




uint8_t getRX_DR()
{
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	ee df       	rcall	.-36     	; 0x288 <getRadioStatus>
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<6))  // if RX_DR is set
 2ae:	86 fb       	bst	r24, 6
    return 1;
  else
    return 0;
}
 2b0:	88 27       	eor	r24, r24
 2b2:	80 f9       	bld	r24, 0
 2b4:	0f 90       	pop	r0
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <clearRX_DR>:
 2bc:	7d df       	rcall	.-262    	; 0x1b8 <openPort>
}

void clearRX_DR()
{
  uint8_t status;
  openPort();
 2be:	87 e2       	ldi	r24, 0x27	; 39
  status = SPI_masterTransmit(0x07 | 0b00100000); 
 2c0:	75 df       	rcall	.-278    	; 0x1ac <SPI_masterTransmit>
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	73 df       	rcall	.-282    	; 0x1ac <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<6));  //reset receive bit
 2c6:	7a cf       	rjmp	.-268    	; 0x1bc <closePort>

000002c8 <malloc>:
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
  closePort();
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	91 05       	cpc	r25, r1
 2d0:	10 f4       	brcc	.+4      	; 0x2d6 <malloc+0xe>
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	e0 91 0a 01 	lds	r30, 0x010A
 2da:	f0 91 0b 01 	lds	r31, 0x010B
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	a0 e0       	ldi	r26, 0x00	; 0
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	30 97       	sbiw	r30, 0x00	; 0
 2e8:	39 f1       	breq	.+78     	; 0x338 <malloc+0x70>
 2ea:	40 81       	ld	r20, Z
 2ec:	51 81       	ldd	r21, Z+1	; 0x01
 2ee:	48 17       	cp	r20, r24
 2f0:	59 07       	cpc	r21, r25
 2f2:	b8 f0       	brcs	.+46     	; 0x322 <malloc+0x5a>
 2f4:	48 17       	cp	r20, r24
 2f6:	59 07       	cpc	r21, r25
 2f8:	71 f4       	brne	.+28     	; 0x316 <malloc+0x4e>
 2fa:	82 81       	ldd	r24, Z+2	; 0x02
 2fc:	93 81       	ldd	r25, Z+3	; 0x03
 2fe:	10 97       	sbiw	r26, 0x00	; 0
 300:	29 f0       	breq	.+10     	; 0x30c <malloc+0x44>
 302:	13 96       	adiw	r26, 0x03	; 3
 304:	9c 93       	st	X, r25
 306:	8e 93       	st	-X, r24
 308:	12 97       	sbiw	r26, 0x02	; 2
 30a:	2c c0       	rjmp	.+88     	; 0x364 <malloc+0x9c>
 30c:	90 93 0b 01 	sts	0x010B, r25
 310:	80 93 0a 01 	sts	0x010A, r24
 314:	27 c0       	rjmp	.+78     	; 0x364 <malloc+0x9c>
 316:	21 15       	cp	r18, r1
 318:	31 05       	cpc	r19, r1
 31a:	31 f0       	breq	.+12     	; 0x328 <malloc+0x60>
 31c:	42 17       	cp	r20, r18
 31e:	53 07       	cpc	r21, r19
 320:	18 f0       	brcs	.+6      	; 0x328 <malloc+0x60>
 322:	a9 01       	movw	r20, r18
 324:	db 01       	movw	r26, r22
 326:	01 c0       	rjmp	.+2      	; 0x32a <malloc+0x62>
 328:	ef 01       	movw	r28, r30
 32a:	9a 01       	movw	r18, r20
 32c:	bd 01       	movw	r22, r26
 32e:	df 01       	movw	r26, r30
 330:	02 80       	ldd	r0, Z+2	; 0x02
 332:	f3 81       	ldd	r31, Z+3	; 0x03
 334:	e0 2d       	mov	r30, r0
 336:	d7 cf       	rjmp	.-82     	; 0x2e6 <malloc+0x1e>
 338:	21 15       	cp	r18, r1
 33a:	31 05       	cpc	r19, r1
 33c:	f9 f0       	breq	.+62     	; 0x37c <malloc+0xb4>
 33e:	28 1b       	sub	r18, r24
 340:	39 0b       	sbc	r19, r25
 342:	24 30       	cpi	r18, 0x04	; 4
 344:	31 05       	cpc	r19, r1
 346:	80 f4       	brcc	.+32     	; 0x368 <malloc+0xa0>
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	9b 81       	ldd	r25, Y+3	; 0x03
 34c:	61 15       	cp	r22, r1
 34e:	71 05       	cpc	r23, r1
 350:	21 f0       	breq	.+8      	; 0x35a <malloc+0x92>
 352:	fb 01       	movw	r30, r22
 354:	93 83       	std	Z+3, r25	; 0x03
 356:	82 83       	std	Z+2, r24	; 0x02
 358:	04 c0       	rjmp	.+8      	; 0x362 <malloc+0x9a>
 35a:	90 93 0b 01 	sts	0x010B, r25
 35e:	80 93 0a 01 	sts	0x010A, r24
 362:	fe 01       	movw	r30, r28
 364:	32 96       	adiw	r30, 0x02	; 2
 366:	44 c0       	rjmp	.+136    	; 0x3f0 <malloc+0x128>
 368:	fe 01       	movw	r30, r28
 36a:	e2 0f       	add	r30, r18
 36c:	f3 1f       	adc	r31, r19
 36e:	81 93       	st	Z+, r24
 370:	91 93       	st	Z+, r25
 372:	22 50       	subi	r18, 0x02	; 2
 374:	31 09       	sbc	r19, r1
 376:	39 83       	std	Y+1, r19	; 0x01
 378:	28 83       	st	Y, r18
 37a:	3a c0       	rjmp	.+116    	; 0x3f0 <malloc+0x128>
 37c:	20 91 08 01 	lds	r18, 0x0108
 380:	30 91 09 01 	lds	r19, 0x0109
 384:	23 2b       	or	r18, r19
 386:	41 f4       	brne	.+16     	; 0x398 <malloc+0xd0>
 388:	20 91 03 01 	lds	r18, 0x0103
 38c:	30 91 04 01 	lds	r19, 0x0104
 390:	30 93 09 01 	sts	0x0109, r19
 394:	20 93 08 01 	sts	0x0108, r18
 398:	20 91 01 01 	lds	r18, 0x0101
 39c:	30 91 02 01 	lds	r19, 0x0102
 3a0:	21 15       	cp	r18, r1
 3a2:	31 05       	cpc	r19, r1
 3a4:	41 f4       	brne	.+16     	; 0x3b6 <malloc+0xee>
 3a6:	2d b7       	in	r18, 0x3d	; 61
 3a8:	3e b7       	in	r19, 0x3e	; 62
 3aa:	40 91 05 01 	lds	r20, 0x0105
 3ae:	50 91 06 01 	lds	r21, 0x0106
 3b2:	24 1b       	sub	r18, r20
 3b4:	35 0b       	sbc	r19, r21
 3b6:	e0 91 08 01 	lds	r30, 0x0108
 3ba:	f0 91 09 01 	lds	r31, 0x0109
 3be:	e2 17       	cp	r30, r18
 3c0:	f3 07       	cpc	r31, r19
 3c2:	a0 f4       	brcc	.+40     	; 0x3ec <malloc+0x124>
 3c4:	2e 1b       	sub	r18, r30
 3c6:	3f 0b       	sbc	r19, r31
 3c8:	28 17       	cp	r18, r24
 3ca:	39 07       	cpc	r19, r25
 3cc:	78 f0       	brcs	.+30     	; 0x3ec <malloc+0x124>
 3ce:	ac 01       	movw	r20, r24
 3d0:	4e 5f       	subi	r20, 0xFE	; 254
 3d2:	5f 4f       	sbci	r21, 0xFF	; 255
 3d4:	24 17       	cp	r18, r20
 3d6:	35 07       	cpc	r19, r21
 3d8:	48 f0       	brcs	.+18     	; 0x3ec <malloc+0x124>
 3da:	4e 0f       	add	r20, r30
 3dc:	5f 1f       	adc	r21, r31
 3de:	50 93 09 01 	sts	0x0109, r21
 3e2:	40 93 08 01 	sts	0x0108, r20
 3e6:	81 93       	st	Z+, r24
 3e8:	91 93       	st	Z+, r25
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <malloc+0x128>
 3ec:	e0 e0       	ldi	r30, 0x00	; 0
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	cf 01       	movw	r24, r30
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <free>:
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 97       	sbiw	r24, 0x00	; 0
 3fe:	09 f4       	brne	.+2      	; 0x402 <free+0xa>
 400:	87 c0       	rjmp	.+270    	; 0x510 <free+0x118>
 402:	fc 01       	movw	r30, r24
 404:	32 97       	sbiw	r30, 0x02	; 2
 406:	13 82       	std	Z+3, r1	; 0x03
 408:	12 82       	std	Z+2, r1	; 0x02
 40a:	c0 91 0a 01 	lds	r28, 0x010A
 40e:	d0 91 0b 01 	lds	r29, 0x010B
 412:	20 97       	sbiw	r28, 0x00	; 0
 414:	81 f4       	brne	.+32     	; 0x436 <free+0x3e>
 416:	20 81       	ld	r18, Z
 418:	31 81       	ldd	r19, Z+1	; 0x01
 41a:	28 0f       	add	r18, r24
 41c:	39 1f       	adc	r19, r25
 41e:	80 91 08 01 	lds	r24, 0x0108
 422:	90 91 09 01 	lds	r25, 0x0109
 426:	82 17       	cp	r24, r18
 428:	93 07       	cpc	r25, r19
 42a:	79 f5       	brne	.+94     	; 0x48a <free+0x92>
 42c:	f0 93 09 01 	sts	0x0109, r31
 430:	e0 93 08 01 	sts	0x0108, r30
 434:	6d c0       	rjmp	.+218    	; 0x510 <free+0x118>
 436:	de 01       	movw	r26, r28
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	ae 17       	cp	r26, r30
 43e:	bf 07       	cpc	r27, r31
 440:	50 f4       	brcc	.+20     	; 0x456 <free+0x5e>
 442:	12 96       	adiw	r26, 0x02	; 2
 444:	4d 91       	ld	r20, X+
 446:	5c 91       	ld	r21, X
 448:	13 97       	sbiw	r26, 0x03	; 3
 44a:	9d 01       	movw	r18, r26
 44c:	41 15       	cp	r20, r1
 44e:	51 05       	cpc	r21, r1
 450:	09 f1       	breq	.+66     	; 0x494 <free+0x9c>
 452:	da 01       	movw	r26, r20
 454:	f3 cf       	rjmp	.-26     	; 0x43c <free+0x44>
 456:	b3 83       	std	Z+3, r27	; 0x03
 458:	a2 83       	std	Z+2, r26	; 0x02
 45a:	40 81       	ld	r20, Z
 45c:	51 81       	ldd	r21, Z+1	; 0x01
 45e:	84 0f       	add	r24, r20
 460:	95 1f       	adc	r25, r21
 462:	8a 17       	cp	r24, r26
 464:	9b 07       	cpc	r25, r27
 466:	71 f4       	brne	.+28     	; 0x484 <free+0x8c>
 468:	8d 91       	ld	r24, X+
 46a:	9c 91       	ld	r25, X
 46c:	11 97       	sbiw	r26, 0x01	; 1
 46e:	84 0f       	add	r24, r20
 470:	95 1f       	adc	r25, r21
 472:	02 96       	adiw	r24, 0x02	; 2
 474:	91 83       	std	Z+1, r25	; 0x01
 476:	80 83       	st	Z, r24
 478:	12 96       	adiw	r26, 0x02	; 2
 47a:	8d 91       	ld	r24, X+
 47c:	9c 91       	ld	r25, X
 47e:	13 97       	sbiw	r26, 0x03	; 3
 480:	93 83       	std	Z+3, r25	; 0x03
 482:	82 83       	std	Z+2, r24	; 0x02
 484:	21 15       	cp	r18, r1
 486:	31 05       	cpc	r19, r1
 488:	29 f4       	brne	.+10     	; 0x494 <free+0x9c>
 48a:	f0 93 0b 01 	sts	0x010B, r31
 48e:	e0 93 0a 01 	sts	0x010A, r30
 492:	3e c0       	rjmp	.+124    	; 0x510 <free+0x118>
 494:	d9 01       	movw	r26, r18
 496:	13 96       	adiw	r26, 0x03	; 3
 498:	fc 93       	st	X, r31
 49a:	ee 93       	st	-X, r30
 49c:	12 97       	sbiw	r26, 0x02	; 2
 49e:	4d 91       	ld	r20, X+
 4a0:	5d 91       	ld	r21, X+
 4a2:	a4 0f       	add	r26, r20
 4a4:	b5 1f       	adc	r27, r21
 4a6:	ea 17       	cp	r30, r26
 4a8:	fb 07       	cpc	r31, r27
 4aa:	79 f4       	brne	.+30     	; 0x4ca <free+0xd2>
 4ac:	80 81       	ld	r24, Z
 4ae:	91 81       	ldd	r25, Z+1	; 0x01
 4b0:	84 0f       	add	r24, r20
 4b2:	95 1f       	adc	r25, r21
 4b4:	02 96       	adiw	r24, 0x02	; 2
 4b6:	d9 01       	movw	r26, r18
 4b8:	11 96       	adiw	r26, 0x01	; 1
 4ba:	9c 93       	st	X, r25
 4bc:	8e 93       	st	-X, r24
 4be:	82 81       	ldd	r24, Z+2	; 0x02
 4c0:	93 81       	ldd	r25, Z+3	; 0x03
 4c2:	13 96       	adiw	r26, 0x03	; 3
 4c4:	9c 93       	st	X, r25
 4c6:	8e 93       	st	-X, r24
 4c8:	12 97       	sbiw	r26, 0x02	; 2
 4ca:	e0 e0       	ldi	r30, 0x00	; 0
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	9b 81       	ldd	r25, Y+3	; 0x03
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	19 f0       	breq	.+6      	; 0x4dc <free+0xe4>
 4d6:	fe 01       	movw	r30, r28
 4d8:	ec 01       	movw	r28, r24
 4da:	f9 cf       	rjmp	.-14     	; 0x4ce <free+0xd6>
 4dc:	ce 01       	movw	r24, r28
 4de:	02 96       	adiw	r24, 0x02	; 2
 4e0:	28 81       	ld	r18, Y
 4e2:	39 81       	ldd	r19, Y+1	; 0x01
 4e4:	82 0f       	add	r24, r18
 4e6:	93 1f       	adc	r25, r19
 4e8:	20 91 08 01 	lds	r18, 0x0108
 4ec:	30 91 09 01 	lds	r19, 0x0109
 4f0:	28 17       	cp	r18, r24
 4f2:	39 07       	cpc	r19, r25
 4f4:	69 f4       	brne	.+26     	; 0x510 <free+0x118>
 4f6:	30 97       	sbiw	r30, 0x00	; 0
 4f8:	29 f4       	brne	.+10     	; 0x504 <free+0x10c>
 4fa:	10 92 0b 01 	sts	0x010B, r1
 4fe:	10 92 0a 01 	sts	0x010A, r1
 502:	02 c0       	rjmp	.+4      	; 0x508 <free+0x110>
 504:	13 82       	std	Z+3, r1	; 0x03
 506:	12 82       	std	Z+2, r1	; 0x02
 508:	d0 93 09 01 	sts	0x0109, r29
 50c:	c0 93 08 01 	sts	0x0108, r28
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
