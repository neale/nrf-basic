   1               		.file	"com.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.initUART,"ax",@progbits
  11               	.global	initUART
  13               	initUART:
  14               	.LFB11:
  15               		.file 1 "com.c"
   1:com.c         **** #define F_CPU 8000000
   2:com.c         **** 
   3:com.c         **** #include <avr/io.h>
   4:com.c         **** #include <avr/pgmspace.h>
   5:com.c         **** #include <avr/interrupt.h>
   6:com.c         **** #include <util/delay.h>
   7:com.c         **** #include <avr/eeprom.h>
   8:com.c         **** #include <avr/cpufunc.h>
   9:com.c         **** #include "../../lib/spi/spi.h"
  10:com.c         **** #include <stdlib.h>
  11:com.c         **** #include <assert.h>
  12:com.c         **** #include "../../lib/radio_control/radioctl.h"
  13:com.c         **** #include "../../lib/i2c/i2c.h"
  14:com.c         **** 
  15:com.c         **** #define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
  16:com.c         **** #define F_CPU 8000000
  17:com.c         **** 
  18:com.c         **** #define PACKET_SIZE 8
  19:com.c         **** char mode = 'r';
  20:com.c         **** void initUART(void)
  21:com.c         **** {
  16               		.loc 1 21 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22:com.c         ****   //UBRR1 = (F_CPU / 4/ baud - 1) / 2;
  23:com.c         ****   UBRR1 = 25;  //38.4k baud
  22               		.loc 1 23 0
  23 0000 89E1      		ldi r24,lo8(25)
  24 0002 90E0      		ldi r25,0
  25 0004 9093 CD00 		sts 204+1,r25
  26 0008 8093 CC00 		sts 204,r24
  24:com.c         ****   UCSR1A = (1<<U2X1);
  27               		.loc 1 24 0
  28 000c 82E0      		ldi r24,lo8(2)
  29 000e 8093 C800 		sts 200,r24
  25:com.c         ****   UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  30               		.loc 1 25 0
  31 0012 88E1      		ldi r24,lo8(24)
  32 0014 8093 C900 		sts 201,r24
  26:com.c         ****   UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  33               		.loc 1 26 0
  34 0018 86E0      		ldi r24,lo8(6)
  35 001a 8093 CA00 		sts 202,r24
  36 001e 0895      		ret
  37               		.cfi_endproc
  38               	.LFE11:
  40               		.section	.text.build_packet,"ax",@progbits
  41               	.global	build_packet
  43               	build_packet:
  44               	.LFB12:
  27:com.c         **** }
  28:com.c         **** 
  29:com.c         **** void build_packet(uint8_t * data){
  45               		.loc 1 29 0
  46               		.cfi_startproc
  47               	.LVL0:
  48               	/* prologue: function */
  49               	/* frame size = 0 */
  50               	/* stack size = 0 */
  51               	.L__stack_usage = 0
  52               		.loc 1 29 0
  53 0000 21E6      		ldi r18,lo8(97)
  54               	.LVL1:
  55               	.L4:
  56               	.LBB22:
  30:com.c         **** 
  31:com.c         ****   for(int i = 0; i < PACKET_SIZE; ++i){
  32:com.c         ****     data[i] = 'a' + i; 
  57               		.loc 1 32 0 discriminator 2
  58 0002 FC01      		movw r30,r24
  59 0004 2193      		st Z+,r18
  60 0006 CF01      		movw r24,r30
  61               	.LVL2:
  62 0008 2F5F      		subi r18,lo8(-(1))
  31:com.c         ****   for(int i = 0; i < PACKET_SIZE; ++i){
  63               		.loc 1 31 0 discriminator 2
  64 000a 2936      		cpi r18,lo8(105)
  65 000c 01F4      		brne .L4
  66               	/* epilogue start */
  67               	.LBE22:
  33:com.c         ****   }
  34:com.c         ****   return data; 
  35:com.c         **** }
  68               		.loc 1 35 0
  69 000e 0895      		ret
  70               		.cfi_endproc
  71               	.LFE12:
  73               		.section	.text.uart_putchar,"ax",@progbits
  74               	.global	uart_putchar
  76               	uart_putchar:
  77               	.LFB14:
  36:com.c         **** 
  37:com.c         **** void uart_putstring(char * s){
  38:com.c         **** 
  39:com.c         ****   int i = 0; 
  40:com.c         ****   while(s[i] != '\0'){
  41:com.c         ****     uart_putchar(s[i]);
  42:com.c         ****     i++;
  43:com.c         ****   }
  44:com.c         **** }
  45:com.c         **** 
  46:com.c         **** void uart_putchar(char c){
  78               		.loc 1 46 0
  79               		.cfi_startproc
  80               	/* prologue: function */
  81               	/* frame size = 0 */
  82               	/* stack size = 0 */
  83               	.L__stack_usage = 0
  84               	.LVL3:
  85               	.L8:
  47:com.c         **** 
  48:com.c         ****   while (!(UCSR1A & (1 << UDRE1)));
  86               		.loc 1 48 0 discriminator 1
  87 0000 9091 C800 		lds r25,200
  88 0004 95FF      		sbrs r25,5
  89 0006 00C0      		rjmp .L8
  49:com.c         ****   UDR1 = c;
  90               		.loc 1 49 0
  91 0008 8093 CE00 		sts 206,r24
  92 000c 0895      		ret
  93               		.cfi_endproc
  94               	.LFE14:
  96               		.section	.text.uart_putstring,"ax",@progbits
  97               	.global	uart_putstring
  99               	uart_putstring:
 100               	.LFB13:
  37:com.c         **** void uart_putstring(char * s){
 101               		.loc 1 37 0
 102               		.cfi_startproc
 103               	.LVL4:
 104 0000 CF93      		push r28
 105               	.LCFI0:
 106               		.cfi_def_cfa_offset 3
 107               		.cfi_offset 28, -2
 108 0002 DF93      		push r29
 109               	.LCFI1:
 110               		.cfi_def_cfa_offset 4
 111               		.cfi_offset 29, -3
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 2 */
 115               	.L__stack_usage = 2
 116 0004 EC01      		movw r28,r24
 117               	.LVL5:
 118               	.L10:
  40:com.c         ****   while(s[i] != '\0'){
 119               		.loc 1 40 0 discriminator 1
 120 0006 8991      		ld r24,Y+
 121               	.LVL6:
 122 0008 8823      		tst r24
 123 000a 01F0      		breq .L12
 124               	.LBB23:
  41:com.c         ****     uart_putchar(s[i]);
 125               		.loc 1 41 0
 126 000c 90E0      		ldi r25,0
 127 000e 0E94 0000 		call uart_putchar
 128               	.LVL7:
 129 0012 00C0      		rjmp .L10
 130               	.LVL8:
 131               	.L12:
 132               	/* epilogue start */
 133               	.LBE23:
  44:com.c         **** }
 134               		.loc 1 44 0
 135 0014 DF91      		pop r29
 136 0016 CF91      		pop r28
 137               	.LVL9:
 138 0018 0895      		ret
 139               		.cfi_endproc
 140               	.LFE13:
 142               		.section	.rodata.str1.1,"aMS",@progbits,1
 143               	.LC0:
 144 0000 7377 6974 		.string	"switching to receive"
 144      6368 696E 
 144      6720 746F 
 144      2072 6563 
 144      6569 7665 
 145               	.LC1:
 146 0015 7761 6974 		.string	"waiting for ack"
 146      696E 6720 
 146      666F 7220 
 146      6163 6B00 
 147               		.section	.text.transmit,"ax",@progbits
 148               	.global	transmit
 150               	transmit:
 151               	.LFB15:
  50:com.c         **** }
  51:com.c         **** 
  52:com.c         **** void transmit(uint8_t * data){
 152               		.loc 1 52 0
 153               		.cfi_startproc
 154               	.LVL10:
 155 0000 CF93      		push r28
 156               	.LCFI2:
 157               		.cfi_def_cfa_offset 3
 158               		.cfi_offset 28, -2
 159 0002 DF93      		push r29
 160               	.LCFI3:
 161               		.cfi_def_cfa_offset 4
 162               		.cfi_offset 29, -3
 163               	/* prologue: function */
 164               	/* frame size = 0 */
 165               	/* stack size = 2 */
 166               	.L__stack_usage = 2
 167 0004 EC01      		movw r28,r24
  53:com.c         **** 
  54:com.c         ****   SPI_masterInit();
 168               		.loc 1 54 0
 169 0006 0E94 0000 		call SPI_masterInit
 170               	.LVL11:
  55:com.c         ****   initRadioTX();
 171               		.loc 1 55 0
 172 000a 0E94 0000 		call initRadioTX
 173               	.LVL12:
 174               	.LBB24:
 175               	.LBB25:
 176               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 177               		.loc 2 163 0
 178 000e 8FE7      		ldi r24,lo8(15999)
 179 0010 9EE3      		ldi r25,hi8(15999)
 180 0012 0197      		1: sbiw r24,1
 181 0014 01F4      		brne 1b
 182 0016 00C0      		rjmp .
 183 0018 0000      		nop
 184               	.LBE25:
 185               	.LBE24:
  56:com.c         ****   _delay_ms(8);
  57:com.c         ****   uart_putchar(mode);
 186               		.loc 1 57 0
 187 001a 8091 0000 		lds r24,mode
 188 001e 0E94 0000 		call uart_putchar
 189               	.LVL13:
  58:com.c         ****   build_packet(data);  
 190               		.loc 1 58 0
 191 0022 CE01      		movw r24,r28
 192 0024 0E94 0000 		call build_packet
 193               	.LVL14:
  59:com.c         ****   if(!(PINF & (1 << 0)))
 194               		.loc 1 59 0
 195 0028 7899      		sbic 0xf,0
 196 002a 00C0      		rjmp .L14
 197               	.L15:
 198               	.LDL1:
  60:com.c         ****     goto exit; 
  61:com.c         ****   setRadioTXPayload(data, PACKET_SIZE);
  62:com.c         ****   CE_HIGH;
  63:com.c         ****   _delay_us(15);  // pulse CE to start transmition
  64:com.c         ****   CE_LOW;
  65:com.c         ****   if(!(PINF & (1 << 0)))
  66:com.c         ****     goto exit; 
  67:com.c         ****   while(!(getTX_DS())){
  68:com.c         ****     if(!(PINF & (1 << 0)))
  69:com.c         ****       goto exit;
  70:com.c         ****     if(PINF & (1 << 0))
  71:com.c         ****       goto exit;
  72:com.c         ****     uart_putstring("waiting for ack");
  73:com.c         ****     _delay_us(300);  //retransmit time determined by SETUP_RETR register
  74:com.c         **** 
  75:com.c         ****     if(getMAX_RT()){
  76:com.c         **** 
  77:com.c         ****       clearMAX_RT();
  78:com.c         ****       CE_HIGH;
  79:com.c         ****       _delay_us(15);
  80:com.c         ****         CE_LOW;
  81:com.c         ****     }
  82:com.c         ****   }
  83:com.c         ****   exit:
  84:com.c         ****     clearTX_DS();
 199               		.loc 1 84 0
 200 002c 0E94 0000 		call clearTX_DS
 201               	.LVL15:
 202               	.LBB26:
 203               	.LBB27:
 204               		.loc 2 163 0
 205 0030 8FE0      		ldi r24,lo8(9999)
 206 0032 97E2      		ldi r25,hi8(9999)
 207 0034 0197      		1: sbiw r24,1
 208 0036 01F4      		brne 1b
 209 0038 00C0      		rjmp .
 210 003a 0000      		nop
 211               	.LBE27:
 212               	.LBE26:
  85:com.c         ****     _delay_ms(5);
  86:com.c         **** 
  87:com.c         ****     SPI_masterInit();
 213               		.loc 1 87 0
 214 003c 0E94 0000 		call SPI_masterInit
 215               	.LVL16:
  88:com.c         ****     initRadioRX();
 216               		.loc 1 88 0
 217 0040 0E94 0000 		call initRadioRX
 218               	.LVL17:
 219               	.LBB28:
 220               	.LBB29:
 221               		.loc 2 163 0
 222 0044 8FE7      		ldi r24,lo8(15999)
 223 0046 9EE3      		ldi r25,hi8(15999)
 224 0048 0197      		1: sbiw r24,1
 225 004a 01F4      		brne 1b
 226 004c 00C0      		rjmp .
 227 004e 0000      		nop
 228               	.LBE29:
 229               	.LBE28:
  89:com.c         ****     _delay_ms(8);
  90:com.c         ****     uart_putstring("switching to receive");
 230               		.loc 1 90 0
 231 0050 80E0      		ldi r24,lo8(.LC0)
 232 0052 90E0      		ldi r25,hi8(.LC0)
 233 0054 0E94 0000 		call uart_putstring
 234               	.LVL18:
  91:com.c         ****     mode = 'r';
 235               		.loc 1 91 0
 236 0058 82E7      		ldi r24,lo8(114)
 237 005a 8093 0000 		sts mode,r24
 238               	/* epilogue start */
  92:com.c         **** }
 239               		.loc 1 92 0
 240 005e DF91      		pop r29
 241 0060 CF91      		pop r28
 242               	.LVL19:
 243 0062 0895      		ret
 244               	.LVL20:
 245               	.L14:
  61:com.c         ****   setRadioTXPayload(data, PACKET_SIZE);
 246               		.loc 1 61 0
 247 0064 68E0      		ldi r22,lo8(8)
 248 0066 CE01      		movw r24,r28
 249 0068 0E94 0000 		call setRadioTXPayload
 250               	.LVL21:
  62:com.c         ****   CE_HIGH;
 251               		.loc 1 62 0
 252 006c 899A      		sbi 0x11,1
 253               	.LVL22:
 254               	.LBB30:
 255               	.LBB31:
 164:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 165:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #else
 166:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	{
 172:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		{
 176:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		}
 180:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		return;
 181:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	}
 182:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	else
 183:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 186:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** }
 187:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 188:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 189:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 191:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 193:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 196:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 198:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 202:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   
 207:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 211:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  
 214:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 222:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 223:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 224:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 226:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 234:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 237:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 240:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 241:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 242:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 244:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 245:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 256               		.loc 2 245 0
 257 006e 98E2      		ldi r25,lo8(40)
 258 0070 9A95      		1: dec r25
 259 0072 01F4      		brne 1b
 260               	.LBE31:
 261               	.LBE30:
  64:com.c         ****   CE_LOW;
 262               		.loc 1 64 0
 263 0074 8998      		cbi 0x11,1
  65:com.c         ****   if(!(PINF & (1 << 0)))
 264               		.loc 1 65 0
 265 0076 789B      		sbis 0xf,0
 266 0078 00C0      		rjmp .L15
 267               	.L18:
  67:com.c         ****   while(!(getTX_DS())){
 268               		.loc 1 67 0 discriminator 1
 269 007a 0E94 0000 		call getTX_DS
 270               	.LVL23:
 271 007e 8111      		cpse r24,__zero_reg__
 272 0080 00C0      		rjmp .L15
  68:com.c         ****     if(!(PINF & (1 << 0)))
 273               		.loc 1 68 0
 274 0082 789B      		sbis 0xf,0
 275 0084 00C0      		rjmp .L15
  70:com.c         ****     if(PINF & (1 << 0))
 276               		.loc 1 70 0
 277 0086 7899      		sbic 0xf,0
 278 0088 00C0      		rjmp .L15
  72:com.c         ****     uart_putstring("waiting for ack");
 279               		.loc 1 72 0
 280 008a 80E0      		ldi r24,lo8(.LC1)
 281 008c 90E0      		ldi r25,hi8(.LC1)
 282 008e 0E94 0000 		call uart_putstring
 283               	.LVL24:
 284               	.LBB32:
 285               	.LBB33:
 286               		.loc 2 245 0
 287 0092 87E5      		ldi r24,lo8(599)
 288 0094 92E0      		ldi r25,hi8(599)
 289 0096 0197      		1: sbiw r24,1
 290 0098 01F4      		brne 1b
 291 009a 00C0      		rjmp .
 292 009c 0000      		nop
 293               	.LBE33:
 294               	.LBE32:
  75:com.c         ****     if(getMAX_RT()){
 295               		.loc 1 75 0
 296 009e 0E94 0000 		call getMAX_RT
 297               	.LVL25:
 298 00a2 8823      		tst r24
 299 00a4 01F0      		breq .L18
  77:com.c         ****       clearMAX_RT();
 300               		.loc 1 77 0
 301 00a6 0E94 0000 		call clearMAX_RT
 302               	.LVL26:
  78:com.c         ****       CE_HIGH;
 303               		.loc 1 78 0
 304 00aa 899A      		sbi 0x11,1
 305               	.LVL27:
 306               	.LBB34:
 307               	.LBB35:
 308               		.loc 2 245 0
 309 00ac 98E2      		ldi r25,lo8(40)
 310 00ae 9A95      		1: dec r25
 311 00b0 01F4      		brne 1b
 312               	.LBE35:
 313               	.LBE34:
  80:com.c         ****         CE_LOW;
 314               		.loc 1 80 0
 315 00b2 8998      		cbi 0x11,1
 316 00b4 00C0      		rjmp .L18
 317               		.cfi_endproc
 318               	.LFE15:
 320               		.section	.text.init_ports,"ax",@progbits
 321               	.global	init_ports
 323               	init_ports:
 324               	.LFB16:
  93:com.c         **** void init_ports(void){
 325               		.loc 1 93 0
 326               		.cfi_startproc
 327               	/* prologue: function */
 328               	/* frame size = 0 */
 329               	/* stack size = 0 */
 330               	.L__stack_usage = 0
  94:com.c         **** 
  95:com.c         ****   DDRF &= ~(1 << 0);
 331               		.loc 1 95 0
 332 0000 8098      		cbi 0x10,0
  96:com.c         ****   PORTF &= ~(1 << 0);
 333               		.loc 1 96 0
 334 0002 8898      		cbi 0x11,0
  97:com.c         ****   EICRA = (1 << ISC00) | (1 << ISC01);
 335               		.loc 1 97 0
 336 0004 83E0      		ldi r24,lo8(3)
 337 0006 8093 6900 		sts 105,r24
  98:com.c         ****   EIMSK = (1 << INT0);
 338               		.loc 1 98 0
 339 000a 81E0      		ldi r24,lo8(1)
 340 000c 8DBB      		out 0x1d,r24
 341 000e 0895      		ret
 342               		.cfi_endproc
 343               	.LFE16:
 345               		.section	.text.startup.main,"ax",@progbits
 346               	.global	main
 348               	main:
 349               	.LFB17:
  99:com.c         **** }
 100:com.c         **** 
 101:com.c         **** int main(void){
 350               		.loc 1 101 0
 351               		.cfi_startproc
 352 0000 CF93      		push r28
 353               	.LCFI4:
 354               		.cfi_def_cfa_offset 3
 355               		.cfi_offset 28, -2
 356 0002 DF93      		push r29
 357               	.LCFI5:
 358               		.cfi_def_cfa_offset 4
 359               		.cfi_offset 29, -3
 360 0004 CDB7      		in r28,__SP_L__
 361 0006 DEB7      		in r29,__SP_H__
 362               	.LCFI6:
 363               		.cfi_def_cfa_register 28
 364 0008 2997      		sbiw r28,9
 365               	.LCFI7:
 366               		.cfi_def_cfa_offset 13
 367 000a 0FB6      		in __tmp_reg__,__SREG__
 368 000c F894      		cli
 369 000e DEBF      		out __SP_H__,r29
 370 0010 0FBE      		out __SREG__,__tmp_reg__
 371 0012 CDBF      		out __SP_L__,r28
 372               	/* prologue: function */
 373               	/* frame size = 9 */
 374               	/* stack size = 11 */
 375               	.L__stack_usage = 11
 102:com.c         **** 
 103:com.c         ****   uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));
 376               		.loc 1 103 0
 377 0014 88E0      		ldi r24,lo8(8)
 378 0016 90E0      		ldi r25,0
 379 0018 0E94 0000 		call malloc
 380               	.LVL28:
 381 001c 7C01      		movw r14,r24
 382               	.LVL29:
 104:com.c         **** 
 105:com.c         ****   CPU_PRESCALE(0x01);  // run at 8 MHz
 383               		.loc 1 105 0
 384 001e 80E8      		ldi r24,lo8(-128)
 385 0020 8093 6100 		sts 97,r24
 386 0024 81E0      		ldi r24,lo8(1)
 387 0026 8093 6100 		sts 97,r24
 106:com.c         **** 
 107:com.c         ****   INIT_CSN;
 388               		.loc 1 107 0
 389 002a 849A      		sbi 0x10,4
 108:com.c         ****   INIT_CE;
 390               		.loc 1 108 0
 391 002c 819A      		sbi 0x10,1
 109:com.c         ****   CSN_HIGH;
 392               		.loc 1 109 0
 393 002e 8C9A      		sbi 0x11,4
 110:com.c         ****   initUART();
 394               		.loc 1 110 0
 395 0030 0E94 0000 		call initUART
 396               	.LVL30:
 111:com.c         ****   init_ports();
 397               		.loc 1 111 0
 398 0034 0E94 0000 		call init_ports
 399               	.LVL31:
 112:com.c         ****   SPI_masterInit();
 400               		.loc 1 112 0
 401 0038 0E94 0000 		call SPI_masterInit
 402               	.LVL32:
 113:com.c         ****   initRadioTX();
 403               		.loc 1 113 0
 404 003c 0E94 0000 		call initRadioTX
 405               	.LVL33:
 114:com.c         **** 
 115:com.c         ****   setRadioAddressWidth(THREE_BYTES);
 406               		.loc 1 115 0
 407 0040 81E0      		ldi r24,lo8(1)
 408 0042 0E94 0000 		call setRadioAddressWidth
 409               	.LVL34:
 116:com.c         ****   setRadioTXAddress(0xABC123);        
 410               		.loc 1 116 0
 411 0046 63E2      		ldi r22,lo8(35)
 412 0048 71EC      		ldi r23,lo8(-63)
 413 004a 8BEA      		ldi r24,lo8(-85)
 414 004c 90E0      		ldi r25,0
 415 004e 0E94 0000 		call setRadioTXAddress
 416               	.LVL35:
 117:com.c         ****   setRadioRXAddress(0xABC123);
 417               		.loc 1 117 0
 418 0052 63E2      		ldi r22,lo8(35)
 419 0054 71EC      		ldi r23,lo8(-63)
 420 0056 8BEA      		ldi r24,lo8(-85)
 421 0058 90E0      		ldi r25,0
 422 005a 0E94 0000 		call setRadioRXAddress
 423               	.LVL36:
 118:com.c         ****   setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 424               		.loc 1 118 0
 425 005e 68E0      		ldi r22,lo8(8)
 426 0060 81E1      		ldi r24,lo8(17)
 427 0062 0E94 0000 		call setRadioRXPayloadSize
 428               	.LVL37:
 119:com.c         ****   setRadioFrequency(0b00000010);
 429               		.loc 1 119 0
 430 0066 82E0      		ldi r24,lo8(2)
 431 0068 0E94 0000 		call setRadioFrequency
 432               	.LVL38:
 120:com.c         **** 
 121:com.c         ****   uint8_t data[PACKET_SIZE] = {0};
 433               		.loc 1 121 0
 434 006c FE01      		movw r30,r28
 435 006e 3196      		adiw r30,1
 436 0070 88E0      		ldi r24,lo8(8)
 437 0072 DF01      		movw r26,r30
 438               		0:
 439 0074 1D92      		st X+,__zero_reg__
 440 0076 8A95      		dec r24
 441 0078 01F4      		brne 0b
 122:com.c         **** 
 123:com.c         ****   sei();
 442               		.loc 1 123 0
 443               	/* #APP */
 444               	 ;  123 "com.c" 1
 445 007a 7894      		sei
 446               	 ;  0 "" 2
 447               	.LVL39:
 448               	/* #NOAPP */
 449               	.LBB36:
 450               	.LBB37:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 451               		.loc 2 163 0
 452 007c 8FE0      		ldi r24,lo8(9999)
 453 007e 97E2      		ldi r25,hi8(9999)
 454 0080 0197      		1: sbiw r24,1
 455 0082 01F4      		brne 1b
 456 0084 00C0      		rjmp .
 457 0086 0000      		nop
 458               	.LBE37:
 459               	.LBE36:
 124:com.c         ****   _delay_ms(5);
 125:com.c         ****   while(1){
 126:com.c         ****     _delay_ms(100);
 127:com.c         ****     if(PINF & (1 << 0)){
 128:com.c         ****       mode = 't';
 129:com.c         ****     } 
 130:com.c         ****     else mode = 'r';
 460               		.loc 1 130 0
 461 0088 82E7      		ldi r24,lo8(114)
 462 008a D82E      		mov r13,r24
 128:com.c         ****       mode = 't';
 463               		.loc 1 128 0
 464 008c 94E7      		ldi r25,lo8(116)
 465 008e C92E      		mov r12,r25
 466               	.L29:
 467               	.LVL40:
 468               	.LBB38:
 469               	.LBB39:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 470               		.loc 2 163 0
 471 0090 9FEF      		ldi r25,lo8(159999)
 472 0092 A0E7      		ldi r26,hi8(159999)
 473 0094 B2E0      		ldi r27,hlo8(159999)
 474 0096 9150      		1: subi r25,1
 475 0098 A040      		sbci r26,0
 476 009a B040      		sbci r27,0
 477 009c 01F4      		brne 1b
 478 009e 00C0      		rjmp .
 479 00a0 0000      		nop
 480               	.LBE39:
 481               	.LBE38:
 127:com.c         ****     if(PINF & (1 << 0)){
 482               		.loc 1 127 0
 483 00a2 789B      		sbis 0xf,0
 484 00a4 00C0      		rjmp .L30
 128:com.c         ****       mode = 't';
 485               		.loc 1 128 0
 486 00a6 C092 0000 		sts mode,r12
 487 00aa 00C0      		rjmp .L31
 488               	.L30:
 489               		.loc 1 130 0
 490 00ac D092 0000 		sts mode,r13
 491               	.L31:
 131:com.c         **** 
 132:com.c         ****     if (mode == 'r'){
 492               		.loc 1 132 0
 493 00b0 8091 0000 		lds r24,mode
 494 00b4 8237      		cpi r24,lo8(114)
 495 00b6 01F4      		brne .L32
 496               	.LBB40:
 133:com.c         ****       uart_putchar(mode);   
 497               		.loc 1 133 0
 498 00b8 0E94 0000 		call uart_putchar
 499               	.LVL41:
 134:com.c         ****       uint8_t radioStatus = 0;
 500               		.loc 1 134 0
 501 00bc 1986      		std Y+9,__zero_reg__
 135:com.c         ****       getRadioStatus(&radioStatus);
 502               		.loc 1 135 0
 503 00be CE01      		movw r24,r28
 504 00c0 0996      		adiw r24,9
 505 00c2 0E94 0000 		call getRadioStatus
 506               	.LVL42:
 136:com.c         ****       if(getRX_DR()){  // if RX data received
 507               		.loc 1 136 0
 508 00c6 0E94 0000 		call getRX_DR
 509               	.LVL43:
 510 00ca 8111      		cpse r24,__zero_reg__
 511 00cc 00C0      		rjmp .L33
 512               	.L35:
 137:com.c         **** 
 138:com.c         ****         clearRX_DR();
 139:com.c         ****         getRadioRXPayload(load, PACKET_SIZE); //read payload
 140:com.c         ****         CE_LOW;
 141:com.c         ****         for(int i = 0; i<PACKET_SIZE; i++){
 142:com.c         ****           uart_putstring(load);
 143:com.c         ****         }
 144:com.c         ****       }
 145:com.c         ****       CE_HIGH; 
 513               		.loc 1 145 0
 514 00ce 899A      		sbi 0x11,1
 515               	.LVL44:
 516               	.LBB41:
 517               	.LBB42:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 518               		.loc 2 163 0
 519 00d0 8FE0      		ldi r24,lo8(9999)
 520 00d2 97E2      		ldi r25,hi8(9999)
 521 00d4 0197      		1: sbiw r24,1
 522 00d6 01F4      		brne 1b
 523 00d8 00C0      		rjmp .
 524 00da 0000      		nop
 525               	.LBE42:
 526               	.LBE41:
 527               	.LBE40:
 528 00dc 00C0      		rjmp .L29
 529               	.LVL45:
 530               	.L33:
 531               	.LBB44:
 138:com.c         ****         clearRX_DR();
 532               		.loc 1 138 0
 533 00de 0E94 0000 		call clearRX_DR
 534               	.LVL46:
 139:com.c         ****         getRadioRXPayload(load, PACKET_SIZE); //read payload
 535               		.loc 1 139 0
 536 00e2 68E0      		ldi r22,lo8(8)
 537 00e4 C701      		movw r24,r14
 538 00e6 0E94 0000 		call getRadioRXPayload
 539               	.LVL47:
 140:com.c         ****         CE_LOW;
 540               		.loc 1 140 0
 541 00ea 8998      		cbi 0x11,1
 542               	.LVL48:
 543 00ec 08E0      		ldi r16,lo8(8)
 544 00ee 10E0      		ldi r17,0
 545               	.LVL49:
 546               	.L36:
 547               	.LBB43:
 142:com.c         ****           uart_putstring(load);
 548               		.loc 1 142 0 discriminator 2
 549 00f0 C701      		movw r24,r14
 550 00f2 0E94 0000 		call uart_putstring
 551               	.LVL50:
 552 00f6 0150      		subi r16,1
 553 00f8 1109      		sbc r17,__zero_reg__
 554               	.LVL51:
 141:com.c         ****         for(int i = 0; i<PACKET_SIZE; i++){
 555               		.loc 1 141 0 discriminator 2
 556 00fa 0115      		cp r16,__zero_reg__
 557 00fc 1105      		cpc r17,__zero_reg__
 558 00fe 01F4      		brne .L36
 559 0100 00C0      		rjmp .L35
 560               	.LVL52:
 561               	.L32:
 562               	.LBE43:
 563               	.LBE44:
 146:com.c         ****       _delay_ms(5);
 147:com.c         ****     }
 148:com.c         ****     else if(mode == 't'){
 564               		.loc 1 148 0
 565 0102 8437      		cpi r24,lo8(116)
 566 0104 01F4      		brne .L29
 149:com.c         ****       transmit(data);
 567               		.loc 1 149 0
 568 0106 CE01      		movw r24,r28
 569 0108 0196      		adiw r24,1
 570 010a 0E94 0000 		call transmit
 571               	.LVL53:
 572 010e 00C0      		rjmp .L29
 573               		.cfi_endproc
 574               	.LFE17:
 576               	.global	mode
 577               		.data
 580               	mode:
 581 0000 72        		.byte	114
 582               		.text
 583               	.Letext0:
 584               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 585               		.file 4 "/usr/local/CrossPack-AVR-20131216/lib/gcc/avr/4.8.1/include/stddef.h"
 586               		.file 5 "../../lib/spi/spi.h"
 587               		.file 6 "../../lib/radio_control/radioctl.h"
 588               		.file 7 "/usr/local/CrossPack-AVR-20131216/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:00000000 com.c
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:2      *ABS*:0000003e __SP_H__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:3      *ABS*:0000003d __SP_L__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:4      *ABS*:0000003f __SREG__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:13     .text.initUART:00000000 initUART
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:43     .text.build_packet:00000000 build_packet
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:76     .text.uart_putchar:00000000 uart_putchar
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:99     .text.uart_putstring:00000000 uart_putstring
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:150    .text.transmit:00000000 transmit
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:580    .data:00000000 mode
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:323    .text.init_ports:00000000 init_ports
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccJX74yi.s:348    .text.startup.main:00000000 main

UNDEFINED SYMBOLS
SPI_masterInit
initRadioTX
clearTX_DS
initRadioRX
setRadioTXPayload
getTX_DS
getMAX_RT
clearMAX_RT
malloc
setRadioAddressWidth
setRadioTXAddress
setRadioRXAddress
setRadioRXPayloadSize
setRadioFrequency
getRadioStatus
getRX_DR
clearRX_DR
getRadioRXPayload
__do_copy_data
