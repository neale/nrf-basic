
com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000728  000007bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080012c  0080012c  000007e8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00000800  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001569  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000627  00000000  00000000  00001f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ba  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  00002d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000471  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a42  00000000  00000000  0000358d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00003fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{

  uint8_t data1 = 0; 


  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); //Send Start condition
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))    //breaks when TWINT == 1
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
    ;			//Wait for transmission to complete

  if ((TWSR & 0xF8) != START)
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
    ERROR2();               //If START condition not received, error


  TWDR = 0xD4;
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  TWCR = (1<<TWINT) | (1<<TWEN);  //Load SLA+W then initiate transfer
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
    ;			//Wait for transmission to complete


  if ((TWSR & 0xF8) != 0x18)
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
    ERROR2();		//ERROR if SLA+W not sent and acknowledged


  TWDR = data2;
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  TWCR = (1<<TWINT) | (1<<TWEN);  //Load data, start transmission
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop

  while (!(TWCR & (1<<TWINT)))
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
    ;			//Wait for transmission to complete

  if((TWSR & 0xF8) != 0x28)	
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop





  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    //repeat start condition
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))    //breaks when TWINT == 1
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
    ;			//Wait for transmission to complete

  if((TWSR & 0xF8) != 0x10)  //Error for repeat start condition
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
    ERROR2();


  TWDR = 0xD5;   //SLA+R
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop

  TWCR = (1<<TWINT) | (1<<TWEN);  //load data
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>


  while (!(TWCR & (1<<TWINT)))
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
    ;			//Wait for transmission to complete


  if((TWSR & 0xF8) != 0x40)  // checks if SLA+R and ACK has been sent
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
    ERROR2();



  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  //ready to receive,  ACK
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop

  while (!(TWCR & (1<<TWINT)))  // wait for reception
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
    ;

  data1 = TWDR;
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop

  TWCR = (1<<TWINT) | (1<<TWEN);   //send no ACK
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))  // wait for reception
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
    ;

  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); //send stop condition
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop

  return data1; 

}
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e2       	ldi	r30, 0x28	; 40
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ac 32       	cpi	r26, 0x2C	; 44
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	ac e2       	ldi	r26, 0x2C	; 44
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 33       	cpi	r26, 0x30	; 48
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	83 d0       	rcall	.+262    	; 0x1e6 <main>
  e0:	21 c3       	rjmp	.+1602   	; 0x724 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <initUART>:
#define PACKET_SIZE 8
char mode = 'r';
void initUART(void)
{
  //UBRR1 = (F_CPU / 4/ baud - 1) / 2;
  UBRR1 = 25;  //38.4k baud
  e4:	89 e1       	ldi	r24, 0x19	; 25
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 cd 00 	sts	0x00CD, r25
  ec:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1A = (1<<U2X1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 c8 00 	sts	0x00C8, r24
  UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c9 00 	sts	0x00C9, r24
  UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 ca 00 	sts	0x00CA, r24
 102:	08 95       	ret

00000104 <build_packet>:
}

void build_packet(uint8_t * data){
 104:	21 e6       	ldi	r18, 0x61	; 97

  for(int i = 0; i < PACKET_SIZE; ++i){
    data[i] = 'a' + i; 
 106:	fc 01       	movw	r30, r24
 108:	21 93       	st	Z+, r18
 10a:	cf 01       	movw	r24, r30
 10c:	2f 5f       	subi	r18, 0xFF	; 255
  UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
}

void build_packet(uint8_t * data){

  for(int i = 0; i < PACKET_SIZE; ++i){
 10e:	29 36       	cpi	r18, 0x69	; 105
 110:	d1 f7       	brne	.-12     	; 0x106 <build_packet+0x2>
    data[i] = 'a' + i; 
  }
  return data; 
}
 112:	08 95       	ret

00000114 <uart_putchar>:
  }
}

void uart_putchar(char c){

  while (!(UCSR1A & (1 << UDRE1)));
 114:	90 91 c8 00 	lds	r25, 0x00C8
 118:	95 ff       	sbrs	r25, 5
 11a:	fc cf       	rjmp	.-8      	; 0x114 <uart_putchar>
  UDR1 = c;
 11c:	80 93 ce 00 	sts	0x00CE, r24
 120:	08 95       	ret

00000122 <uart_putstring>:
    data[i] = 'a' + i; 
  }
  return data; 
}

void uart_putstring(char * s){
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24

  int i = 0; 
  while(s[i] != '\0'){
 128:	89 91       	ld	r24, Y+
 12a:	88 23       	and	r24, r24
 12c:	19 f0       	breq	.+6      	; 0x134 <uart_putstring+0x12>
    uart_putchar(s[i]);
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	f1 df       	rcall	.-30     	; 0x114 <uart_putchar>
 132:	fa cf       	rjmp	.-12     	; 0x128 <uart_putstring+0x6>
 134:	df 91       	pop	r29
    i++;
  }
}
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <transmit>:
 13a:	cf 93       	push	r28

  while (!(UCSR1A & (1 << UDRE1)));
  UDR1 = c;
}

void transmit(uint8_t * data){
 13c:	df 93       	push	r29
 13e:	ec 01       	movw	r28, r24

  SPI_masterInit();
 140:	c9 d0       	rcall	.+402    	; 0x2d4 <SPI_masterInit>
 142:	e3 d0       	rcall	.+454    	; 0x30a <initRadioTX>
  initRadioTX();
 144:	8f e7       	ldi	r24, 0x7F	; 127
 146:	9e e3       	ldi	r25, 0x3E	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <transmit+0xe>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <transmit+0x14>
 14e:	00 00       	nop
 150:	80 91 00 01 	lds	r24, 0x0100
  _delay_ms(8);
  uart_putchar(mode);
 154:	df df       	rcall	.-66     	; 0x114 <uart_putchar>
 156:	ce 01       	movw	r24, r28
 158:	d5 df       	rcall	.-86     	; 0x104 <build_packet>
 15a:	78 99       	sbic	0x0f, 0	; 15
  build_packet(data);  
 15c:	18 c0       	rjmp	.+48     	; 0x18e <transmit+0x54>
 15e:	af d1       	rcall	.+862    	; 0x4be <clearTX_DS>
 160:	8f e0       	ldi	r24, 0x0F	; 15
  if(!(PINF & (1 << 0)))
 162:	97 e2       	ldi	r25, 0x27	; 39
 164:	01 97       	sbiw	r24, 0x01	; 1
      _delay_us(15);
        CE_LOW;
    }
  }
  exit:
    clearTX_DS();
 166:	f1 f7       	brne	.-4      	; 0x164 <transmit+0x2a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <transmit+0x30>
 16a:	00 00       	nop
 16c:	b3 d0       	rcall	.+358    	; 0x2d4 <SPI_masterInit>
 16e:	d3 d0       	rcall	.+422    	; 0x316 <initRadioRX>
 170:	8f e7       	ldi	r24, 0x7F	; 127
 172:	9e e3       	ldi	r25, 0x3E	; 62
 174:	01 97       	sbiw	r24, 0x01	; 1
    _delay_ms(5);

    SPI_masterInit();
 176:	f1 f7       	brne	.-4      	; 0x174 <transmit+0x3a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <transmit+0x40>
    initRadioRX();
 17a:	00 00       	nop
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	d0 df       	rcall	.-96     	; 0x122 <uart_putstring>
 182:	82 e7       	ldi	r24, 0x72	; 114
 184:	80 93 00 01 	sts	0x0100, r24
 188:	df 91       	pop	r29
    _delay_ms(8);
    uart_putstring("switching to receive");
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret
 18e:	68 e0       	ldi	r22, 0x08	; 8
 190:	ce 01       	movw	r24, r28
    mode = 'r';
 192:	1a d1       	rcall	.+564    	; 0x3c8 <setRadioTXPayload>
 194:	89 9a       	sbi	0x11, 1	; 17
 196:	98 e2       	ldi	r25, 0x28	; 40
}
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <transmit+0x5e>
 19c:	89 98       	cbi	0x11, 1	; 17
  _delay_ms(8);
  uart_putchar(mode);
  build_packet(data);  
  if(!(PINF & (1 << 0)))
    goto exit; 
  setRadioTXPayload(data, PACKET_SIZE);
 19e:	78 9b       	sbis	0x0f, 0	; 15
 1a0:	de cf       	rjmp	.-68     	; 0x15e <transmit+0x24>
 1a2:	68 d1       	rcall	.+720    	; 0x474 <getTX_DS>
 1a4:	81 11       	cpse	r24, r1
  CE_HIGH;
 1a6:	db cf       	rjmp	.-74     	; 0x15e <transmit+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	78 9b       	sbis	0x0f, 0	; 15
 1aa:	d9 cf       	rjmp	.-78     	; 0x15e <transmit+0x24>
 1ac:	78 99       	sbic	0x0f, 0	; 15
  _delay_us(15);  // pulse CE to start transmition
  CE_LOW;
 1ae:	d7 cf       	rjmp	.-82     	; 0x15e <transmit+0x24>
  if(!(PINF & (1 << 0)))
 1b0:	8c e1       	ldi	r24, 0x1C	; 28
 1b2:	91 e0       	ldi	r25, 0x01	; 1
    goto exit; 
  while(!(getTX_DS())){
 1b4:	b6 df       	rcall	.-148    	; 0x122 <uart_putstring>
 1b6:	87 e5       	ldi	r24, 0x57	; 87
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	01 97       	sbiw	r24, 0x01	; 1
    if(!(PINF & (1 << 0)))
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <transmit+0x80>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <transmit+0x86>
      goto exit;
    if(PINF & (1 << 0))
 1c0:	00 00       	nop
 1c2:	68 d1       	rcall	.+720    	; 0x494 <getMAX_RT>
      goto exit;
    uart_putstring("waiting for ack");
 1c4:	88 23       	and	r24, r24
 1c6:	69 f3       	breq	.-38     	; 0x1a2 <transmit+0x68>
 1c8:	74 d1       	rcall	.+744    	; 0x4b2 <clearMAX_RT>
 1ca:	89 9a       	sbi	0x11, 1	; 17
 1cc:	98 e2       	ldi	r25, 0x28	; 40
 1ce:	9a 95       	dec	r25
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <transmit+0x94>
 1d2:	89 98       	cbi	0x11, 1	; 17
 1d4:	e6 cf       	rjmp	.-52     	; 0x1a2 <transmit+0x68>

000001d6 <init_ports>:
 1d6:	80 98       	cbi	0x10, 0	; 16
    _delay_us(300);  //retransmit time determined by SETUP_RETR register

    if(getMAX_RT()){
 1d8:	88 98       	cbi	0x11, 0	; 17
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	80 93 69 00 	sts	0x0069, r24

      clearMAX_RT();
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	8d bb       	out	0x1d, r24	; 29
      CE_HIGH;
 1e4:	08 95       	ret

000001e6 <main>:
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
      _delay_us(15);
        CE_LOW;
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	29 97       	sbiw	r28, 0x09	; 9
  PORTF &= ~(1 << 0);
  EICRA = (1 << ISC00) | (1 << ISC01);
  EIMSK = (1 << INT0);
}

int main(void){
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61

  uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));
 1fa:	88 e0       	ldi	r24, 0x08	; 8
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	6b d1       	rcall	.+726    	; 0x4d6 <malloc>
 200:	7c 01       	movw	r14, r24
 202:	80 e8       	ldi	r24, 0x80	; 128

  CPU_PRESCALE(0x01);  // run at 8 MHz
 204:	80 93 61 00 	sts	0x0061, r24
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 61 00 	sts	0x0061, r24
 20e:	84 9a       	sbi	0x10, 4	; 16

  INIT_CSN;
 210:	81 9a       	sbi	0x10, 1	; 16
  INIT_CE;
 212:	8c 9a       	sbi	0x11, 4	; 17
  CSN_HIGH;
 214:	67 df       	rcall	.-306    	; 0xe4 <initUART>
  initUART();
 216:	df df       	rcall	.-66     	; 0x1d6 <init_ports>
 218:	5d d0       	rcall	.+186    	; 0x2d4 <SPI_masterInit>
  init_ports();
 21a:	77 d0       	rcall	.+238    	; 0x30a <initRadioTX>
 21c:	81 e0       	ldi	r24, 0x01	; 1
  SPI_masterInit();
 21e:	81 d0       	rcall	.+258    	; 0x322 <setRadioAddressWidth>
 220:	63 e2       	ldi	r22, 0x23	; 35
  initRadioTX();
 222:	71 ec       	ldi	r23, 0xC1	; 193
 224:	8b ea       	ldi	r24, 0xAB	; 171

  setRadioAddressWidth(THREE_BYTES);
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	8e d0       	rcall	.+284    	; 0x346 <setRadioTXAddress>
 22a:	63 e2       	ldi	r22, 0x23	; 35
  setRadioTXAddress(0xABC123);        
 22c:	71 ec       	ldi	r23, 0xC1	; 193
 22e:	8b ea       	ldi	r24, 0xAB	; 171
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	a0 d0       	rcall	.+320    	; 0x374 <setRadioRXAddress>
 234:	68 e0       	ldi	r22, 0x08	; 8
 236:	81 e1       	ldi	r24, 0x11	; 17
  setRadioRXAddress(0xABC123);
 238:	b4 d0       	rcall	.+360    	; 0x3a2 <setRadioRXPayloadSize>
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	7b d0       	rcall	.+246    	; 0x334 <setRadioFrequency>
 23e:	fe 01       	movw	r30, r28
 240:	31 96       	adiw	r30, 0x01	; 1
 242:	88 e0       	ldi	r24, 0x08	; 8
  setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 244:	df 01       	movw	r26, r30
 246:	1d 92       	st	X+, r1
 248:	8a 95       	dec	r24
 24a:	e9 f7       	brne	.-6      	; 0x246 <main+0x60>
  setRadioFrequency(0b00000010);
 24c:	78 94       	sei
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	97 e2       	ldi	r25, 0x27	; 39

  uint8_t data[PACKET_SIZE] = {0};
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x6c>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x72>
 258:	00 00       	nop
 25a:	82 e7       	ldi	r24, 0x72	; 114
 25c:	d8 2e       	mov	r13, r24
 25e:	94 e7       	ldi	r25, 0x74	; 116

  sei();
 260:	c9 2e       	mov	r12, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	9f ef       	ldi	r25, 0xFF	; 255
 264:	a0 e7       	ldi	r26, 0x70	; 112
 266:	b2 e0       	ldi	r27, 0x02	; 2
 268:	91 50       	subi	r25, 0x01	; 1
 26a:	a0 40       	sbci	r26, 0x00	; 0
 26c:	b0 40       	sbci	r27, 0x00	; 0
  while(1){
    _delay_ms(100);
    if(PINF & (1 << 0)){
      mode = 't';
    } 
    else mode = 'r';
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x82>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x8c>
  sei();
  _delay_ms(5);
  while(1){
    _delay_ms(100);
    if(PINF & (1 << 0)){
      mode = 't';
 272:	00 00       	nop
 274:	78 9b       	sbis	0x0f, 0	; 15
 276:	03 c0       	rjmp	.+6      	; 0x27e <main+0x98>
 278:	c0 92 00 01 	sts	0x0100, r12
 27c:	02 c0       	rjmp	.+4      	; 0x282 <main+0x9c>
 27e:	d0 92 00 01 	sts	0x0100, r13
 282:	80 91 00 01 	lds	r24, 0x0100
 286:	82 37       	cpi	r24, 0x72	; 114

  sei();
  _delay_ms(5);
  while(1){
    _delay_ms(100);
    if(PINF & (1 << 0)){
 288:	f9 f4       	brne	.+62     	; 0x2c8 <main+0xe2>
 28a:	44 df       	rcall	.-376    	; 0x114 <uart_putchar>
      mode = 't';
 28c:	19 86       	std	Y+9, r1	; 0x09
 28e:	ce 01       	movw	r24, r28
 290:	09 96       	adiw	r24, 0x09	; 9
    } 
    else mode = 'r';
 292:	d6 d0       	rcall	.+428    	; 0x440 <getRadioStatus>
 294:	df d0       	rcall	.+446    	; 0x454 <getRX_DR>

    if (mode == 'r'){
 296:	81 11       	cpse	r24, r1
 298:	08 c0       	rjmp	.+16     	; 0x2aa <main+0xc4>
 29a:	89 9a       	sbi	0x11, 1	; 17
 29c:	8f e0       	ldi	r24, 0x0F	; 15
      uart_putchar(mode);   
 29e:	97 e2       	ldi	r25, 0x27	; 39
 2a0:	01 97       	sbiw	r24, 0x01	; 1
      uint8_t radioStatus = 0;
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0xba>
      getRadioStatus(&radioStatus);
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0xc0>
 2a6:	00 00       	nop
 2a8:	dc cf       	rjmp	.-72     	; 0x262 <main+0x7c>
 2aa:	0f d1       	rcall	.+542    	; 0x4ca <clearRX_DR>
      if(getRX_DR()){  // if RX data received
 2ac:	68 e0       	ldi	r22, 0x08	; 8
 2ae:	c7 01       	movw	r24, r14
 2b0:	aa d0       	rcall	.+340    	; 0x406 <getRadioRXPayload>
 2b2:	89 98       	cbi	0x11, 1	; 17
        CE_LOW;
        for(int i = 0; i<PACKET_SIZE; i++){
          uart_putstring(load);
        }
      }
      CE_HIGH; 
 2b4:	08 e0       	ldi	r16, 0x08	; 8
 2b6:	10 e0       	ldi	r17, 0x00	; 0
 2b8:	c7 01       	movw	r24, r14
 2ba:	33 df       	rcall	.-410    	; 0x122 <uart_putstring>
 2bc:	01 50       	subi	r16, 0x01	; 1
 2be:	11 09       	sbc	r17, r1
 2c0:	01 15       	cp	r16, r1
 2c2:	11 05       	cpc	r17, r1
      uart_putchar(mode);   
      uint8_t radioStatus = 0;
      getRadioStatus(&radioStatus);
      if(getRX_DR()){  // if RX data received

        clearRX_DR();
 2c4:	c9 f7       	brne	.-14     	; 0x2b8 <main+0xd2>
 2c6:	e9 cf       	rjmp	.-46     	; 0x29a <main+0xb4>
        getRadioRXPayload(load, PACKET_SIZE); //read payload
 2c8:	84 37       	cpi	r24, 0x74	; 116
 2ca:	59 f6       	brne	.-106    	; 0x262 <main+0x7c>
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
        CE_LOW;
 2d0:	34 df       	rcall	.-408    	; 0x13a <transmit>
 2d2:	c7 cf       	rjmp	.-114    	; 0x262 <main+0x7c>

000002d4 <SPI_masterInit>:


void SPI_masterInit()
{
	/* Set MOSI, /SS and SCK to output, all others to input */
	DDRB = ((1<<DDB0) | (1<<DDB2) | (1<<DDB1));
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI and Master mode, set clock rate to fck/4 */
	SPCR = (1<<SPE) | (1<<MSTR);
 2d8:	80 e5       	ldi	r24, 0x50	; 80
 2da:	8c bd       	out	0x2c, r24	; 44
 2dc:	08 95       	ret

000002de <SPI_masterReceive>:
}


int8_t SPI_masterReceive(void)     
{
	SPDR = 0xFF; 			// Dummy variable
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){}
 2e2:	0d b4       	in	r0, 0x2d	; 45
 2e4:	07 fe       	sbrs	r0, 7
 2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <SPI_masterReceive+0x4>
	return SPDR;
 2e8:	8e b5       	in	r24, 0x2e	; 46
}
 2ea:	08 95       	ret

000002ec <SPI_masterTransmit>:

int8_t SPI_masterTransmit(int8_t cData)
{	
	SPDR = cData;
 2ec:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){}
 2ee:	0d b4       	in	r0, 0x2d	; 45
 2f0:	07 fe       	sbrs	r0, 7
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <SPI_masterTransmit+0x2>
	return SPDR;
 2f4:	8e b5       	in	r24, 0x2e	; 46
}
 2f6:	08 95       	ret

000002f8 <openPort>:

/*************** PORT OPERATIONS ****************/

void openPort()
{
  CSN_LOW;
 2f8:	8c 98       	cbi	0x11, 4	; 17
 2fa:	08 95       	ret

000002fc <closePort>:
}

void closePort()
{ 
  CSN_HIGH;        // sets port high
 2fc:	8c 9a       	sbi	0x11, 4	; 17
  while(!(CSN_PIN_R &= (1<<CSN_PIN)))    //while port is low
 2fe:	8f b1       	in	r24, 0x0f	; 15
 300:	80 71       	andi	r24, 0x10	; 16
 302:	8f b9       	out	0x0f, r24	; 15
 304:	88 23       	and	r24, r24
 306:	d9 f3       	breq	.-10     	; 0x2fe <closePort+0x2>
    ;
}
 308:	08 95       	ret

0000030a <initRadioTX>:

/*************** Radio Functions ******************/

void initRadioTX()
{
  openPort();
 30a:	f6 df       	rcall	.-20     	; 0x2f8 <openPort>
 30c:	80 e2       	ldi	r24, 0x20	; 32
  SPI_masterTransmit(0b00100000);
 30e:	ee df       	rcall	.-36     	; 0x2ec <SPI_masterTransmit>
 310:	8a e0       	ldi	r24, 0x0A	; 10
 312:	ec df       	rcall	.-40     	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(0b00001010);  // sets TX mode on 
 314:	f3 cf       	rjmp	.-26     	; 0x2fc <closePort>

00000316 <initRadioRX>:
 316:	f0 df       	rcall	.-32     	; 0x2f8 <openPort>
 318:	80 e2       	ldi	r24, 0x20	; 32
  closePort();
 31a:	e8 df       	rcall	.-48     	; 0x2ec <SPI_masterTransmit>
 31c:	8b e0       	ldi	r24, 0x0B	; 11
}

void initRadioRX()
{
  openPort(); 
  SPI_masterTransmit(0b00100000);
 31e:	e6 df       	rcall	.-52     	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(0b00001011);  // sets RX mode on 
 320:	ed cf       	rjmp	.-38     	; 0x2fc <closePort>

00000322 <setRadioAddressWidth>:
 322:	cf 93       	push	r28
 324:	c8 2f       	mov	r28, r24
  closePort();
 326:	e8 df       	rcall	.-48     	; 0x2f8 <openPort>
 328:	83 e2       	ldi	r24, 0x23	; 35
/*************************************************************/

void setRadioAddressWidth(uint8_t width)
{
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
 32a:	e0 df       	rcall	.-64     	; 0x2ec <SPI_masterTransmit>
 32c:	8c 2f       	mov	r24, r28
 32e:	de df       	rcall	.-68     	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(width);  // sets address 
 330:	cf 91       	pop	r28
 332:	e4 cf       	rjmp	.-56     	; 0x2fc <closePort>

00000334 <setRadioFrequency>:
 334:	cf 93       	push	r28
  closePort();
}
 336:	c8 2f       	mov	r28, r24
void setRadioAddressWidth(uint8_t width)
{
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
  SPI_masterTransmit(width);  // sets address 
  closePort();
 338:	df df       	rcall	.-66     	; 0x2f8 <openPort>
 33a:	85 e2       	ldi	r24, 0x25	; 37
}

void setRadioFrequency(uint8_t frequency)
{
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
 33c:	d7 df       	rcall	.-82     	; 0x2ec <SPI_masterTransmit>
 33e:	8c 2f       	mov	r24, r28
 340:	d5 df       	rcall	.-86     	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(frequency);  // sets frequency 
 342:	cf 91       	pop	r28
 344:	db cf       	rjmp	.-74     	; 0x2fc <closePort>

00000346 <setRadioTXAddress>:
 346:	cf 93       	push	r28
  closePort(); 
}
 348:	df 93       	push	r29
void setRadioFrequency(uint8_t frequency)
{
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
  SPI_masterTransmit(frequency);  // sets frequency 
  closePort(); 
 34a:	00 d0       	rcall	.+0      	; 0x34c <setRadioTXAddress+0x6>
 34c:	cd b7       	in	r28, 0x3d	; 61
}

void setRadioTXAddress(uint32_t address)
{
 34e:	de b7       	in	r29, 0x3e	; 62
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 350:	69 83       	std	Y+1, r22	; 0x01
 352:	7a 83       	std	Y+2, r23	; 0x02
 354:	d1 df       	rcall	.-94     	; 0x2f8 <openPort>
 356:	80 e3       	ldi	r24, 0x30	; 48
  SPI_masterTransmit(0x30);  // TX_ADDR register
 358:	c9 df       	rcall	.-110    	; 0x2ec <SPI_masterTransmit>
 35a:	69 81       	ldd	r22, Y+1	; 0x01
 35c:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 35e:	c6 df       	rcall	.-116    	; 0x2ec <SPI_masterTransmit>
 360:	7a 81       	ldd	r23, Y+2	; 0x02
 362:	87 2f       	mov	r24, r23
 364:	c3 df       	rcall	.-122    	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	c1 df       	rcall	.-126    	; 0x2ec <SPI_masterTransmit>
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	c4 cf       	rjmp	.-120    	; 0x2fc <closePort>

00000374 <setRadioRXAddress>:

  closePort();
}
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	00 d0       	rcall	.+0      	; 0x37a <setRadioRXAddress+0x6>
 37a:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x30);  // TX_ADDR register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	69 83       	std	Y+1, r22	; 0x01
{
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 380:	7a 83       	std	Y+2, r23	; 0x02
 382:	ba df       	rcall	.-140    	; 0x2f8 <openPort>
 384:	8a e2       	ldi	r24, 0x2A	; 42
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
 386:	b2 df       	rcall	.-156    	; 0x2ec <SPI_masterTransmit>
 388:	69 81       	ldd	r22, Y+1	; 0x01
 38a:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 38c:	af df       	rcall	.-162    	; 0x2ec <SPI_masterTransmit>
 38e:	7a 81       	ldd	r23, Y+2	; 0x02
 390:	87 2f       	mov	r24, r23
 392:	ac df       	rcall	.-168    	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	aa df       	rcall	.-172    	; 0x2ec <SPI_masterTransmit>
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	ad cf       	rjmp	.-166    	; 0x2fc <closePort>

000003a2 <setRadioRXPayloadSize>:

  closePort();
}
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <setRadioRXPayloadSize+0x6>
 3a8:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	6a 83       	std	Y+2, r22	; 0x02
 ************************************************************/


void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size)
{
  openPort();
 3ae:	89 83       	std	Y+1, r24	; 0x01
 3b0:	a3 df       	rcall	.-186    	; 0x2f8 <openPort>
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
 3b4:	80 62       	ori	r24, 0x20	; 32
 3b6:	9a df       	rcall	.-204    	; 0x2ec <SPI_masterTransmit>
 3b8:	6a 81       	ldd	r22, Y+2	; 0x02
 3ba:	86 2f       	mov	r24, r22
  SPI_masterTransmit(size);  // size of payload for data pipe
 3bc:	97 df       	rcall	.-210    	; 0x2ec <SPI_masterTransmit>
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	df 91       	pop	r29
  closePort();
}
 3c4:	cf 91       	pop	r28
 3c6:	9a cf       	rjmp	.-204    	; 0x2fc <closePort>

000003c8 <setRadioTXPayload>:
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size)
{
  openPort();
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
  SPI_masterTransmit(size);  // size of payload for data pipe
  closePort();
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
}

void setRadioTXPayload(uint8_t* frame, int8_t payloadSize)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	8c 01       	movw	r16, r24
 3d6:	e6 2e       	mov	r14, r22
  openPort();
 3d8:	8f df       	rcall	.-226    	; 0x2f8 <openPort>
 3da:	80 ea       	ldi	r24, 0xA0	; 160
  SPI_masterTransmit(0b10100000);  // Initiate writing of payload
 3dc:	87 df       	rcall	.-242    	; 0x2ec <SPI_masterTransmit>
 3de:	e8 01       	movw	r28, r16
 3e0:	ff 24       	eor	r15, r15
  for(int i = 0; i < payloadSize; i++)
 3e2:	e7 fc       	sbrc	r14, 7
 3e4:	f0 94       	com	r15
 3e6:	ce 01       	movw	r24, r28
 3e8:	80 1b       	sub	r24, r16
 3ea:	91 0b       	sbc	r25, r17
 3ec:	8e 15       	cp	r24, r14
 3ee:	9f 05       	cpc	r25, r15
 3f0:	1c f4       	brge	.+6      	; 0x3f8 <setRadioTXPayload+0x30>
 3f2:	89 91       	ld	r24, Y+
 3f4:	7b df       	rcall	.-266    	; 0x2ec <SPI_masterTransmit>
  {
    SPI_masterTransmit(frame[i]);
 3f6:	f7 cf       	rjmp	.-18     	; 0x3e6 <setRadioTXPayload+0x1e>
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
  }
  closePort();
}
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	7b cf       	rjmp	.-266    	; 0x2fc <closePort>

00000406 <getRadioRXPayload>:
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
  SPI_masterTransmit(0b10100000);  // Initiate writing of payload
  for(int i = 0; i < payloadSize; i++)
  {
    SPI_masterTransmit(frame[i]);
  }
  closePort();
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
}


void getRadioRXPayload(uint8_t* payload, uint8_t payloadSize)
{
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	8c 01       	movw	r16, r24
 414:	e6 2e       	mov	r14, r22
  uint8_t radioStatus;
  openPort();
 416:	70 df       	rcall	.-288    	; 0x2f8 <openPort>
 418:	81 e6       	ldi	r24, 0x61	; 97
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
 41a:	68 df       	rcall	.-304    	; 0x2ec <SPI_masterTransmit>
 41c:	e8 01       	movw	r28, r16
 41e:	f1 2c       	mov	r15, r1
  for(int i = 0; i<payloadSize; i++)
 420:	ce 01       	movw	r24, r28
 422:	80 1b       	sub	r24, r16
 424:	91 0b       	sbc	r25, r17
 426:	8e 15       	cp	r24, r14
 428:	9f 05       	cpc	r25, r15
 42a:	1c f4       	brge	.+6      	; 0x432 <getRadioRXPayload+0x2c>
 42c:	58 df       	rcall	.-336    	; 0x2de <SPI_masterReceive>
 42e:	89 93       	st	Y+, r24
  {
    payload[i] = SPI_masterReceive();
 430:	f7 cf       	rjmp	.-18     	; 0x420 <getRadioRXPayload+0x1a>
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
  }
  closePort();
}
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	5e cf       	rjmp	.-324    	; 0x2fc <closePort>

00000440 <getRadioStatus>:
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
  for(int i = 0; i<payloadSize; i++)
  {
    payload[i] = SPI_masterReceive();
  }
  closePort();
 444:	ec 01       	movw	r28, r24
 446:	58 df       	rcall	.-336    	; 0x2f8 <openPort>
}


void getRadioStatus(uint8_t* status)
{
  openPort();
 448:	87 e0       	ldi	r24, 0x07	; 7
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
 44a:	50 df       	rcall	.-352    	; 0x2ec <SPI_masterTransmit>
 44c:	88 83       	st	Y, r24
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
  closePort();
}
 452:	54 cf       	rjmp	.-344    	; 0x2fc <closePort>

00000454 <getRX_DR>:
 454:	cf 93       	push	r28

void getRadioStatus(uint8_t* status)
{
  openPort();
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
  closePort();
 456:	df 93       	push	r29
 458:	1f 92       	push	r1




uint8_t getRX_DR()
{
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	ee df       	rcall	.-36     	; 0x440 <getRadioStatus>
 464:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<6))  // if RX_DR is set
 466:	86 fb       	bst	r24, 6
    return 1;
  else
    return 0;
}
 468:	88 27       	eor	r24, r24
 46a:	80 f9       	bld	r24, 0
 46c:	0f 90       	pop	r0
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <getTX_DS>:
 474:	cf 93       	push	r28

uint8_t getTX_DS()
{
 476:	df 93       	push	r29
 478:	1f 92       	push	r1
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 47e:	ce 01       	movw	r24, r28
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	de df       	rcall	.-68     	; 0x440 <getRadioStatus>
 484:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<5))  
 486:	85 fb       	bst	r24, 5
    return 1;
  else
    return 0;
}
 488:	88 27       	eor	r24, r24
 48a:	80 f9       	bld	r24, 0
 48c:	0f 90       	pop	r0
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <getMAX_RT>:
 494:	cf 93       	push	r28

uint8_t getMAX_RT()
{
 496:	df 93       	push	r29
 498:	1f 92       	push	r1
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	ce df       	rcall	.-100    	; 0x440 <getRadioStatus>
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<4))  
 4a6:	82 95       	swap	r24
    return 1;
  else
    return 0;
}
 4a8:	81 70       	andi	r24, 0x01	; 1
 4aa:	0f 90       	pop	r0
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <clearMAX_RT>:
 4b2:	22 df       	rcall	.-444    	; 0x2f8 <openPort>


void clearMAX_RT()
{   
  uint8_t status;
  openPort();
 4b4:	87 e2       	ldi	r24, 0x27	; 39
  status = SPI_masterTransmit(0x07 | 0b00100000);  
 4b6:	1a df       	rcall	.-460    	; 0x2ec <SPI_masterTransmit>
 4b8:	80 61       	ori	r24, 0x10	; 16
 4ba:	18 df       	rcall	.-464    	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<4));
 4bc:	1f cf       	rjmp	.-450    	; 0x2fc <closePort>

000004be <clearTX_DS>:
 4be:	1c df       	rcall	.-456    	; 0x2f8 <openPort>
 4c0:	87 e2       	ldi	r24, 0x27	; 39
  closePort();
 4c2:	14 df       	rcall	.-472    	; 0x2ec <SPI_masterTransmit>
 4c4:	80 62       	ori	r24, 0x20	; 32

void clearTX_DS()
{
  uint8_t status;
  openPort();
  status = SPI_masterTransmit(0x07 | 0b00100000);  
 4c6:	12 df       	rcall	.-476    	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<5));
 4c8:	19 cf       	rjmp	.-462    	; 0x2fc <closePort>

000004ca <clearRX_DR>:
 4ca:	16 df       	rcall	.-468    	; 0x2f8 <openPort>
 4cc:	87 e2       	ldi	r24, 0x27	; 39
  closePort();
 4ce:	0e df       	rcall	.-484    	; 0x2ec <SPI_masterTransmit>
 4d0:	80 64       	ori	r24, 0x40	; 64

void clearRX_DR()
{
  uint8_t status;
  openPort();
  status = SPI_masterTransmit(0x07 | 0b00100000); 
 4d2:	0c df       	rcall	.-488    	; 0x2ec <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<6));  //reset receive bit
 4d4:	13 cf       	rjmp	.-474    	; 0x2fc <closePort>

000004d6 <malloc>:
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
  closePort();
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	91 05       	cpc	r25, r1
 4de:	10 f4       	brcc	.+4      	; 0x4e4 <malloc+0xe>
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	e0 91 2e 01 	lds	r30, 0x012E
 4e8:	f0 91 2f 01 	lds	r31, 0x012F
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	a0 e0       	ldi	r26, 0x00	; 0
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	30 97       	sbiw	r30, 0x00	; 0
 4f6:	39 f1       	breq	.+78     	; 0x546 <malloc+0x70>
 4f8:	40 81       	ld	r20, Z
 4fa:	51 81       	ldd	r21, Z+1	; 0x01
 4fc:	48 17       	cp	r20, r24
 4fe:	59 07       	cpc	r21, r25
 500:	b8 f0       	brcs	.+46     	; 0x530 <malloc+0x5a>
 502:	48 17       	cp	r20, r24
 504:	59 07       	cpc	r21, r25
 506:	71 f4       	brne	.+28     	; 0x524 <malloc+0x4e>
 508:	82 81       	ldd	r24, Z+2	; 0x02
 50a:	93 81       	ldd	r25, Z+3	; 0x03
 50c:	10 97       	sbiw	r26, 0x00	; 0
 50e:	29 f0       	breq	.+10     	; 0x51a <malloc+0x44>
 510:	13 96       	adiw	r26, 0x03	; 3
 512:	9c 93       	st	X, r25
 514:	8e 93       	st	-X, r24
 516:	12 97       	sbiw	r26, 0x02	; 2
 518:	2c c0       	rjmp	.+88     	; 0x572 <malloc+0x9c>
 51a:	90 93 2f 01 	sts	0x012F, r25
 51e:	80 93 2e 01 	sts	0x012E, r24
 522:	27 c0       	rjmp	.+78     	; 0x572 <malloc+0x9c>
 524:	21 15       	cp	r18, r1
 526:	31 05       	cpc	r19, r1
 528:	31 f0       	breq	.+12     	; 0x536 <malloc+0x60>
 52a:	42 17       	cp	r20, r18
 52c:	53 07       	cpc	r21, r19
 52e:	18 f0       	brcs	.+6      	; 0x536 <malloc+0x60>
 530:	a9 01       	movw	r20, r18
 532:	db 01       	movw	r26, r22
 534:	01 c0       	rjmp	.+2      	; 0x538 <malloc+0x62>
 536:	ef 01       	movw	r28, r30
 538:	9a 01       	movw	r18, r20
 53a:	bd 01       	movw	r22, r26
 53c:	df 01       	movw	r26, r30
 53e:	02 80       	ldd	r0, Z+2	; 0x02
 540:	f3 81       	ldd	r31, Z+3	; 0x03
 542:	e0 2d       	mov	r30, r0
 544:	d7 cf       	rjmp	.-82     	; 0x4f4 <malloc+0x1e>
 546:	21 15       	cp	r18, r1
 548:	31 05       	cpc	r19, r1
 54a:	f9 f0       	breq	.+62     	; 0x58a <malloc+0xb4>
 54c:	28 1b       	sub	r18, r24
 54e:	39 0b       	sbc	r19, r25
 550:	24 30       	cpi	r18, 0x04	; 4
 552:	31 05       	cpc	r19, r1
 554:	80 f4       	brcc	.+32     	; 0x576 <malloc+0xa0>
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	9b 81       	ldd	r25, Y+3	; 0x03
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	21 f0       	breq	.+8      	; 0x568 <malloc+0x92>
 560:	fb 01       	movw	r30, r22
 562:	93 83       	std	Z+3, r25	; 0x03
 564:	82 83       	std	Z+2, r24	; 0x02
 566:	04 c0       	rjmp	.+8      	; 0x570 <malloc+0x9a>
 568:	90 93 2f 01 	sts	0x012F, r25
 56c:	80 93 2e 01 	sts	0x012E, r24
 570:	fe 01       	movw	r30, r28
 572:	32 96       	adiw	r30, 0x02	; 2
 574:	44 c0       	rjmp	.+136    	; 0x5fe <malloc+0x128>
 576:	fe 01       	movw	r30, r28
 578:	e2 0f       	add	r30, r18
 57a:	f3 1f       	adc	r31, r19
 57c:	81 93       	st	Z+, r24
 57e:	91 93       	st	Z+, r25
 580:	22 50       	subi	r18, 0x02	; 2
 582:	31 09       	sbc	r19, r1
 584:	39 83       	std	Y+1, r19	; 0x01
 586:	28 83       	st	Y, r18
 588:	3a c0       	rjmp	.+116    	; 0x5fe <malloc+0x128>
 58a:	20 91 2c 01 	lds	r18, 0x012C
 58e:	30 91 2d 01 	lds	r19, 0x012D
 592:	23 2b       	or	r18, r19
 594:	41 f4       	brne	.+16     	; 0x5a6 <malloc+0xd0>
 596:	20 91 03 01 	lds	r18, 0x0103
 59a:	30 91 04 01 	lds	r19, 0x0104
 59e:	30 93 2d 01 	sts	0x012D, r19
 5a2:	20 93 2c 01 	sts	0x012C, r18
 5a6:	20 91 01 01 	lds	r18, 0x0101
 5aa:	30 91 02 01 	lds	r19, 0x0102
 5ae:	21 15       	cp	r18, r1
 5b0:	31 05       	cpc	r19, r1
 5b2:	41 f4       	brne	.+16     	; 0x5c4 <malloc+0xee>
 5b4:	2d b7       	in	r18, 0x3d	; 61
 5b6:	3e b7       	in	r19, 0x3e	; 62
 5b8:	40 91 05 01 	lds	r20, 0x0105
 5bc:	50 91 06 01 	lds	r21, 0x0106
 5c0:	24 1b       	sub	r18, r20
 5c2:	35 0b       	sbc	r19, r21
 5c4:	e0 91 2c 01 	lds	r30, 0x012C
 5c8:	f0 91 2d 01 	lds	r31, 0x012D
 5cc:	e2 17       	cp	r30, r18
 5ce:	f3 07       	cpc	r31, r19
 5d0:	a0 f4       	brcc	.+40     	; 0x5fa <malloc+0x124>
 5d2:	2e 1b       	sub	r18, r30
 5d4:	3f 0b       	sbc	r19, r31
 5d6:	28 17       	cp	r18, r24
 5d8:	39 07       	cpc	r19, r25
 5da:	78 f0       	brcs	.+30     	; 0x5fa <malloc+0x124>
 5dc:	ac 01       	movw	r20, r24
 5de:	4e 5f       	subi	r20, 0xFE	; 254
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255
 5e2:	24 17       	cp	r18, r20
 5e4:	35 07       	cpc	r19, r21
 5e6:	48 f0       	brcs	.+18     	; 0x5fa <malloc+0x124>
 5e8:	4e 0f       	add	r20, r30
 5ea:	5f 1f       	adc	r21, r31
 5ec:	50 93 2d 01 	sts	0x012D, r21
 5f0:	40 93 2c 01 	sts	0x012C, r20
 5f4:	81 93       	st	Z+, r24
 5f6:	91 93       	st	Z+, r25
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <malloc+0x128>
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	cf 01       	movw	r24, r30
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <free>:
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	09 f4       	brne	.+2      	; 0x610 <free+0xa>
 60e:	87 c0       	rjmp	.+270    	; 0x71e <free+0x118>
 610:	fc 01       	movw	r30, r24
 612:	32 97       	sbiw	r30, 0x02	; 2
 614:	13 82       	std	Z+3, r1	; 0x03
 616:	12 82       	std	Z+2, r1	; 0x02
 618:	c0 91 2e 01 	lds	r28, 0x012E
 61c:	d0 91 2f 01 	lds	r29, 0x012F
 620:	20 97       	sbiw	r28, 0x00	; 0
 622:	81 f4       	brne	.+32     	; 0x644 <free+0x3e>
 624:	20 81       	ld	r18, Z
 626:	31 81       	ldd	r19, Z+1	; 0x01
 628:	28 0f       	add	r18, r24
 62a:	39 1f       	adc	r19, r25
 62c:	80 91 2c 01 	lds	r24, 0x012C
 630:	90 91 2d 01 	lds	r25, 0x012D
 634:	82 17       	cp	r24, r18
 636:	93 07       	cpc	r25, r19
 638:	79 f5       	brne	.+94     	; 0x698 <free+0x92>
 63a:	f0 93 2d 01 	sts	0x012D, r31
 63e:	e0 93 2c 01 	sts	0x012C, r30
 642:	6d c0       	rjmp	.+218    	; 0x71e <free+0x118>
 644:	de 01       	movw	r26, r28
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	ae 17       	cp	r26, r30
 64c:	bf 07       	cpc	r27, r31
 64e:	50 f4       	brcc	.+20     	; 0x664 <free+0x5e>
 650:	12 96       	adiw	r26, 0x02	; 2
 652:	4d 91       	ld	r20, X+
 654:	5c 91       	ld	r21, X
 656:	13 97       	sbiw	r26, 0x03	; 3
 658:	9d 01       	movw	r18, r26
 65a:	41 15       	cp	r20, r1
 65c:	51 05       	cpc	r21, r1
 65e:	09 f1       	breq	.+66     	; 0x6a2 <free+0x9c>
 660:	da 01       	movw	r26, r20
 662:	f3 cf       	rjmp	.-26     	; 0x64a <free+0x44>
 664:	b3 83       	std	Z+3, r27	; 0x03
 666:	a2 83       	std	Z+2, r26	; 0x02
 668:	40 81       	ld	r20, Z
 66a:	51 81       	ldd	r21, Z+1	; 0x01
 66c:	84 0f       	add	r24, r20
 66e:	95 1f       	adc	r25, r21
 670:	8a 17       	cp	r24, r26
 672:	9b 07       	cpc	r25, r27
 674:	71 f4       	brne	.+28     	; 0x692 <free+0x8c>
 676:	8d 91       	ld	r24, X+
 678:	9c 91       	ld	r25, X
 67a:	11 97       	sbiw	r26, 0x01	; 1
 67c:	84 0f       	add	r24, r20
 67e:	95 1f       	adc	r25, r21
 680:	02 96       	adiw	r24, 0x02	; 2
 682:	91 83       	std	Z+1, r25	; 0x01
 684:	80 83       	st	Z, r24
 686:	12 96       	adiw	r26, 0x02	; 2
 688:	8d 91       	ld	r24, X+
 68a:	9c 91       	ld	r25, X
 68c:	13 97       	sbiw	r26, 0x03	; 3
 68e:	93 83       	std	Z+3, r25	; 0x03
 690:	82 83       	std	Z+2, r24	; 0x02
 692:	21 15       	cp	r18, r1
 694:	31 05       	cpc	r19, r1
 696:	29 f4       	brne	.+10     	; 0x6a2 <free+0x9c>
 698:	f0 93 2f 01 	sts	0x012F, r31
 69c:	e0 93 2e 01 	sts	0x012E, r30
 6a0:	3e c0       	rjmp	.+124    	; 0x71e <free+0x118>
 6a2:	d9 01       	movw	r26, r18
 6a4:	13 96       	adiw	r26, 0x03	; 3
 6a6:	fc 93       	st	X, r31
 6a8:	ee 93       	st	-X, r30
 6aa:	12 97       	sbiw	r26, 0x02	; 2
 6ac:	4d 91       	ld	r20, X+
 6ae:	5d 91       	ld	r21, X+
 6b0:	a4 0f       	add	r26, r20
 6b2:	b5 1f       	adc	r27, r21
 6b4:	ea 17       	cp	r30, r26
 6b6:	fb 07       	cpc	r31, r27
 6b8:	79 f4       	brne	.+30     	; 0x6d8 <free+0xd2>
 6ba:	80 81       	ld	r24, Z
 6bc:	91 81       	ldd	r25, Z+1	; 0x01
 6be:	84 0f       	add	r24, r20
 6c0:	95 1f       	adc	r25, r21
 6c2:	02 96       	adiw	r24, 0x02	; 2
 6c4:	d9 01       	movw	r26, r18
 6c6:	11 96       	adiw	r26, 0x01	; 1
 6c8:	9c 93       	st	X, r25
 6ca:	8e 93       	st	-X, r24
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	13 96       	adiw	r26, 0x03	; 3
 6d2:	9c 93       	st	X, r25
 6d4:	8e 93       	st	-X, r24
 6d6:	12 97       	sbiw	r26, 0x02	; 2
 6d8:	e0 e0       	ldi	r30, 0x00	; 0
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	9b 81       	ldd	r25, Y+3	; 0x03
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	19 f0       	breq	.+6      	; 0x6ea <free+0xe4>
 6e4:	fe 01       	movw	r30, r28
 6e6:	ec 01       	movw	r28, r24
 6e8:	f9 cf       	rjmp	.-14     	; 0x6dc <free+0xd6>
 6ea:	ce 01       	movw	r24, r28
 6ec:	02 96       	adiw	r24, 0x02	; 2
 6ee:	28 81       	ld	r18, Y
 6f0:	39 81       	ldd	r19, Y+1	; 0x01
 6f2:	82 0f       	add	r24, r18
 6f4:	93 1f       	adc	r25, r19
 6f6:	20 91 2c 01 	lds	r18, 0x012C
 6fa:	30 91 2d 01 	lds	r19, 0x012D
 6fe:	28 17       	cp	r18, r24
 700:	39 07       	cpc	r19, r25
 702:	69 f4       	brne	.+26     	; 0x71e <free+0x118>
 704:	30 97       	sbiw	r30, 0x00	; 0
 706:	29 f4       	brne	.+10     	; 0x712 <free+0x10c>
 708:	10 92 2f 01 	sts	0x012F, r1
 70c:	10 92 2e 01 	sts	0x012E, r1
 710:	02 c0       	rjmp	.+4      	; 0x716 <free+0x110>
 712:	13 82       	std	Z+3, r1	; 0x03
 714:	12 82       	std	Z+2, r1	; 0x02
 716:	d0 93 2d 01 	sts	0x012D, r29
 71a:	c0 93 2c 01 	sts	0x012C, r28
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <_exit>:
 724:	f8 94       	cli

00000726 <__stop_program>:
 726:	ff cf       	rjmp	.-2      	; 0x726 <__stop_program>
