
uart_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000200  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b4  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a7  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000159  00000000  00000000  000007c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000162  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005b  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop
  98:	1c c0       	rjmp	.+56     	; 0xd2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1a c0       	rjmp	.+52     	; 0xd2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	18 c0       	rjmp	.+48     	; 0xd2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	16 c0       	rjmp	.+44     	; 0xd2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	14 c0       	rjmp	.+40     	; 0xd2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e6       	ldi	r30, 0x6E	; 110
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	09 d0       	rcall	.+18     	; 0xe2 <main>
  d0:	4c c0       	rjmp	.+152    	; 0x16a <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <uart_putchar>:
  UCSR1B = ((1 << RXEN1) | (1 << TXEN1));
  UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
}
static void uart_putchar(char data){

  while(!(UCSR1A & (1 << UDRE1)));
  d4:	90 91 c8 00 	lds	r25, 0x00C8
  d8:	95 ff       	sbrs	r25, 5
  da:	fc cf       	rjmp	.-8      	; 0xd4 <uart_putchar>
  UDR1 = data;
  dc:	80 93 ce 00 	sts	0x00CE, r24
  e0:	08 95       	ret

000000e2 <main>:
    else{
      hex = hex + 'A' - 10;
    }
    uart_putchar((char)hex);
}
uint8_t main(void){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	28 97       	sbiw	r28, 0x08	; 8
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
#include "uart_lib.h"
static void init_uart(void){

  UBRR1 = 8; //38.4k
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 cd 00 	sts	0x00CD, r25
  fe:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1A = (1 << U2X1);
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 93 c8 00 	sts	0x00C8, r24
  UCSR1B = ((1 << RXEN1) | (1 << TXEN1));
 108:	88 e1       	ldi	r24, 0x18	; 24
 10a:	80 93 c9 00 	sts	0x00C9, r24
  UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	80 93 ca 00 	sts	0x00CA, r24
    uart_putchar((char)hex);
}
uint8_t main(void){
  
  init_uart();
  char data[8] = {'a', 'a', 'a', 'a', 'a', 'a', 'a', '\0'};
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	e0 e0       	ldi	r30, 0x00	; 0
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	de 01       	movw	r26, r28
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	01 90       	ld	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	8a 95       	dec	r24
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x3c>
      hex = hex + '0';
    }
    else{
      hex = hex + 'A' - 10;
    }
    uart_putchar((char)hex);
 126:	86 e4       	ldi	r24, 0x46	; 70
 128:	d5 df       	rcall	.-86     	; 0xd4 <uart_putchar>
 12a:	80 e0       	ldi	r24, 0x00	; 0
  char data[8] = {'a', 'a', 'a', 'a', 'a', 'a', 'a', '\0'};
  uint8_t hex = 0x0F;
  uint8_t hex_string[3] = {0xFF, 0xAB, 0xBC};
  char ascii;
  hex_to_ascii(hex);
  uart_putchar(ascii);
 12c:	d3 df       	rcall	.-90     	; 0xd4 <uart_putchar>
 12e:	fe 01       	movw	r30, r28
 130:	31 96       	adiw	r30, 0x01	; 1
 132:	81 91       	ld	r24, Z+
 134:	88 23       	and	r24, r24
}
static void uart_putstring(char * data){
  
int i = 0;
  
  while(data[i] != '\0'){
 136:	39 f0       	breq	.+14     	; 0x146 <main+0x64>
 138:	90 91 c8 00 	lds	r25, 0x00C8
   while(!(UCSR1A & (1 << UDRE1)));
 13c:	95 ff       	sbrs	r25, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <main+0x56>
 140:	80 93 ce 00 	sts	0x00CE, r24
   UDR1 = data[i];
 144:	f6 cf       	rjmp	.-20     	; 0x132 <main+0x50>
 146:	81 e6       	ldi	r24, 0x61	; 97
 148:	c5 df       	rcall	.-118    	; 0xd4 <uart_putchar>
  uint8_t hex_string[3] = {0xFF, 0xAB, 0xBC};
  char ascii;
  hex_to_ascii(hex);
  uart_putchar(ascii);
  uart_putstring(data);
  uart_putchar('a');
 14a:	80 91 c9 00 	lds	r24, 0x00C9
 14e:	87 fd       	sbrc	r24, 7
  }
}
static void uart_flush(void){

  unsigned char temp;
  while(UCSR1B & (1 << RXC1)); //flush buffer
 150:	fc cf       	rjmp	.-8      	; 0x14a <main+0x68>
 152:	80 91 ce 00 	lds	r24, 0x00CE
 156:	80 e0       	ldi	r24, 0x00	; 0
  temp = UDR1; //turn receive back on
 158:	28 96       	adiw	r28, 0x08	; 8
 15a:	0f b6       	in	r0, 0x3f	; 63
  uart_putstring(data);
  uart_putchar('a');
  uart_flush();
   
  return 0;
}
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
