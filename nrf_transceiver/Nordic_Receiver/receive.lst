   1               		.file	"receive.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.initUART,"ax",@progbits
  11               	.global	initUART
  13               	initUART:
  14               	.LFB11:
  15               		.file 1 "receive.c"
   1:receive.c     **** #define F_CPU 8000000
   2:receive.c     **** 
   3:receive.c     **** #include <avr/io.h>
   4:receive.c     **** #include <avr/pgmspace.h>
   5:receive.c     **** #include <avr/interrupt.h>
   6:receive.c     **** #include <util/delay.h>
   7:receive.c     **** #include <avr/cpufunc.h>
   8:receive.c     **** #include "spi.h"
   9:receive.c     **** #include <stdlib.h>
  10:receive.c     **** #include "radioctl.h"
  11:receive.c     **** 
  12:receive.c     **** #define ADC_PRESCALER 0
  13:receive.c     **** #define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
  14:receive.c     **** #define PACKET_SIZE 16
  15:receive.c     **** 
  16:receive.c     **** void initUART(void){
  16               		.loc 1 16 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  17:receive.c     **** 
  18:receive.c     ****   UBRR1 = 25;  //38.4k baud
  22               		.loc 1 18 0
  23 0000 89E1      		ldi r24,lo8(25)
  24 0002 90E0      		ldi r25,0
  25 0004 9093 CD00 		sts 204+1,r25
  26 0008 8093 CC00 		sts 204,r24
  19:receive.c     ****   UCSR1A = (1<<U2X1);
  27               		.loc 1 19 0
  28 000c 82E0      		ldi r24,lo8(2)
  29 000e 8093 C800 		sts 200,r24
  20:receive.c     ****   UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  30               		.loc 1 20 0
  31 0012 88E1      		ldi r24,lo8(24)
  32 0014 8093 C900 		sts 201,r24
  21:receive.c     ****   UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  33               		.loc 1 21 0
  34 0018 86E0      		ldi r24,lo8(6)
  35 001a 8093 CA00 		sts 202,r24
  36 001e 0895      		ret
  37               		.cfi_endproc
  38               	.LFE11:
  40               		.section	.text.transmit_payload,"ax",@progbits
  41               	.global	transmit_payload
  43               	transmit_payload:
  44               	.LFB12:
  22:receive.c     **** }
  23:receive.c     **** void transmit_payload(uint8_t *data){
  45               		.loc 1 23 0
  46               		.cfi_startproc
  47               	.LVL0:
  48 0000 CF93      		push r28
  49               	.LCFI0:
  50               		.cfi_def_cfa_offset 3
  51               		.cfi_offset 28, -2
  52 0002 DF93      		push r29
  53               	.LCFI1:
  54               		.cfi_def_cfa_offset 4
  55               		.cfi_offset 29, -3
  56 0004 00D0      		rcall .
  57               	.LCFI2:
  58               		.cfi_def_cfa_offset 6
  59 0006 CDB7      		in r28,__SP_L__
  60 0008 DEB7      		in r29,__SP_H__
  61               	.LCFI3:
  62               		.cfi_def_cfa_register 28
  63               	/* prologue: function */
  64               	/* frame size = 2 */
  65               	/* stack size = 4 */
  66               	.L__stack_usage = 4
  24:receive.c     ****   
  25:receive.c     ****   CE_HIGH;
  67               		.loc 1 25 0
  68 000a 899A      		sbi 0x11,1
  26:receive.c     ****   SPI_masterInit();
  69               		.loc 1 26 0
  70 000c 8983      		std Y+1,r24
  71 000e 9A83      		std Y+2,r25
  72 0010 0E94 0000 		call SPI_masterInit
  73               	.LVL1:
  27:receive.c     ****   initRadioTX();
  74               		.loc 1 27 0
  75 0014 0E94 0000 		call initRadioTX
  76               	.LVL2:
  77               	.LBB23:
  78               	.LBB24:
  79               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  80               		.loc 2 163 0
  81 0018 AFE0      		ldi r26,lo8(9999)
  82 001a B7E2      		ldi r27,hi8(9999)
  83 001c 1197      		1: sbiw r26,1
  84 001e 01F4      		brne 1b
  85 0020 00C0      		rjmp .
  86 0022 0000      		nop
  87               	.LVL3:
  88 0024 8981      		ldd r24,Y+1
  89 0026 E82F      		mov r30,r24
  90 0028 9A81      		ldd r25,Y+2
  91 002a F92F      		mov r31,r25
  92 002c 21E0      		ldi r18,lo8(1)
  93               	.LVL4:
  94               	.L4:
  95               	.LBE24:
  96               	.LBE23:
  97               	.LBB25:
  28:receive.c     ****   _delay_ms(5);
  29:receive.c     ****   for(int i = 0; i < PACKET_SIZE; ++i){
  30:receive.c     ****     data[i] = 1 + i; 
  98               		.loc 1 30 0 discriminator 2
  99 002e 2193      		st Z+,r18
 100               	.LVL5:
 101 0030 2F5F      		subi r18,lo8(-(1))
  29:receive.c     ****   for(int i = 0; i < PACKET_SIZE; ++i){
 102               		.loc 1 29 0 discriminator 2
 103 0032 2131      		cpi r18,lo8(17)
 104 0034 01F4      		brne .L4
 105               	.LBE25:
  31:receive.c     ****   }
  32:receive.c     ****   setRadioTXPayload(data, PACKET_SIZE);
 106               		.loc 1 32 0
 107 0036 60E1      		ldi r22,lo8(16)
 108 0038 0E94 0000 		call setRadioTXPayload
 109               	.LVL6:
  33:receive.c     ****   CE_HIGH;
 110               		.loc 1 33 0
 111 003c 899A      		sbi 0x11,1
 112               	.LVL7:
 113               	.LBB26:
 114               	.LBB27:
 164:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 165:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #else
 166:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	{
 172:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		{
 176:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		}
 180:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		return;
 181:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	}
 182:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	else
 183:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 186:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** }
 187:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 188:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 189:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 191:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 193:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 196:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 198:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 202:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   
 207:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 211:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  
 214:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 222:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 223:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 224:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 226:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 234:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 237:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 240:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 241:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 242:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 244:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 245:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 115               		.loc 2 245 0
 116 003e B8E2      		ldi r27,lo8(40)
 117 0040 BA95      		1: dec r27
 118 0042 01F4      		brne 1b
 119               	.LBE27:
 120               	.LBE26:
  34:receive.c     ****   _delay_us(15);  // pulse CE to start transmition
  35:receive.c     ****   CE_LOW;
 121               		.loc 1 35 0
 122 0044 8998      		cbi 0x11,1
 123               	.L6:
  36:receive.c     ****   while(!(UCSR1A & (1 << UDRE1)));
 124               		.loc 1 36 0 discriminator 1
 125 0046 8091 C800 		lds r24,200
 126 004a 85FF      		sbrs r24,5
 127 004c 00C0      		rjmp .L6
  37:receive.c     ****   UDR1 = 's';
 128               		.loc 1 37 0
 129 004e 83E7      		ldi r24,lo8(115)
 130 0050 8093 CE00 		sts 206,r24
 131               	.L9:
  38:receive.c     ****  
  39:receive.c     ****   while(!(getTX_DS())){
 132               		.loc 1 39 0 discriminator 1
 133 0054 0E94 0000 		call getTX_DS
 134               	.LVL8:
 135 0058 8111      		cpse r24,__zero_reg__
 136 005a 00C0      		rjmp .L12
 137               	.LVL9:
 138               	.LBB28:
 139               	.LBB29:
 140               		.loc 2 245 0
 141 005c E7E5      		ldi r30,lo8(599)
 142 005e F2E0      		ldi r31,hi8(599)
 143 0060 3197      		1: sbiw r30,1
 144 0062 01F4      		brne 1b
 145 0064 00C0      		rjmp .
 146 0066 0000      		nop
 147               	.LBE29:
 148               	.LBE28:
  40:receive.c     **** 
  41:receive.c     ****     _delay_us(300);  //retransmit time determined by SETUP_RETR register
  42:receive.c     **** 
  43:receive.c     ****     if(getMAX_RT()){
 149               		.loc 1 43 0
 150 0068 0E94 0000 		call getMAX_RT
 151               	.LVL10:
 152 006c 8823      		tst r24
 153 006e 01F0      		breq .L9
  44:receive.c     **** 
  45:receive.c     ****       clearMAX_RT();
 154               		.loc 1 45 0
 155 0070 0E94 0000 		call clearMAX_RT
 156               	.LVL11:
  46:receive.c     ****       CE_HIGH;
 157               		.loc 1 46 0
 158 0074 899A      		sbi 0x11,1
 159               	.LVL12:
 160               	.LBB30:
 161               	.LBB31:
 162               		.loc 2 245 0
 163 0076 F8E2      		ldi r31,lo8(40)
 164 0078 FA95      		1: dec r31
 165 007a 01F4      		brne 1b
 166               	.LBE31:
 167               	.LBE30:
  47:receive.c     ****       _delay_us(15);
  48:receive.c     ****       CE_LOW;
 168               		.loc 1 48 0
 169 007c 8998      		cbi 0x11,1
 170 007e 00C0      		rjmp .L9
 171               	.LVL13:
 172               	.L12:
  49:receive.c     ****     }
  50:receive.c     ****   }    
  51:receive.c     ****   while(!(UCSR1A & (1 << UDRE1)));
 173               		.loc 1 51 0
 174 0080 8091 C800 		lds r24,200
 175 0084 85FF      		sbrs r24,5
 176 0086 00C0      		rjmp .L12
  52:receive.c     ****   UDR1 = 'y';
 177               		.loc 1 52 0
 178 0088 89E7      		ldi r24,lo8(121)
 179 008a 8093 CE00 		sts 206,r24
  53:receive.c     ****  
  54:receive.c     ****   clearTX_DS();
 180               		.loc 1 54 0
 181 008e 0E94 0000 		call clearTX_DS
 182               	.LVL14:
 183               	.LBB32:
 184               	.LBB33:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 185               		.loc 2 163 0
 186 0092 8FE0      		ldi r24,lo8(9999)
 187 0094 97E2      		ldi r25,hi8(9999)
 188 0096 0197      		1: sbiw r24,1
 189 0098 01F4      		brne 1b
 190 009a 00C0      		rjmp .
 191 009c 0000      		nop
 192               	/* epilogue start */
 193               	.LBE33:
 194               	.LBE32:
  55:receive.c     ****   _delay_ms(5);
  56:receive.c     **** }
 195               		.loc 1 56 0
 196 009e 0F90      		pop __tmp_reg__
 197 00a0 0F90      		pop __tmp_reg__
 198 00a2 DF91      		pop r29
 199 00a4 CF91      		pop r28
 200 00a6 0895      		ret
 201               		.cfi_endproc
 202               	.LFE12:
 204               		.section	.text.receive_payload,"ax",@progbits
 205               	.global	receive_payload
 207               	receive_payload:
 208               	.LFB13:
  57:receive.c     **** void receive_payload(uint8_t *data){
 209               		.loc 1 57 0
 210               		.cfi_startproc
 211               	.LVL15:
 212 0000 CF93      		push r28
 213               	.LCFI4:
 214               		.cfi_def_cfa_offset 3
 215               		.cfi_offset 28, -2
 216 0002 DF93      		push r29
 217               	.LCFI5:
 218               		.cfi_def_cfa_offset 4
 219               		.cfi_offset 29, -3
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 2 */
 223               	.L__stack_usage = 2
 224 0004 D82F      		mov r29,r24
 225 0006 C92F      		mov r28,r25
 226               	.LVL16:
 227               	.L16:
  58:receive.c     ****   while(!(UCSR1A & (1 << UDRE1)));
 228               		.loc 1 58 0 discriminator 1
 229 0008 8091 C800 		lds r24,200
 230 000c 85FF      		sbrs r24,5
 231 000e 00C0      		rjmp .L16
  59:receive.c     ****   UDR1 = 'd';
 232               		.loc 1 59 0
 233 0010 84E6      		ldi r24,lo8(100)
 234 0012 8093 CE00 		sts 206,r24
  60:receive.c     **** 
  61:receive.c     ****   CE_HIGH;
 235               		.loc 1 61 0
 236 0016 899A      		sbi 0x11,1
 237               	.LVL17:
 238               	.LBB34:
 239               	.LBB35:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 240               		.loc 2 163 0
 241 0018 8FE0      		ldi r24,lo8(9999)
 242 001a 97E2      		ldi r25,hi8(9999)
 243 001c 0197      		1: sbiw r24,1
 244 001e 01F4      		brne 1b
 245 0020 00C0      		rjmp .
 246 0022 0000      		nop
 247               	.LBE35:
 248               	.LBE34:
  62:receive.c     **** //  SPI_masterInit();
  63:receive.c     **** //  initRadioRX();
  64:receive.c     ****   _delay_ms(5);
  65:receive.c     ****   clearRX_DR();
 249               		.loc 1 65 0
 250 0024 0E94 0000 		call clearRX_DR
 251               	.LVL18:
  66:receive.c     ****   getRadioRXPayload(data, PACKET_SIZE); //read payload
 252               		.loc 1 66 0
 253 0028 60E1      		ldi r22,lo8(16)
 254 002a 8D2F      		mov r24,r29
 255 002c 9C2F      		mov r25,r28
 256 002e 0E94 0000 		call getRadioRXPayload
 257               	.LVL19:
  67:receive.c     ****   CE_LOW;
 258               		.loc 1 67 0
 259 0032 8998      		cbi 0x11,1
 260               	.LVL20:
 261 0034 ED2F      		mov r30,r29
 262 0036 FC2F      		mov r31,r28
 263               	.LBB36:
  68:receive.c     **** 
  69:receive.c     ****   for(int i = 0; i < PACKET_SIZE; i++){
 264               		.loc 1 69 0
 265 0038 80E0      		ldi r24,0
 266 003a 90E0      		ldi r25,0
 267               	.LVL21:
 268               	.L18:
  70:receive.c     **** 
  71:receive.c     ****     while(!(UCSR1A & (1 << UDRE1)));
 269               		.loc 1 71 0 discriminator 1
 270 003c 2091 C800 		lds r18,200
 271 0040 25FF      		sbrs r18,5
 272 0042 00C0      		rjmp .L18
  72:receive.c     ****     UDR1 = data[i];
 273               		.loc 1 72 0
 274 0044 2191      		ld r18,Z+
 275 0046 2093 CE00 		sts 206,r18
  69:receive.c     ****   for(int i = 0; i < PACKET_SIZE; i++){
 276               		.loc 1 69 0
 277 004a 0196      		adiw r24,1
 278               	.LVL22:
 279 004c 8031      		cpi r24,16
 280 004e 9105      		cpc r25,__zero_reg__
 281 0050 01F4      		brne .L18
 282               	.LBE36:
  73:receive.c     ****   }
  74:receive.c     ****   CE_HIGH; 
 283               		.loc 1 74 0
 284 0052 899A      		sbi 0x11,1
 285               	.LVL23:
 286               	.LBB37:
 287               	.LBB38:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 288               		.loc 2 163 0
 289 0054 8FE0      		ldi r24,lo8(9999)
 290 0056 97E2      		ldi r25,hi8(9999)
 291 0058 0197      		1: sbiw r24,1
 292 005a 01F4      		brne 1b
 293               	.LVL24:
 294 005c 00C0      		rjmp .
 295 005e 0000      		nop
 296               	/* epilogue start */
 297               	.LBE38:
 298               	.LBE37:
  75:receive.c     ****   _delay_ms(5);
  76:receive.c     **** }
 299               		.loc 1 76 0
 300 0060 DF91      		pop r29
 301 0062 CF91      		pop r28
 302 0064 0895      		ret
 303               		.cfi_endproc
 304               	.LFE13:
 306               		.section	.text.startup.main,"ax",@progbits
 307               	.global	main
 309               	main:
 310               	.LFB14:
  77:receive.c     **** int main(void){
 311               		.loc 1 77 0
 312               		.cfi_startproc
 313 0000 CF93      		push r28
 314               	.LCFI6:
 315               		.cfi_def_cfa_offset 3
 316               		.cfi_offset 28, -2
 317 0002 DF93      		push r29
 318               	.LCFI7:
 319               		.cfi_def_cfa_offset 4
 320               		.cfi_offset 29, -3
 321 0004 CDB7      		in r28,__SP_L__
 322 0006 DEB7      		in r29,__SP_H__
 323               	.LCFI8:
 324               		.cfi_def_cfa_register 28
 325 0008 6197      		sbiw r28,17
 326               	.LCFI9:
 327               		.cfi_def_cfa_offset 21
 328 000a 0FB6      		in __tmp_reg__,__SREG__
 329 000c F894      		cli
 330 000e DEBF      		out __SP_H__,r29
 331 0010 0FBE      		out __SREG__,__tmp_reg__
 332 0012 CDBF      		out __SP_L__,r28
 333               	/* prologue: function */
 334               	/* frame size = 17 */
 335               	/* stack size = 19 */
 336               	.L__stack_usage = 19
  78:receive.c     **** 
  79:receive.c     ****   uint8_t data[PACKET_SIZE] = {0};
 337               		.loc 1 79 0
 338 0014 FE01      		movw r30,r28
 339 0016 3196      		adiw r30,1
 340 0018 80E1      		ldi r24,lo8(16)
 341 001a DF01      		movw r26,r30
 342               		0:
 343 001c 1D92      		st X+,__zero_reg__
 344 001e 8A95      		dec r24
 345 0020 01F4      		brne 0b
  80:receive.c     ****   uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));
 346               		.loc 1 80 0
 347 0022 80E1      		ldi r24,lo8(16)
 348 0024 90E0      		ldi r25,0
 349 0026 0E94 0000 		call malloc
 350               	.LVL25:
 351 002a 8C01      		movw r16,r24
 352               	.LVL26:
  81:receive.c     **** 
  82:receive.c     ****   CPU_PRESCALE(0x01);  // run at 8 MHz
 353               		.loc 1 82 0
 354 002c 80E8      		ldi r24,lo8(-128)
 355 002e 8093 6100 		sts 97,r24
 356 0032 81E0      		ldi r24,lo8(1)
 357 0034 8093 6100 		sts 97,r24
  83:receive.c     ****   INIT_CSN;
 358               		.loc 1 83 0
 359 0038 849A      		sbi 0x10,4
  84:receive.c     ****   INIT_CE;
 360               		.loc 1 84 0
 361 003a 819A      		sbi 0x10,1
  85:receive.c     ****   CSN_HIGH;
 362               		.loc 1 85 0
 363 003c 8C9A      		sbi 0x11,4
  86:receive.c     ****   initUART();
 364               		.loc 1 86 0
 365 003e 0E94 0000 		call initUART
 366               	.LVL27:
  87:receive.c     ****   SPI_masterInit();
 367               		.loc 1 87 0
 368 0042 0E94 0000 		call SPI_masterInit
 369               	.LVL28:
  88:receive.c     ****   initRadioRX();
 370               		.loc 1 88 0
 371 0046 0E94 0000 		call initRadioRX
 372               	.LVL29:
  89:receive.c     **** 
  90:receive.c     ****   DDRB |= (0 << PB6);
 373               		.loc 1 90 0
 374 004a 84B1      		in r24,0x4
 375 004c 84B9      		out 0x4,r24
  91:receive.c     ****   setRadioAddressWidth(THREE_BYTES);
 376               		.loc 1 91 0
 377 004e 81E0      		ldi r24,lo8(1)
 378 0050 0E94 0000 		call setRadioAddressWidth
 379               	.LVL30:
  92:receive.c     ****   setRadioRXAddress(0xABC123); 
 380               		.loc 1 92 0
 381 0054 63E2      		ldi r22,lo8(35)
 382 0056 71EC      		ldi r23,lo8(-63)
 383 0058 8BEA      		ldi r24,lo8(-85)
 384 005a 90E0      		ldi r25,0
 385 005c 0E94 0000 		call setRadioRXAddress
 386               	.LVL31:
  93:receive.c     ****   setRadioTXAddress(0xABC123);  
 387               		.loc 1 93 0
 388 0060 63E2      		ldi r22,lo8(35)
 389 0062 71EC      		ldi r23,lo8(-63)
 390 0064 8BEA      		ldi r24,lo8(-85)
 391 0066 90E0      		ldi r25,0
 392 0068 0E94 0000 		call setRadioTXAddress
 393               	.LVL32:
  94:receive.c     ****   setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 394               		.loc 1 94 0
 395 006c 60E1      		ldi r22,lo8(16)
 396 006e 81E1      		ldi r24,lo8(17)
 397 0070 0E94 0000 		call setRadioRXPayloadSize
 398               	.LVL33:
  95:receive.c     ****   setRadioFrequency(0b00000010); 
 399               		.loc 1 95 0
 400 0074 82E0      		ldi r24,lo8(2)
 401 0076 0E94 0000 		call setRadioFrequency
 402               	.LVL34:
 403               	.LBB39:
 404               	.LBB40:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 405               		.loc 2 163 0
 406 007a 8FE0      		ldi r24,lo8(9999)
 407 007c 97E2      		ldi r25,hi8(9999)
 408 007e 0197      		1: sbiw r24,1
 409 0080 01F4      		brne 1b
 410 0082 00C0      		rjmp .
 411 0084 0000      		nop
 412               	.LBE40:
 413               	.LBE39:
 414               	.LBB41:
  96:receive.c     ****   _delay_ms(5);
  97:receive.c     **** 
  98:receive.c     ****   while(1){    
  99:receive.c     ****   
 100:receive.c     ****     uint8_t radioStatus = 0;
 101:receive.c     ****     getRadioStatus(&radioStatus);
 102:receive.c     ****     if(PINB & (1 << 6)){
 103:receive.c     ****       transmit_payload(data);
 104:receive.c     ****     }
 105:receive.c     ****     initRadioRX();
 106:receive.c     ****     _delay_ms(5); 
 107:receive.c     ****     if(getRX_DR()){
 108:receive.c     ****       receive_payload(load);
 109:receive.c     ****     }
 110:receive.c     ****     while(!(UCSR1A & (1 << UDRE1)));
 111:receive.c     ****     UDR1 = 'n'; 
 415               		.loc 1 111 0
 416 0086 8EE6      		ldi r24,lo8(110)
 417 0088 F82E      		mov r15,r24
 418               	.L26:
 100:receive.c     ****     uint8_t radioStatus = 0;
 419               		.loc 1 100 0
 420 008a 198A      		std Y+17,__zero_reg__
 101:receive.c     ****     getRadioStatus(&radioStatus);
 421               		.loc 1 101 0
 422 008c CE01      		movw r24,r28
 423 008e 4196      		adiw r24,17
 424 0090 0E94 0000 		call getRadioStatus
 425               	.LVL35:
 102:receive.c     ****     if(PINB & (1 << 6)){
 426               		.loc 1 102 0
 427 0094 1E9B      		sbis 0x3,6
 428 0096 00C0      		rjmp .L22
 103:receive.c     ****       transmit_payload(data);
 429               		.loc 1 103 0
 430 0098 CE01      		movw r24,r28
 431 009a 0196      		adiw r24,1
 432 009c 0E94 0000 		call transmit_payload
 433               	.LVL36:
 434               	.L22:
 105:receive.c     ****     initRadioRX();
 435               		.loc 1 105 0
 436 00a0 0E94 0000 		call initRadioRX
 437               	.LVL37:
 438               	.LBB42:
 439               	.LBB43:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 440               		.loc 2 163 0
 441 00a4 AFE0      		ldi r26,lo8(9999)
 442 00a6 B7E2      		ldi r27,hi8(9999)
 443 00a8 1197      		1: sbiw r26,1
 444 00aa 01F4      		brne 1b
 445 00ac 00C0      		rjmp .
 446 00ae 0000      		nop
 447               	.LBE43:
 448               	.LBE42:
 107:receive.c     ****     if(getRX_DR()){
 449               		.loc 1 107 0
 450 00b0 0E94 0000 		call getRX_DR
 451               	.LVL38:
 452 00b4 8823      		tst r24
 453 00b6 01F0      		breq .L25
 108:receive.c     ****       receive_payload(load);
 454               		.loc 1 108 0
 455 00b8 C801      		movw r24,r16
 456 00ba 0E94 0000 		call receive_payload
 457               	.LVL39:
 458               	.L25:
 110:receive.c     ****     while(!(UCSR1A & (1 << UDRE1)));
 459               		.loc 1 110 0 discriminator 1
 460 00be 8091 C800 		lds r24,200
 461 00c2 85FF      		sbrs r24,5
 462 00c4 00C0      		rjmp .L25
 463               		.loc 1 111 0
 464 00c6 F092 CE00 		sts 206,r15
 465               	.LBE41:
 112:receive.c     ****   }
 466               		.loc 1 112 0
 467 00ca 00C0      		rjmp .L26
 468               		.cfi_endproc
 469               	.LFE14:
 471               		.text
 472               	.Letext0:
 473               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 474               		.file 4 "/usr/local/CrossPack-AVR-20131216/lib/gcc/avr/4.8.1/include/stddef.h"
 475               		.file 5 "spi.h"
 476               		.file 6 "radioctl.h"
 477               		.file 7 "/usr/local/CrossPack-AVR-20131216/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:00000000 receive.c
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:2      *ABS*:0000003e __SP_H__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:3      *ABS*:0000003d __SP_L__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:4      *ABS*:0000003f __SREG__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:13     .text.initUART:00000000 initUART
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:43     .text.transmit_payload:00000000 transmit_payload
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:207    .text.receive_payload:00000000 receive_payload
/var/folders/1g/520f1v114mg60_f7ygfzhttw0000gn/T//ccmHqFcF.s:309    .text.startup.main:00000000 main

UNDEFINED SYMBOLS
SPI_masterInit
initRadioTX
setRadioTXPayload
getTX_DS
getMAX_RT
clearMAX_RT
clearTX_DS
clearRX_DR
getRadioRXPayload
malloc
initRadioRX
setRadioAddressWidth
setRadioRXAddress
setRadioTXAddress
setRadioRXPayloadSize
setRadioFrequency
getRadioStatus
getRX_DR
