
receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000006f0  00000784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  0000078c  2**0
                  ALLOC
  3 .stab         00000fa8  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d67  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000249b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000138  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000010c8  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a2  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000461  00000000  00000000  00003b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000354  00000000  00000000  00003fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003b9  00000000  00000000  00004304  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008d9  00000000  00000000  000046bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  00004f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 ef       	ldi	r30, 0xF0	; 240
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ac 30       	cpi	r26, 0x0C	; 12
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	80 d0       	rcall	.+256    	; 0x1e0 <main>
  e0:	05 c3       	rjmp	.+1546   	; 0x6ec <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <initUART>:

char mode = 'r';

void initUART(void){

  UBRR1 = 25;  //38.4k baud
  e4:	89 e1       	ldi	r24, 0x19	; 25
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 cd 00 	sts	0x00CD, r25
  ec:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1A = (1<<U2X1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 c8 00 	sts	0x00C8, r24
  UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c9 00 	sts	0x00C9, r24
  UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 ca 00 	sts	0x00CA, r24
 102:	08 95       	ret

00000104 <transmit_payload>:
}
void transmit_payload(uint8_t *data){
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <transmit_payload+0x6>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
  
  CE_HIGH;
 10e:	89 9a       	sbi	0x11, 1	; 17
  initRadioTX();
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	de d0       	rcall	.+444    	; 0x2d2 <initRadioTX>
 116:	af e0       	ldi	r26, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	b7 e2       	ldi	r27, 0x27	; 39
 11a:	11 97       	sbiw	r26, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <transmit_payload+0x16>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <transmit_payload+0x1c>
 120:	00 00       	nop
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	e8 2f       	mov	r30, r24
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	f9 2f       	mov	r31, r25
 12a:	21 e6       	ldi	r18, 0x61	; 97
 12c:	21 93       	st	Z+, r18
  _delay_ms(5);
  for(int i = 0; i < PACKET_SIZE; ++i){
    data[i] = 'a' + i; 
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	21 37       	cpi	r18, 0x71	; 113
void transmit_payload(uint8_t *data){
  
  CE_HIGH;
  initRadioTX();
  _delay_ms(5);
  for(int i = 0; i < PACKET_SIZE; ++i){
 132:	e1 f7       	brne	.-8      	; 0x12c <transmit_payload+0x28>
 134:	60 e1       	ldi	r22, 0x10	; 16
    data[i] = 'a' + i; 
  }
  setRadioTXPayload(data, PACKET_SIZE);
 136:	2c d1       	rcall	.+600    	; 0x390 <setRadioTXPayload>
 138:	89 9a       	sbi	0x11, 1	; 17
 13a:	b8 e2       	ldi	r27, 0x28	; 40
  CE_HIGH;
 13c:	ba 95       	dec	r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	f1 f7       	brne	.-4      	; 0x13c <transmit_payload+0x38>
 140:	89 98       	cbi	0x11, 1	; 17
 142:	7c d1       	rcall	.+760    	; 0x43c <getTX_DS>
    if(getMAX_RT()){

      clearMAX_RT();
      CE_HIGH;
      _delay_us(15);
      CE_LOW;
 144:	81 11       	cpse	r24, r1
  setRadioTXPayload(data, PACKET_SIZE);
  CE_HIGH;
  _delay_us(15);  // pulse CE to start transmition
  CE_LOW;

  while(!(getTX_DS())){
 146:	0f c0       	rjmp	.+30     	; 0x166 <transmit_payload+0x62>
 148:	e7 e5       	ldi	r30, 0x57	; 87
 14a:	f2 e0       	ldi	r31, 0x02	; 2
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <transmit_payload+0x48>
 150:	00 c0       	rjmp	.+0      	; 0x152 <transmit_payload+0x4e>
 152:	00 00       	nop
 154:	83 d1       	rcall	.+774    	; 0x45c <getMAX_RT>
 156:	88 23       	and	r24, r24
 158:	a1 f3       	breq	.-24     	; 0x142 <transmit_payload+0x3e>

    _delay_us(300);  //retransmit time determined by SETUP_RETR register

    if(getMAX_RT()){
 15a:	8f d1       	rcall	.+798    	; 0x47a <clearMAX_RT>
 15c:	89 9a       	sbi	0x11, 1	; 17
 15e:	f8 e2       	ldi	r31, 0x28	; 40
 160:	fa 95       	dec	r31

      clearMAX_RT();
 162:	f1 f7       	brne	.-4      	; 0x160 <transmit_payload+0x5c>
 164:	ed cf       	rjmp	.-38     	; 0x140 <transmit_payload+0x3c>
      CE_HIGH;
 166:	8f d1       	rcall	.+798    	; 0x486 <clearTX_DS>
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	97 e2       	ldi	r25, 0x27	; 39
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <transmit_payload+0x68>
      _delay_us(15);
      CE_LOW;
    }
  }
  clearTX_DS();
 170:	00 c0       	rjmp	.+0      	; 0x172 <transmit_payload+0x6e>
 172:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	82 e7       	ldi	r24, 0x72	; 114
 176:	80 93 00 01 	sts	0x0100, r24
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
  _delay_ms(5);
  mode = 'r';
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <receive_payload>:
 184:	cf 93       	push	r28
}
 186:	df 93       	push	r29
 188:	d8 2f       	mov	r29, r24
 18a:	c9 2f       	mov	r28, r25
 18c:	89 9a       	sbi	0x11, 1	; 17
 18e:	a7 d0       	rcall	.+334    	; 0x2de <initRadioRX>
void receive_payload(uint8_t *data){
  
  CE_HIGH;
  initRadioRX();
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	97 e2       	ldi	r25, 0x27	; 39
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <receive_payload+0x10>
 198:	00 c0       	rjmp	.+0      	; 0x19a <receive_payload+0x16>
 19a:	00 00       	nop
 19c:	7a d1       	rcall	.+756    	; 0x492 <clearRX_DR>
  _delay_ms(5);
  clearRX_DR();
 19e:	60 e1       	ldi	r22, 0x10	; 16
 1a0:	8d 2f       	mov	r24, r29
  getRadioRXPayload(data, PACKET_SIZE); //read payload
 1a2:	9c 2f       	mov	r25, r28
 1a4:	14 d1       	rcall	.+552    	; 0x3ce <getRadioRXPayload>
 1a6:	89 98       	cbi	0x11, 1	; 17
 1a8:	ed 2f       	mov	r30, r29
 1aa:	fc 2f       	mov	r31, r28
  CE_LOW;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	20 91 c8 00 	lds	r18, 0x00C8

  for(int i = 0; i < PACKET_SIZE; i++){
 1b4:	25 ff       	sbrs	r18, 5

    while(!(UCSR1A & (1 << UDRE1)));
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <receive_payload+0x2c>
 1b8:	21 91       	ld	r18, Z+
 1ba:	20 93 ce 00 	sts	0x00CE, r18
    UDR1 = data[i];
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	80 31       	cpi	r24, 0x10	; 16
 1c2:	91 05       	cpc	r25, r1
  _delay_ms(5);
  clearRX_DR();
  getRadioRXPayload(data, PACKET_SIZE); //read payload
  CE_LOW;

  for(int i = 0; i < PACKET_SIZE; i++){
 1c4:	a9 f7       	brne	.-22     	; 0x1b0 <receive_payload+0x2c>
 1c6:	89 9a       	sbi	0x11, 1	; 17
 1c8:	8f e0       	ldi	r24, 0x0F	; 15
 1ca:	97 e2       	ldi	r25, 0x27	; 39

    while(!(UCSR1A & (1 << UDRE1)));
    UDR1 = data[i];
  }
  CE_HIGH; 
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <receive_payload+0x48>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <receive_payload+0x4e>
 1d2:	00 00       	nop
 1d4:	84 e7       	ldi	r24, 0x74	; 116
 1d6:	80 93 00 01 	sts	0x0100, r24
  _delay_ms(5);
  mode = 't';
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <main>:
}
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
int main(void){
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	61 97       	sbiw	r28, 0x11	; 17
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61

  uint8_t data[PACKET_SIZE] = {0};
 1f4:	fe 01       	movw	r30, r28
 1f6:	31 96       	adiw	r30, 0x01	; 1
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	df 01       	movw	r26, r30
 1fc:	1d 92       	st	X+, r1
 1fe:	8a 95       	dec	r24
 200:	e9 f7       	brne	.-6      	; 0x1fc <main+0x1c>
  uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));
 202:	80 e1       	ldi	r24, 0x10	; 16
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	4b d1       	rcall	.+662    	; 0x49e <malloc>
 208:	8c 01       	movw	r16, r24
 20a:	80 e8       	ldi	r24, 0x80	; 128

  CPU_PRESCALE(0x01);  // run at 8 MHz
 20c:	80 93 61 00 	sts	0x0061, r24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 61 00 	sts	0x0061, r24
 216:	84 9a       	sbi	0x10, 4	; 16
  INIT_CSN;
 218:	81 9a       	sbi	0x10, 1	; 16
  INIT_CE;
 21a:	8c 9a       	sbi	0x11, 4	; 17
  CSN_HIGH;
 21c:	63 df       	rcall	.-314    	; 0xe4 <initUART>
  initUART();
 21e:	3e d0       	rcall	.+124    	; 0x29c <SPI_masterInit>
 220:	5e d0       	rcall	.+188    	; 0x2de <initRadioRX>
  SPI_masterInit();
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	62 d0       	rcall	.+196    	; 0x2ea <setRadioAddressWidth>
  initRadioRX();
 226:	63 e2       	ldi	r22, 0x23	; 35
 228:	71 ec       	ldi	r23, 0xC1	; 193

  setRadioAddressWidth(THREE_BYTES);
 22a:	8b ea       	ldi	r24, 0xAB	; 171
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	86 d0       	rcall	.+268    	; 0x33c <setRadioRXAddress>
  setRadioRXAddress(0xABC123); 
 230:	63 e2       	ldi	r22, 0x23	; 35
 232:	71 ec       	ldi	r23, 0xC1	; 193
 234:	8b ea       	ldi	r24, 0xAB	; 171
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	6a d0       	rcall	.+212    	; 0x30e <setRadioTXAddress>
 23a:	60 e1       	ldi	r22, 0x10	; 16
  setRadioTXAddress(0xABC123);  
 23c:	81 e1       	ldi	r24, 0x11	; 17
 23e:	95 d0       	rcall	.+298    	; 0x36a <setRadioRXPayloadSize>
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	5c d0       	rcall	.+184    	; 0x2fc <setRadioFrequency>
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	97 e2       	ldi	r25, 0x27	; 39
  setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x68>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x6e>
 24e:	00 00       	nop
  setRadioFrequency(0b00000010); 
 250:	82 e7       	ldi	r24, 0x72	; 114
 252:	f8 2e       	mov	r15, r24
 254:	94 e7       	ldi	r25, 0x74	; 116
 256:	e9 2e       	mov	r14, r25
 258:	19 8a       	std	Y+17, r1	; 0x11
 25a:	ce 01       	movw	r24, r28
 25c:	41 96       	adiw	r24, 0x11	; 17
 25e:	d4 d0       	rcall	.+424    	; 0x408 <getRadioStatus>
 260:	80 91 00 01 	lds	r24, 0x0100
    uint8_t radioStatus = 0;
    getRadioStatus(&radioStatus);
    while(mode == 'r'){  
      
      while(!(UCSR1A & (1 << UDRE1)));
      UDR1 = mode;
 264:	82 37       	cpi	r24, 0x72	; 114
      }
    }
    while(mode == 't'){
     
     while(!(UCSR1A & (1 << UDRE1)));
     UDR1 = mode;
 266:	a9 f4       	brne	.+42     	; 0x292 <main+0xb2>
 268:	80 91 c8 00 	lds	r24, 0x00C8
  _delay_ms(5);

  while(1){    
  
    uint8_t radioStatus = 0;
    getRadioStatus(&radioStatus);
 26c:	85 ff       	sbrs	r24, 5
 26e:	fc cf       	rjmp	.-8      	; 0x268 <main+0x88>
 270:	f0 92 ce 00 	sts	0x00CE, r15
    while(mode == 'r'){  
 274:	d3 d0       	rcall	.+422    	; 0x41c <getRX_DR>
 276:	88 23       	and	r24, r24
 278:	99 f3       	breq	.-26     	; 0x260 <main+0x80>
 27a:	c8 01       	movw	r24, r16
      
      while(!(UCSR1A & (1 << UDRE1)));
 27c:	83 df       	rcall	.-250    	; 0x184 <receive_payload>
 27e:	f0 cf       	rjmp	.-32     	; 0x260 <main+0x80>
 280:	80 91 c8 00 	lds	r24, 0x00C8
      UDR1 = mode;
 284:	85 ff       	sbrs	r24, 5
 286:	fc cf       	rjmp	.-8      	; 0x280 <main+0xa0>
      if(getRX_DR()){
 288:	e0 92 ce 00 	sts	0x00CE, r14
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
        receive_payload(load);
 290:	39 df       	rcall	.-398    	; 0x104 <transmit_payload>
 292:	80 91 00 01 	lds	r24, 0x0100
 296:	84 37       	cpi	r24, 0x74	; 116
      }
    }
    while(mode == 't'){
     
     while(!(UCSR1A & (1 << UDRE1)));
 298:	99 f3       	breq	.-26     	; 0x280 <main+0xa0>
 29a:	de cf       	rjmp	.-68     	; 0x258 <main+0x78>

0000029c <SPI_masterInit>:


void SPI_masterInit()
{
	/* Set MOSI, /SS and SCK to output, all others to input */
	DDRB = ((1<<DDB0) | (1<<DDB2) | (1<<DDB1));
 29c:	87 e0       	ldi	r24, 0x07	; 7
 29e:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI and Master mode, set clock rate to fck/4 */
	SPCR = (1<<SPE) | (1<<MSTR);
 2a0:	80 e5       	ldi	r24, 0x50	; 80
 2a2:	8c bd       	out	0x2c, r24	; 44
 2a4:	08 95       	ret

000002a6 <SPI_masterReceive>:
}


int8_t SPI_masterReceive(void)     
{
	SPDR = 0xFF; 			// Dummy variable
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){}
 2aa:	0d b4       	in	r0, 0x2d	; 45
 2ac:	07 fe       	sbrs	r0, 7
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <SPI_masterReceive+0x4>
	return SPDR;
 2b0:	8e b5       	in	r24, 0x2e	; 46
}
 2b2:	08 95       	ret

000002b4 <SPI_masterTransmit>:

int8_t SPI_masterTransmit(int8_t cData)
{	
	SPDR = cData;
 2b4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){}
 2b6:	0d b4       	in	r0, 0x2d	; 45
 2b8:	07 fe       	sbrs	r0, 7
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <SPI_masterTransmit+0x2>
	return SPDR;
 2bc:	8e b5       	in	r24, 0x2e	; 46
}
 2be:	08 95       	ret

000002c0 <openPort>:
#include "spi.h"

/*************** PORT OPERATIONS ****************/
void openPort(void){

  CSN_LOW;
 2c0:	8c 98       	cbi	0x11, 4	; 17
 2c2:	08 95       	ret

000002c4 <closePort>:
}

void closePort(void){ 
  CSN_HIGH;        // sets port high
 2c4:	8c 9a       	sbi	0x11, 4	; 17
  while(!(CSN_PIN_R &= (1<<CSN_PIN)));    //while port is low
 2c6:	8f b1       	in	r24, 0x0f	; 15
 2c8:	80 71       	andi	r24, 0x10	; 16
 2ca:	8f b9       	out	0x0f, r24	; 15
 2cc:	88 23       	and	r24, r24
 2ce:	d9 f3       	breq	.-10     	; 0x2c6 <closePort+0x2>
}
 2d0:	08 95       	ret

000002d2 <initRadioTX>:

/*************** Radio Functions ******************/
void initRadioTX(void){
  openPort();
 2d2:	f6 df       	rcall	.-20     	; 0x2c0 <openPort>
 2d4:	80 e2       	ldi	r24, 0x20	; 32
  SPI_masterTransmit(0b00100000);
 2d6:	ee df       	rcall	.-36     	; 0x2b4 <SPI_masterTransmit>
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	ec df       	rcall	.-40     	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(0b00001010);  // sets TX mode on 
 2dc:	f3 cf       	rjmp	.-26     	; 0x2c4 <closePort>

000002de <initRadioRX>:
 2de:	f0 df       	rcall	.-32     	; 0x2c0 <openPort>
 2e0:	80 e2       	ldi	r24, 0x20	; 32
  closePort();
 2e2:	e8 df       	rcall	.-48     	; 0x2b4 <SPI_masterTransmit>
 2e4:	8b e0       	ldi	r24, 0x0B	; 11
}

void initRadioRX(void){
  openPort(); 
  SPI_masterTransmit(0b00100000);
 2e6:	e6 df       	rcall	.-52     	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(0b00001011);  // sets RX mode on 
 2e8:	ed cf       	rjmp	.-38     	; 0x2c4 <closePort>

000002ea <setRadioAddressWidth>:
 2ea:	cf 93       	push	r28
 2ec:	c8 2f       	mov	r28, r24
  closePort();
 2ee:	e8 df       	rcall	.-48     	; 0x2c0 <openPort>
 2f0:	83 e2       	ldi	r24, 0x23	; 35
}

/*************************************************************/
void setRadioAddressWidth(uint8_t width){
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
 2f2:	e0 df       	rcall	.-64     	; 0x2b4 <SPI_masterTransmit>
 2f4:	8c 2f       	mov	r24, r28
 2f6:	de df       	rcall	.-68     	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(width);  // sets address 
 2f8:	cf 91       	pop	r28
 2fa:	e4 cf       	rjmp	.-56     	; 0x2c4 <closePort>

000002fc <setRadioFrequency>:
 2fc:	cf 93       	push	r28
  closePort();
}
 2fe:	c8 2f       	mov	r28, r24
/*************************************************************/
void setRadioAddressWidth(uint8_t width){
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
  SPI_masterTransmit(width);  // sets address 
  closePort();
 300:	df df       	rcall	.-66     	; 0x2c0 <openPort>
 302:	85 e2       	ldi	r24, 0x25	; 37
}

void setRadioFrequency(uint8_t frequency){
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
 304:	d7 df       	rcall	.-82     	; 0x2b4 <SPI_masterTransmit>
 306:	8c 2f       	mov	r24, r28
 308:	d5 df       	rcall	.-86     	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(frequency);  // sets frequency 
 30a:	cf 91       	pop	r28
 30c:	db cf       	rjmp	.-74     	; 0x2c4 <closePort>

0000030e <setRadioTXAddress>:
 30e:	cf 93       	push	r28
  closePort(); 
}
 310:	df 93       	push	r29

void setRadioFrequency(uint8_t frequency){
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
  SPI_masterTransmit(frequency);  // sets frequency 
  closePort(); 
 312:	00 d0       	rcall	.+0      	; 0x314 <setRadioTXAddress+0x6>
 314:	cd b7       	in	r28, 0x3d	; 61
}

void setRadioTXAddress(uint32_t address){
 316:	de b7       	in	r29, 0x3e	; 62
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 318:	69 83       	std	Y+1, r22	; 0x01
 31a:	7a 83       	std	Y+2, r23	; 0x02
 31c:	d1 df       	rcall	.-94     	; 0x2c0 <openPort>
 31e:	80 e3       	ldi	r24, 0x30	; 48
  SPI_masterTransmit(0x30);  // TX_ADDR register
 320:	c9 df       	rcall	.-110    	; 0x2b4 <SPI_masterTransmit>
 322:	69 81       	ldd	r22, Y+1	; 0x01
 324:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 326:	c6 df       	rcall	.-116    	; 0x2b4 <SPI_masterTransmit>
 328:	7a 81       	ldd	r23, Y+2	; 0x02
 32a:	87 2f       	mov	r24, r23
 32c:	c3 df       	rcall	.-122    	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	c1 df       	rcall	.-126    	; 0x2b4 <SPI_masterTransmit>
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	c4 cf       	rjmp	.-120    	; 0x2c4 <closePort>

0000033c <setRadioRXAddress>:

  closePort();
}
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	00 d0       	rcall	.+0      	; 0x342 <setRadioRXAddress+0x6>
 342:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x30);  // TX_ADDR register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 344:	de b7       	in	r29, 0x3e	; 62
 346:	69 83       	std	Y+1, r22	; 0x01
void setRadioRXAddress(int32_t address){
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 348:	7a 83       	std	Y+2, r23	; 0x02
 34a:	ba df       	rcall	.-140    	; 0x2c0 <openPort>
 34c:	8a e2       	ldi	r24, 0x2A	; 42
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
 34e:	b2 df       	rcall	.-156    	; 0x2b4 <SPI_masterTransmit>
 350:	69 81       	ldd	r22, Y+1	; 0x01
 352:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 354:	af df       	rcall	.-162    	; 0x2b4 <SPI_masterTransmit>
 356:	7a 81       	ldd	r23, Y+2	; 0x02
 358:	87 2f       	mov	r24, r23
 35a:	ac df       	rcall	.-168    	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	aa df       	rcall	.-172    	; 0x2b4 <SPI_masterTransmit>
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	ad cf       	rjmp	.-166    	; 0x2c4 <closePort>

0000036a <setRadioRXPayloadSize>:

  closePort();
}
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	00 d0       	rcall	.+0      	; 0x370 <setRadioRXPayloadSize+0x6>
 370:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 372:	de b7       	in	r29, 0x3e	; 62
 374:	6a 83       	std	Y+2, r22	; 0x02
  size is the number of bytes in PL from 1-32
 ************************************************************/


void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size){
  openPort();
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	a3 df       	rcall	.-186    	; 0x2c0 <openPort>
 37a:	89 81       	ldd	r24, Y+1	; 0x01
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
 37c:	80 62       	ori	r24, 0x20	; 32
 37e:	9a df       	rcall	.-204    	; 0x2b4 <SPI_masterTransmit>
 380:	6a 81       	ldd	r22, Y+2	; 0x02
 382:	86 2f       	mov	r24, r22
  SPI_masterTransmit(size);  // size of payload for data pipe
 384:	97 df       	rcall	.-210    	; 0x2b4 <SPI_masterTransmit>
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	df 91       	pop	r29
  closePort();
}
 38c:	cf 91       	pop	r28
 38e:	9a cf       	rjmp	.-204    	; 0x2c4 <closePort>

00000390 <setRadioTXPayload>:
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15

void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size){
  openPort();
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
  SPI_masterTransmit(size);  // size of payload for data pipe
  closePort();
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
}

void setRadioTXPayload(uint8_t* frame, int8_t payloadSize){
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	8c 01       	movw	r16, r24
 39e:	e6 2e       	mov	r14, r22
  openPort();
 3a0:	8f df       	rcall	.-226    	; 0x2c0 <openPort>
 3a2:	80 ea       	ldi	r24, 0xA0	; 160
  SPI_masterTransmit(0b10100000);  // Initiate writing of payload
 3a4:	87 df       	rcall	.-242    	; 0x2b4 <SPI_masterTransmit>
 3a6:	e8 01       	movw	r28, r16
 3a8:	ff 24       	eor	r15, r15
  for(int i = 0; i < payloadSize; i++)
 3aa:	e7 fc       	sbrc	r14, 7
 3ac:	f0 94       	com	r15
 3ae:	ce 01       	movw	r24, r28
 3b0:	80 1b       	sub	r24, r16
 3b2:	91 0b       	sbc	r25, r17
 3b4:	8e 15       	cp	r24, r14
 3b6:	9f 05       	cpc	r25, r15
 3b8:	1c f4       	brge	.+6      	; 0x3c0 <setRadioTXPayload+0x30>
 3ba:	89 91       	ld	r24, Y+
 3bc:	7b df       	rcall	.-266    	; 0x2b4 <SPI_masterTransmit>
  {
    SPI_masterTransmit(frame[i]);
 3be:	f7 cf       	rjmp	.-18     	; 0x3ae <setRadioTXPayload+0x1e>
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
  }
  closePort();
}
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	7b cf       	rjmp	.-266    	; 0x2c4 <closePort>

000003ce <getRadioRXPayload>:
 3ce:	ef 92       	push	r14
 3d0:	ff 92       	push	r15
  SPI_masterTransmit(0b10100000);  // Initiate writing of payload
  for(int i = 0; i < payloadSize; i++)
  {
    SPI_masterTransmit(frame[i]);
  }
  closePort();
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
}


void getRadioRXPayload(uint8_t* payload, uint8_t payloadSize){
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	8c 01       	movw	r16, r24
 3dc:	e6 2e       	mov	r14, r22
  uint8_t radioStatus;
  openPort();
 3de:	70 df       	rcall	.-288    	; 0x2c0 <openPort>
 3e0:	81 e6       	ldi	r24, 0x61	; 97
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
 3e2:	68 df       	rcall	.-304    	; 0x2b4 <SPI_masterTransmit>
 3e4:	e8 01       	movw	r28, r16
 3e6:	f1 2c       	mov	r15, r1
  for(int i = 0; i<payloadSize; i++)
 3e8:	ce 01       	movw	r24, r28
 3ea:	80 1b       	sub	r24, r16
 3ec:	91 0b       	sbc	r25, r17
 3ee:	8e 15       	cp	r24, r14
 3f0:	9f 05       	cpc	r25, r15
 3f2:	1c f4       	brge	.+6      	; 0x3fa <getRadioRXPayload+0x2c>
 3f4:	58 df       	rcall	.-336    	; 0x2a6 <SPI_masterReceive>
 3f6:	89 93       	st	Y+, r24
  {
    payload[i] = SPI_masterReceive();
 3f8:	f7 cf       	rjmp	.-18     	; 0x3e8 <getRadioRXPayload+0x1a>
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
  }
  closePort();
}
 400:	0f 91       	pop	r16
 402:	ff 90       	pop	r15
 404:	ef 90       	pop	r14
 406:	5e cf       	rjmp	.-324    	; 0x2c4 <closePort>

00000408 <getRadioStatus>:
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
  for(int i = 0; i<payloadSize; i++)
  {
    payload[i] = SPI_masterReceive();
  }
  closePort();
 40c:	ec 01       	movw	r28, r24
 40e:	58 df       	rcall	.-336    	; 0x2c0 <openPort>
}


void getRadioStatus(uint8_t* status){
  openPort();
 410:	87 e0       	ldi	r24, 0x07	; 7
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
 412:	50 df       	rcall	.-352    	; 0x2b4 <SPI_masterTransmit>
 414:	88 83       	st	Y, r24
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
  closePort();
}
 41a:	54 cf       	rjmp	.-344    	; 0x2c4 <closePort>

0000041c <getRX_DR>:
 41c:	cf 93       	push	r28


void getRadioStatus(uint8_t* status){
  openPort();
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
  closePort();
 41e:	df 93       	push	r29
 420:	1f 92       	push	r1
/**************************************************
  Boolean valued functions. return 1 if bit
  is set, else returns 0 
 ***************************************************/

uint8_t getRX_DR(void){
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	ee df       	rcall	.-36     	; 0x408 <getRadioStatus>
 42c:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<6))  // if RX_DR is set
 42e:	86 fb       	bst	r24, 6
    return 1;
  else
    return 0;
}
 430:	88 27       	eor	r24, r24
 432:	80 f9       	bld	r24, 0
 434:	0f 90       	pop	r0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <getTX_DS>:
 43c:	cf 93       	push	r28

uint8_t getTX_DS(void){
 43e:	df 93       	push	r29
 440:	1f 92       	push	r1
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	de df       	rcall	.-68     	; 0x408 <getRadioStatus>
 44c:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<5))  
 44e:	85 fb       	bst	r24, 5
    return 1;
  else
    return 0;
}
 450:	88 27       	eor	r24, r24
 452:	80 f9       	bld	r24, 0
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <getMAX_RT>:
 45c:	cf 93       	push	r28

uint8_t getMAX_RT(void){
 45e:	df 93       	push	r29
 460:	1f 92       	push	r1
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 466:	ce 01       	movw	r24, r28
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	ce df       	rcall	.-100    	; 0x408 <getRadioStatus>
 46c:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<4))  
 46e:	82 95       	swap	r24
    return 1;
  else
    return 0;
}
 470:	81 70       	andi	r24, 0x01	; 1
 472:	0f 90       	pop	r0
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <clearMAX_RT>:
 47a:	22 df       	rcall	.-444    	; 0x2c0 <openPort>
}

/*********** Clear Status Bits **************/
void clearMAX_RT(void){   
  uint8_t status;
  openPort();
 47c:	87 e2       	ldi	r24, 0x27	; 39
  status = SPI_masterTransmit(0x07 | 0b00100000);  
 47e:	1a df       	rcall	.-460    	; 0x2b4 <SPI_masterTransmit>
 480:	80 61       	ori	r24, 0x10	; 16
 482:	18 df       	rcall	.-464    	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<4));
 484:	1f cf       	rjmp	.-450    	; 0x2c4 <closePort>

00000486 <clearTX_DS>:
 486:	1c df       	rcall	.-456    	; 0x2c0 <openPort>
 488:	87 e2       	ldi	r24, 0x27	; 39
  closePort();
 48a:	14 df       	rcall	.-472    	; 0x2b4 <SPI_masterTransmit>
 48c:	80 62       	ori	r24, 0x20	; 32
}

void clearTX_DS(void){
  uint8_t status;
  openPort();
  status = SPI_masterTransmit(0x07 | 0b00100000);  
 48e:	12 df       	rcall	.-476    	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<5));
 490:	19 cf       	rjmp	.-462    	; 0x2c4 <closePort>

00000492 <clearRX_DR>:
 492:	16 df       	rcall	.-468    	; 0x2c0 <openPort>
 494:	87 e2       	ldi	r24, 0x27	; 39
  closePort();
 496:	0e df       	rcall	.-484    	; 0x2b4 <SPI_masterTransmit>
 498:	80 64       	ori	r24, 0x40	; 64
}

void clearRX_DR(void){
  uint8_t status;
  openPort();
  status = SPI_masterTransmit(0x07 | 0b00100000); 
 49a:	0c df       	rcall	.-488    	; 0x2b4 <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<6));  //reset receive bit
 49c:	13 cf       	rjmp	.-474    	; 0x2c4 <closePort>

0000049e <malloc>:
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
  closePort();
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	91 05       	cpc	r25, r1
 4a6:	10 f4       	brcc	.+4      	; 0x4ac <malloc+0xe>
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	e0 91 0a 01 	lds	r30, 0x010A
 4b0:	f0 91 0b 01 	lds	r31, 0x010B
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	a0 e0       	ldi	r26, 0x00	; 0
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	30 97       	sbiw	r30, 0x00	; 0
 4be:	39 f1       	breq	.+78     	; 0x50e <malloc+0x70>
 4c0:	40 81       	ld	r20, Z
 4c2:	51 81       	ldd	r21, Z+1	; 0x01
 4c4:	48 17       	cp	r20, r24
 4c6:	59 07       	cpc	r21, r25
 4c8:	b8 f0       	brcs	.+46     	; 0x4f8 <malloc+0x5a>
 4ca:	48 17       	cp	r20, r24
 4cc:	59 07       	cpc	r21, r25
 4ce:	71 f4       	brne	.+28     	; 0x4ec <malloc+0x4e>
 4d0:	82 81       	ldd	r24, Z+2	; 0x02
 4d2:	93 81       	ldd	r25, Z+3	; 0x03
 4d4:	10 97       	sbiw	r26, 0x00	; 0
 4d6:	29 f0       	breq	.+10     	; 0x4e2 <malloc+0x44>
 4d8:	13 96       	adiw	r26, 0x03	; 3
 4da:	9c 93       	st	X, r25
 4dc:	8e 93       	st	-X, r24
 4de:	12 97       	sbiw	r26, 0x02	; 2
 4e0:	2c c0       	rjmp	.+88     	; 0x53a <malloc+0x9c>
 4e2:	90 93 0b 01 	sts	0x010B, r25
 4e6:	80 93 0a 01 	sts	0x010A, r24
 4ea:	27 c0       	rjmp	.+78     	; 0x53a <malloc+0x9c>
 4ec:	21 15       	cp	r18, r1
 4ee:	31 05       	cpc	r19, r1
 4f0:	31 f0       	breq	.+12     	; 0x4fe <malloc+0x60>
 4f2:	42 17       	cp	r20, r18
 4f4:	53 07       	cpc	r21, r19
 4f6:	18 f0       	brcs	.+6      	; 0x4fe <malloc+0x60>
 4f8:	a9 01       	movw	r20, r18
 4fa:	db 01       	movw	r26, r22
 4fc:	01 c0       	rjmp	.+2      	; 0x500 <malloc+0x62>
 4fe:	ef 01       	movw	r28, r30
 500:	9a 01       	movw	r18, r20
 502:	bd 01       	movw	r22, r26
 504:	df 01       	movw	r26, r30
 506:	02 80       	ldd	r0, Z+2	; 0x02
 508:	f3 81       	ldd	r31, Z+3	; 0x03
 50a:	e0 2d       	mov	r30, r0
 50c:	d7 cf       	rjmp	.-82     	; 0x4bc <malloc+0x1e>
 50e:	21 15       	cp	r18, r1
 510:	31 05       	cpc	r19, r1
 512:	f9 f0       	breq	.+62     	; 0x552 <malloc+0xb4>
 514:	28 1b       	sub	r18, r24
 516:	39 0b       	sbc	r19, r25
 518:	24 30       	cpi	r18, 0x04	; 4
 51a:	31 05       	cpc	r19, r1
 51c:	80 f4       	brcc	.+32     	; 0x53e <malloc+0xa0>
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	9b 81       	ldd	r25, Y+3	; 0x03
 522:	61 15       	cp	r22, r1
 524:	71 05       	cpc	r23, r1
 526:	21 f0       	breq	.+8      	; 0x530 <malloc+0x92>
 528:	fb 01       	movw	r30, r22
 52a:	93 83       	std	Z+3, r25	; 0x03
 52c:	82 83       	std	Z+2, r24	; 0x02
 52e:	04 c0       	rjmp	.+8      	; 0x538 <malloc+0x9a>
 530:	90 93 0b 01 	sts	0x010B, r25
 534:	80 93 0a 01 	sts	0x010A, r24
 538:	fe 01       	movw	r30, r28
 53a:	32 96       	adiw	r30, 0x02	; 2
 53c:	44 c0       	rjmp	.+136    	; 0x5c6 <malloc+0x128>
 53e:	fe 01       	movw	r30, r28
 540:	e2 0f       	add	r30, r18
 542:	f3 1f       	adc	r31, r19
 544:	81 93       	st	Z+, r24
 546:	91 93       	st	Z+, r25
 548:	22 50       	subi	r18, 0x02	; 2
 54a:	31 09       	sbc	r19, r1
 54c:	39 83       	std	Y+1, r19	; 0x01
 54e:	28 83       	st	Y, r18
 550:	3a c0       	rjmp	.+116    	; 0x5c6 <malloc+0x128>
 552:	20 91 08 01 	lds	r18, 0x0108
 556:	30 91 09 01 	lds	r19, 0x0109
 55a:	23 2b       	or	r18, r19
 55c:	41 f4       	brne	.+16     	; 0x56e <malloc+0xd0>
 55e:	20 91 03 01 	lds	r18, 0x0103
 562:	30 91 04 01 	lds	r19, 0x0104
 566:	30 93 09 01 	sts	0x0109, r19
 56a:	20 93 08 01 	sts	0x0108, r18
 56e:	20 91 01 01 	lds	r18, 0x0101
 572:	30 91 02 01 	lds	r19, 0x0102
 576:	21 15       	cp	r18, r1
 578:	31 05       	cpc	r19, r1
 57a:	41 f4       	brne	.+16     	; 0x58c <malloc+0xee>
 57c:	2d b7       	in	r18, 0x3d	; 61
 57e:	3e b7       	in	r19, 0x3e	; 62
 580:	40 91 05 01 	lds	r20, 0x0105
 584:	50 91 06 01 	lds	r21, 0x0106
 588:	24 1b       	sub	r18, r20
 58a:	35 0b       	sbc	r19, r21
 58c:	e0 91 08 01 	lds	r30, 0x0108
 590:	f0 91 09 01 	lds	r31, 0x0109
 594:	e2 17       	cp	r30, r18
 596:	f3 07       	cpc	r31, r19
 598:	a0 f4       	brcc	.+40     	; 0x5c2 <malloc+0x124>
 59a:	2e 1b       	sub	r18, r30
 59c:	3f 0b       	sbc	r19, r31
 59e:	28 17       	cp	r18, r24
 5a0:	39 07       	cpc	r19, r25
 5a2:	78 f0       	brcs	.+30     	; 0x5c2 <malloc+0x124>
 5a4:	ac 01       	movw	r20, r24
 5a6:	4e 5f       	subi	r20, 0xFE	; 254
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	24 17       	cp	r18, r20
 5ac:	35 07       	cpc	r19, r21
 5ae:	48 f0       	brcs	.+18     	; 0x5c2 <malloc+0x124>
 5b0:	4e 0f       	add	r20, r30
 5b2:	5f 1f       	adc	r21, r31
 5b4:	50 93 09 01 	sts	0x0109, r21
 5b8:	40 93 08 01 	sts	0x0108, r20
 5bc:	81 93       	st	Z+, r24
 5be:	91 93       	st	Z+, r25
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <malloc+0x128>
 5c2:	e0 e0       	ldi	r30, 0x00	; 0
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	cf 01       	movw	r24, r30
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <free>:
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	00 97       	sbiw	r24, 0x00	; 0
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <free+0xa>
 5d6:	87 c0       	rjmp	.+270    	; 0x6e6 <free+0x118>
 5d8:	fc 01       	movw	r30, r24
 5da:	32 97       	sbiw	r30, 0x02	; 2
 5dc:	13 82       	std	Z+3, r1	; 0x03
 5de:	12 82       	std	Z+2, r1	; 0x02
 5e0:	c0 91 0a 01 	lds	r28, 0x010A
 5e4:	d0 91 0b 01 	lds	r29, 0x010B
 5e8:	20 97       	sbiw	r28, 0x00	; 0
 5ea:	81 f4       	brne	.+32     	; 0x60c <free+0x3e>
 5ec:	20 81       	ld	r18, Z
 5ee:	31 81       	ldd	r19, Z+1	; 0x01
 5f0:	28 0f       	add	r18, r24
 5f2:	39 1f       	adc	r19, r25
 5f4:	80 91 08 01 	lds	r24, 0x0108
 5f8:	90 91 09 01 	lds	r25, 0x0109
 5fc:	82 17       	cp	r24, r18
 5fe:	93 07       	cpc	r25, r19
 600:	79 f5       	brne	.+94     	; 0x660 <free+0x92>
 602:	f0 93 09 01 	sts	0x0109, r31
 606:	e0 93 08 01 	sts	0x0108, r30
 60a:	6d c0       	rjmp	.+218    	; 0x6e6 <free+0x118>
 60c:	de 01       	movw	r26, r28
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	ae 17       	cp	r26, r30
 614:	bf 07       	cpc	r27, r31
 616:	50 f4       	brcc	.+20     	; 0x62c <free+0x5e>
 618:	12 96       	adiw	r26, 0x02	; 2
 61a:	4d 91       	ld	r20, X+
 61c:	5c 91       	ld	r21, X
 61e:	13 97       	sbiw	r26, 0x03	; 3
 620:	9d 01       	movw	r18, r26
 622:	41 15       	cp	r20, r1
 624:	51 05       	cpc	r21, r1
 626:	09 f1       	breq	.+66     	; 0x66a <free+0x9c>
 628:	da 01       	movw	r26, r20
 62a:	f3 cf       	rjmp	.-26     	; 0x612 <free+0x44>
 62c:	b3 83       	std	Z+3, r27	; 0x03
 62e:	a2 83       	std	Z+2, r26	; 0x02
 630:	40 81       	ld	r20, Z
 632:	51 81       	ldd	r21, Z+1	; 0x01
 634:	84 0f       	add	r24, r20
 636:	95 1f       	adc	r25, r21
 638:	8a 17       	cp	r24, r26
 63a:	9b 07       	cpc	r25, r27
 63c:	71 f4       	brne	.+28     	; 0x65a <free+0x8c>
 63e:	8d 91       	ld	r24, X+
 640:	9c 91       	ld	r25, X
 642:	11 97       	sbiw	r26, 0x01	; 1
 644:	84 0f       	add	r24, r20
 646:	95 1f       	adc	r25, r21
 648:	02 96       	adiw	r24, 0x02	; 2
 64a:	91 83       	std	Z+1, r25	; 0x01
 64c:	80 83       	st	Z, r24
 64e:	12 96       	adiw	r26, 0x02	; 2
 650:	8d 91       	ld	r24, X+
 652:	9c 91       	ld	r25, X
 654:	13 97       	sbiw	r26, 0x03	; 3
 656:	93 83       	std	Z+3, r25	; 0x03
 658:	82 83       	std	Z+2, r24	; 0x02
 65a:	21 15       	cp	r18, r1
 65c:	31 05       	cpc	r19, r1
 65e:	29 f4       	brne	.+10     	; 0x66a <free+0x9c>
 660:	f0 93 0b 01 	sts	0x010B, r31
 664:	e0 93 0a 01 	sts	0x010A, r30
 668:	3e c0       	rjmp	.+124    	; 0x6e6 <free+0x118>
 66a:	d9 01       	movw	r26, r18
 66c:	13 96       	adiw	r26, 0x03	; 3
 66e:	fc 93       	st	X, r31
 670:	ee 93       	st	-X, r30
 672:	12 97       	sbiw	r26, 0x02	; 2
 674:	4d 91       	ld	r20, X+
 676:	5d 91       	ld	r21, X+
 678:	a4 0f       	add	r26, r20
 67a:	b5 1f       	adc	r27, r21
 67c:	ea 17       	cp	r30, r26
 67e:	fb 07       	cpc	r31, r27
 680:	79 f4       	brne	.+30     	; 0x6a0 <free+0xd2>
 682:	80 81       	ld	r24, Z
 684:	91 81       	ldd	r25, Z+1	; 0x01
 686:	84 0f       	add	r24, r20
 688:	95 1f       	adc	r25, r21
 68a:	02 96       	adiw	r24, 0x02	; 2
 68c:	d9 01       	movw	r26, r18
 68e:	11 96       	adiw	r26, 0x01	; 1
 690:	9c 93       	st	X, r25
 692:	8e 93       	st	-X, r24
 694:	82 81       	ldd	r24, Z+2	; 0x02
 696:	93 81       	ldd	r25, Z+3	; 0x03
 698:	13 96       	adiw	r26, 0x03	; 3
 69a:	9c 93       	st	X, r25
 69c:	8e 93       	st	-X, r24
 69e:	12 97       	sbiw	r26, 0x02	; 2
 6a0:	e0 e0       	ldi	r30, 0x00	; 0
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	9b 81       	ldd	r25, Y+3	; 0x03
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	19 f0       	breq	.+6      	; 0x6b2 <free+0xe4>
 6ac:	fe 01       	movw	r30, r28
 6ae:	ec 01       	movw	r28, r24
 6b0:	f9 cf       	rjmp	.-14     	; 0x6a4 <free+0xd6>
 6b2:	ce 01       	movw	r24, r28
 6b4:	02 96       	adiw	r24, 0x02	; 2
 6b6:	28 81       	ld	r18, Y
 6b8:	39 81       	ldd	r19, Y+1	; 0x01
 6ba:	82 0f       	add	r24, r18
 6bc:	93 1f       	adc	r25, r19
 6be:	20 91 08 01 	lds	r18, 0x0108
 6c2:	30 91 09 01 	lds	r19, 0x0109
 6c6:	28 17       	cp	r18, r24
 6c8:	39 07       	cpc	r19, r25
 6ca:	69 f4       	brne	.+26     	; 0x6e6 <free+0x118>
 6cc:	30 97       	sbiw	r30, 0x00	; 0
 6ce:	29 f4       	brne	.+10     	; 0x6da <free+0x10c>
 6d0:	10 92 0b 01 	sts	0x010B, r1
 6d4:	10 92 0a 01 	sts	0x010A, r1
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <free+0x110>
 6da:	13 82       	std	Z+3, r1	; 0x03
 6dc:	12 82       	std	Z+2, r1	; 0x02
 6de:	d0 93 09 01 	sts	0x0109, r29
 6e2:	c0 93 08 01 	sts	0x0108, r28
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <_exit>:
 6ec:	f8 94       	cli

000006ee <__stop_program>:
 6ee:	ff cf       	rjmp	.-2      	; 0x6ee <__stop_program>
