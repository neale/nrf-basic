
com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000774  2**0
                  ALLOC
  3 .stab         00000fa8  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d67  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002483  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011ed  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000575  00000000  00000000  000037f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000539  00000000  00000000  00003d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003b8  00000000  00000000  000042a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000419  00000000  00000000  00004660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000952  00000000  00000000  00004a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  000053cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{

  uint8_t data1 = 0; 


  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); //Send Start condition
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))    //breaks when TWINT == 1
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
    ;			//Wait for transmission to complete

  if ((TWSR & 0xF8) != START)
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
    ERROR2();               //If START condition not received, error


  TWDR = 0xD4;
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  TWCR = (1<<TWINT) | (1<<TWEN);  //Load SLA+W then initiate transfer
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
    ;			//Wait for transmission to complete


  if ((TWSR & 0xF8) != 0x18)
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
    ERROR2();		//ERROR if SLA+W not sent and acknowledged


  TWDR = data2;
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  TWCR = (1<<TWINT) | (1<<TWEN);  //Load data, start transmission
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop

  while (!(TWCR & (1<<TWINT)))
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
    ;			//Wait for transmission to complete

  if((TWSR & 0xF8) != 0x28)	
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop





  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    //repeat start condition
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))    //breaks when TWINT == 1
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
    ;			//Wait for transmission to complete

  if((TWSR & 0xF8) != 0x10)  //Error for repeat start condition
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
    ERROR2();


  TWDR = 0xD5;   //SLA+R
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop

  TWCR = (1<<TWINT) | (1<<TWEN);  //load data
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>


  while (!(TWCR & (1<<TWINT)))
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
    ;			//Wait for transmission to complete


  if((TWSR & 0xF8) != 0x40)  // checks if SLA+R and ACK has been sent
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
    ERROR2();



  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  //ready to receive,  ACK
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop

  while (!(TWCR & (1<<TWINT)))  // wait for reception
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
    ;

  data1 = TWDR;
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop

  TWCR = (1<<TWINT) | (1<<TWEN);   //send no ACK
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))  // wait for reception
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
    ;

  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); //send stop condition
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop

  return data1; 

}
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 ed       	ldi	r30, 0xD8	; 216
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ac 30       	cpi	r26, 0x0C	; 12
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	7d d0       	rcall	.+250    	; 0x1da <main>
  e0:	f9 c2       	rjmp	.+1522   	; 0x6d4 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <initUART>:

char mode = 't';

void initUART(void){

  UBRR1 = 25;  //38.4k baud
  e4:	89 e1       	ldi	r24, 0x19	; 25
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 cd 00 	sts	0x00CD, r25
  ec:	80 93 cc 00 	sts	0x00CC, r24
  UCSR1A = (1<<U2X1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 c8 00 	sts	0x00C8, r24
  UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c9 00 	sts	0x00C9, r24
  UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 ca 00 	sts	0x00CA, r24
 102:	08 95       	ret

00000104 <transmit_payload>:
}
void transmit_payload(uint8_t *data){
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <transmit_payload+0x6>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 
  CE_HIGH;
 10e:	89 9a       	sbi	0x11, 1	; 17
  initRadioTX();
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	d2 d0       	rcall	.+420    	; 0x2ba <initRadioTX>
 116:	af e0       	ldi	r26, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	b7 e2       	ldi	r27, 0x27	; 39
 11a:	11 97       	sbiw	r26, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <transmit_payload+0x16>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <transmit_payload+0x1c>
 120:	00 00       	nop
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	e8 2f       	mov	r30, r24
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	f9 2f       	mov	r31, r25
 12a:	21 e6       	ldi	r18, 0x61	; 97
 12c:	21 93       	st	Z+, r18
  _delay_ms(5);
  for(int i = 0; i < PACKET_SIZE; ++i){
    data[i] = 'a' + i; 
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	21 37       	cpi	r18, 0x71	; 113
void transmit_payload(uint8_t *data){
 
  CE_HIGH;
  initRadioTX();
  _delay_ms(5);
  for(int i = 0; i < PACKET_SIZE; ++i){
 132:	e1 f7       	brne	.-8      	; 0x12c <transmit_payload+0x28>
 134:	60 e1       	ldi	r22, 0x10	; 16
    data[i] = 'a' + i; 
  }
  setRadioTXPayload(data, PACKET_SIZE);
 136:	20 d1       	rcall	.+576    	; 0x378 <setRadioTXPayload>
 138:	89 9a       	sbi	0x11, 1	; 17
 13a:	b8 e2       	ldi	r27, 0x28	; 40
  CE_HIGH;
 13c:	ba 95       	dec	r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	f1 f7       	brne	.-4      	; 0x13c <transmit_payload+0x38>
 140:	89 98       	cbi	0x11, 1	; 17
 142:	70 d1       	rcall	.+736    	; 0x424 <getTX_DS>
    if(getMAX_RT()){

      clearMAX_RT();
      CE_HIGH;
      _delay_us(15);
      CE_LOW;
 144:	81 11       	cpse	r24, r1
  setRadioTXPayload(data, PACKET_SIZE);
  CE_HIGH;
  _delay_us(15);  // pulse CE to start transmition
  CE_LOW;

  while(!(getTX_DS())){
 146:	0f c0       	rjmp	.+30     	; 0x166 <transmit_payload+0x62>
 148:	e7 e5       	ldi	r30, 0x57	; 87
 14a:	f2 e0       	ldi	r31, 0x02	; 2
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <transmit_payload+0x48>
 150:	00 c0       	rjmp	.+0      	; 0x152 <transmit_payload+0x4e>
 152:	00 00       	nop
 154:	77 d1       	rcall	.+750    	; 0x444 <getMAX_RT>
 156:	88 23       	and	r24, r24
 158:	a1 f3       	breq	.-24     	; 0x142 <transmit_payload+0x3e>

    _delay_us(300);  //retransmit time determined by SETUP_RETR register

    if(getMAX_RT()){
 15a:	83 d1       	rcall	.+774    	; 0x462 <clearMAX_RT>
 15c:	89 9a       	sbi	0x11, 1	; 17
 15e:	f8 e2       	ldi	r31, 0x28	; 40
 160:	fa 95       	dec	r31

      clearMAX_RT();
 162:	f1 f7       	brne	.-4      	; 0x160 <transmit_payload+0x5c>
 164:	ed cf       	rjmp	.-38     	; 0x140 <transmit_payload+0x3c>
      CE_HIGH;
 166:	83 d1       	rcall	.+774    	; 0x46e <clearTX_DS>
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	97 e2       	ldi	r25, 0x27	; 39
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <transmit_payload+0x68>
      _delay_us(15);
      CE_LOW;
    }
  }
  clearTX_DS();
 170:	00 c0       	rjmp	.+0      	; 0x172 <transmit_payload+0x6e>
 172:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	82 e7       	ldi	r24, 0x72	; 114
 176:	80 93 00 01 	sts	0x0100, r24
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
  _delay_ms(5);
  mode = 'r';
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <receive_payload>:
 184:	cf 93       	push	r28
}
 186:	df 93       	push	r29
 188:	d8 2f       	mov	r29, r24
 18a:	c9 2f       	mov	r28, r25
 18c:	89 9a       	sbi	0x11, 1	; 17
 18e:	9b d0       	rcall	.+310    	; 0x2c6 <initRadioRX>
void receive_payload(uint8_t *data){
 
  CE_HIGH;
  initRadioRX();
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	97 e2       	ldi	r25, 0x27	; 39
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <receive_payload+0x10>
 198:	00 c0       	rjmp	.+0      	; 0x19a <receive_payload+0x16>
 19a:	00 00       	nop
 19c:	6e d1       	rcall	.+732    	; 0x47a <clearRX_DR>
  _delay_ms(5);  
  clearRX_DR();
 19e:	60 e1       	ldi	r22, 0x10	; 16
 1a0:	8d 2f       	mov	r24, r29
  getRadioRXPayload(data, PACKET_SIZE); //read payload
 1a2:	9c 2f       	mov	r25, r28
 1a4:	08 d1       	rcall	.+528    	; 0x3b6 <getRadioRXPayload>
 1a6:	89 98       	cbi	0x11, 1	; 17
 1a8:	ed 2f       	mov	r30, r29
 1aa:	fc 2f       	mov	r31, r28
  CE_LOW;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	20 91 c8 00 	lds	r18, 0x00C8

  for(int i = 0; i < PACKET_SIZE; i++){
 1b4:	25 ff       	sbrs	r18, 5

    while(!(UCSR1A & (1 << UDRE1)));
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <receive_payload+0x2c>
 1b8:	21 91       	ld	r18, Z+
 1ba:	20 93 ce 00 	sts	0x00CE, r18
    UDR1 = data[i];
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	80 31       	cpi	r24, 0x10	; 16
 1c2:	91 05       	cpc	r25, r1
  _delay_ms(5);  
  clearRX_DR();
  getRadioRXPayload(data, PACKET_SIZE); //read payload
  CE_LOW;

  for(int i = 0; i < PACKET_SIZE; i++){
 1c4:	a9 f7       	brne	.-22     	; 0x1b0 <receive_payload+0x2c>
 1c6:	89 9a       	sbi	0x11, 1	; 17
 1c8:	8f e0       	ldi	r24, 0x0F	; 15
 1ca:	97 e2       	ldi	r25, 0x27	; 39

    while(!(UCSR1A & (1 << UDRE1)));
    UDR1 = data[i];
  }
  CE_HIGH; 
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <receive_payload+0x48>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <receive_payload+0x4e>
 1d2:	00 00       	nop
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <main>:
  _delay_ms(5); 
}
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
int main(void){
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	61 97       	sbiw	r28, 0x11	; 17
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61

  uint8_t data[PACKET_SIZE] = {0};
 1ee:	fe 01       	movw	r30, r28
 1f0:	31 96       	adiw	r30, 0x01	; 1
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	df 01       	movw	r26, r30
 1f6:	1d 92       	st	X+, r1
 1f8:	8a 95       	dec	r24
 1fa:	e9 f7       	brne	.-6      	; 0x1f6 <main+0x1c>
  uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	42 d1       	rcall	.+644    	; 0x486 <malloc>
 202:	8c 01       	movw	r16, r24
 204:	80 e8       	ldi	r24, 0x80	; 128

  CPU_PRESCALE(0x01);  // run at 8 MHz
 206:	80 93 61 00 	sts	0x0061, r24
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 61 00 	sts	0x0061, r24
 210:	84 9a       	sbi	0x10, 4	; 16
  INIT_CSN;
 212:	81 9a       	sbi	0x10, 1	; 16
  INIT_CE;
 214:	8c 9a       	sbi	0x11, 4	; 17
  CSN_HIGH;
 216:	66 df       	rcall	.-308    	; 0xe4 <initUART>
  initUART();
 218:	35 d0       	rcall	.+106    	; 0x284 <SPI_masterInit>
 21a:	55 d0       	rcall	.+170    	; 0x2c6 <initRadioRX>
  SPI_masterInit();
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	59 d0       	rcall	.+178    	; 0x2d2 <setRadioAddressWidth>
  
  initRadioRX();
 220:	63 e2       	ldi	r22, 0x23	; 35
 222:	71 ec       	ldi	r23, 0xC1	; 193
  setRadioAddressWidth(THREE_BYTES);
 224:	8b ea       	ldi	r24, 0xAB	; 171
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	66 d0       	rcall	.+204    	; 0x2f6 <setRadioTXAddress>
  setRadioTXAddress(0xABC123);        
 22a:	63 e2       	ldi	r22, 0x23	; 35
 22c:	71 ec       	ldi	r23, 0xC1	; 193
 22e:	8b ea       	ldi	r24, 0xAB	; 171
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	78 d0       	rcall	.+240    	; 0x324 <setRadioRXAddress>
 234:	82 e0       	ldi	r24, 0x02	; 2
  setRadioRXAddress(0xABC123);
 236:	56 d0       	rcall	.+172    	; 0x2e4 <setRadioFrequency>
 238:	60 e1       	ldi	r22, 0x10	; 16
 23a:	81 e1       	ldi	r24, 0x11	; 17
 23c:	8a d0       	rcall	.+276    	; 0x352 <setRadioRXPayloadSize>
 23e:	8f e0       	ldi	r24, 0x0F	; 15
 240:	97 e2       	ldi	r25, 0x27	; 39
  setRadioFrequency(0b00000010);
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x68>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x6e>
  setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 248:	00 00       	nop
 24a:	81 e6       	ldi	r24, 0x61	; 97
 24c:	f8 2e       	mov	r15, r24
 24e:	19 8a       	std	Y+17, r1	; 0x11
 250:	ce 01       	movw	r24, r28
 252:	41 96       	adiw	r24, 0x11	; 17
 254:	cd d0       	rcall	.+410    	; 0x3f0 <getRadioStatus>
 256:	80 91 c8 00 	lds	r24, 0x00C8
 25a:	85 ff       	sbrs	r24, 5

  while(1){
    uint8_t radioStatus = 0;
    getRadioStatus(&radioStatus);
    while(!(UCSR1A & (1 << UDRE1)));
    UDR1 = 'a';
 25c:	fc cf       	rjmp	.-8      	; 0x256 <main+0x7c>
 25e:	f0 92 ce 00 	sts	0x00CE, r15
  setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
  _delay_ms(5);

  while(1){
    uint8_t radioStatus = 0;
    getRadioStatus(&radioStatus);
 262:	80 91 00 01 	lds	r24, 0x0100
 266:	82 37       	cpi	r24, 0x72	; 114
 268:	29 f4       	brne	.+10     	; 0x274 <main+0x9a>
    while(!(UCSR1A & (1 << UDRE1)));
 26a:	cc d0       	rcall	.+408    	; 0x404 <getRX_DR>
 26c:	88 23       	and	r24, r24
 26e:	11 f0       	breq	.+4      	; 0x274 <main+0x9a>
 270:	c8 01       	movw	r24, r16
    UDR1 = 'a';
 272:	88 df       	rcall	.-240    	; 0x184 <receive_payload>
 274:	80 91 00 01 	lds	r24, 0x0100
    if(mode == 'r'){  
 278:	84 37       	cpi	r24, 0x74	; 116
 27a:	49 f7       	brne	.-46     	; 0x24e <main+0x74>
 27c:	ce 01       	movw	r24, r28
      if(getRX_DR()){
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	41 df       	rcall	.-382    	; 0x104 <transmit_payload>
 282:	e5 cf       	rjmp	.-54     	; 0x24e <main+0x74>

00000284 <SPI_masterInit>:

/************* Basic SPI Functions ****************/
void SPI_masterInit(void)
{
  /* Set MOSI, /SS and SCK to output, all others to input */
  DDRB = ((1<<DDB0) | (1<<DDB2) | (1<<DDB1));
 284:	87 e0       	ldi	r24, 0x07	; 7
 286:	84 b9       	out	0x04, r24	; 4

  /* Enable SPI and Master mode, set clock rate to fck/4 */
  SPCR = (1<<SPE) | (1<<MSTR);
 288:	80 e5       	ldi	r24, 0x50	; 80
 28a:	8c bd       	out	0x2c, r24	; 44
 28c:	08 95       	ret

0000028e <SPI_masterReceive>:
}


int8_t SPI_masterReceive(void)
{
  SPDR = 0xFF; 			// Dummy variable
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF))){}
 292:	0d b4       	in	r0, 0x2d	; 45
 294:	07 fe       	sbrs	r0, 7
 296:	fd cf       	rjmp	.-6      	; 0x292 <SPI_masterReceive+0x4>
  return SPDR;
 298:	8e b5       	in	r24, 0x2e	; 46
}
 29a:	08 95       	ret

0000029c <SPI_masterTransmit>:

int8_t SPI_masterTransmit(int8_t cData)
{	
  SPDR = cData;
 29c:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF))){}
 29e:	0d b4       	in	r0, 0x2d	; 45
 2a0:	07 fe       	sbrs	r0, 7
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <SPI_masterTransmit+0x2>
  return SPDR;
 2a4:	8e b5       	in	r24, 0x2e	; 46
}
 2a6:	08 95       	ret

000002a8 <openPort>:
#include "spi.h"

/*************** PORT OPERATIONS ****************/
void openPort(void){

  CSN_LOW;
 2a8:	8c 98       	cbi	0x11, 4	; 17
 2aa:	08 95       	ret

000002ac <closePort>:
}

void closePort(void){ 
  CSN_HIGH;        // sets port high
 2ac:	8c 9a       	sbi	0x11, 4	; 17
  while(!(CSN_PIN_R &= (1<<CSN_PIN)));    //while port is low
 2ae:	8f b1       	in	r24, 0x0f	; 15
 2b0:	80 71       	andi	r24, 0x10	; 16
 2b2:	8f b9       	out	0x0f, r24	; 15
 2b4:	88 23       	and	r24, r24
 2b6:	d9 f3       	breq	.-10     	; 0x2ae <closePort+0x2>
}
 2b8:	08 95       	ret

000002ba <initRadioTX>:

/*************** Radio Functions ******************/
void initRadioTX(void){
  openPort();
 2ba:	f6 df       	rcall	.-20     	; 0x2a8 <openPort>
 2bc:	80 e2       	ldi	r24, 0x20	; 32
  SPI_masterTransmit(0b00100000);
 2be:	ee df       	rcall	.-36     	; 0x29c <SPI_masterTransmit>
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	ec df       	rcall	.-40     	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(0b00001010);  // sets TX mode on 
 2c4:	f3 cf       	rjmp	.-26     	; 0x2ac <closePort>

000002c6 <initRadioRX>:
 2c6:	f0 df       	rcall	.-32     	; 0x2a8 <openPort>
 2c8:	80 e2       	ldi	r24, 0x20	; 32
  closePort();
 2ca:	e8 df       	rcall	.-48     	; 0x29c <SPI_masterTransmit>
 2cc:	8b e0       	ldi	r24, 0x0B	; 11
}

void initRadioRX(void){
  openPort(); 
  SPI_masterTransmit(0b00100000);
 2ce:	e6 df       	rcall	.-52     	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(0b00001011);  // sets RX mode on 
 2d0:	ed cf       	rjmp	.-38     	; 0x2ac <closePort>

000002d2 <setRadioAddressWidth>:
 2d2:	cf 93       	push	r28
 2d4:	c8 2f       	mov	r28, r24
  closePort();
 2d6:	e8 df       	rcall	.-48     	; 0x2a8 <openPort>
 2d8:	83 e2       	ldi	r24, 0x23	; 35
}

/*************************************************************/
void setRadioAddressWidth(uint8_t width){
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
 2da:	e0 df       	rcall	.-64     	; 0x29c <SPI_masterTransmit>
 2dc:	8c 2f       	mov	r24, r28
 2de:	de df       	rcall	.-68     	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(width);  // sets address 
 2e0:	cf 91       	pop	r28
 2e2:	e4 cf       	rjmp	.-56     	; 0x2ac <closePort>

000002e4 <setRadioFrequency>:
 2e4:	cf 93       	push	r28
  closePort();
}
 2e6:	c8 2f       	mov	r28, r24
/*************************************************************/
void setRadioAddressWidth(uint8_t width){
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
  SPI_masterTransmit(width);  // sets address 
  closePort();
 2e8:	df df       	rcall	.-66     	; 0x2a8 <openPort>
 2ea:	85 e2       	ldi	r24, 0x25	; 37
}

void setRadioFrequency(uint8_t frequency){
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
 2ec:	d7 df       	rcall	.-82     	; 0x29c <SPI_masterTransmit>
 2ee:	8c 2f       	mov	r24, r28
 2f0:	d5 df       	rcall	.-86     	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(frequency);  // sets frequency 
 2f2:	cf 91       	pop	r28
 2f4:	db cf       	rjmp	.-74     	; 0x2ac <closePort>

000002f6 <setRadioTXAddress>:
 2f6:	cf 93       	push	r28
  closePort(); 
}
 2f8:	df 93       	push	r29

void setRadioFrequency(uint8_t frequency){
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
  SPI_masterTransmit(frequency);  // sets frequency 
  closePort(); 
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <setRadioTXAddress+0x6>
 2fc:	cd b7       	in	r28, 0x3d	; 61
}

void setRadioTXAddress(uint32_t address){
 2fe:	de b7       	in	r29, 0x3e	; 62
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 300:	69 83       	std	Y+1, r22	; 0x01
 302:	7a 83       	std	Y+2, r23	; 0x02
 304:	d1 df       	rcall	.-94     	; 0x2a8 <openPort>
 306:	80 e3       	ldi	r24, 0x30	; 48
  SPI_masterTransmit(0x30);  // TX_ADDR register
 308:	c9 df       	rcall	.-110    	; 0x29c <SPI_masterTransmit>
 30a:	69 81       	ldd	r22, Y+1	; 0x01
 30c:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 30e:	c6 df       	rcall	.-116    	; 0x29c <SPI_masterTransmit>
 310:	7a 81       	ldd	r23, Y+2	; 0x02
 312:	87 2f       	mov	r24, r23
 314:	c3 df       	rcall	.-122    	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	c1 df       	rcall	.-126    	; 0x29c <SPI_masterTransmit>
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	c4 cf       	rjmp	.-120    	; 0x2ac <closePort>

00000324 <setRadioRXAddress>:

  closePort();
}
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	00 d0       	rcall	.+0      	; 0x32a <setRadioRXAddress+0x6>
 32a:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x30);  // TX_ADDR register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	69 83       	std	Y+1, r22	; 0x01
void setRadioRXAddress(int32_t address){
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 330:	7a 83       	std	Y+2, r23	; 0x02
 332:	ba df       	rcall	.-140    	; 0x2a8 <openPort>
 334:	8a e2       	ldi	r24, 0x2A	; 42
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
 336:	b2 df       	rcall	.-156    	; 0x29c <SPI_masterTransmit>
 338:	69 81       	ldd	r22, Y+1	; 0x01
 33a:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 33c:	af df       	rcall	.-162    	; 0x29c <SPI_masterTransmit>
 33e:	7a 81       	ldd	r23, Y+2	; 0x02
 340:	87 2f       	mov	r24, r23
 342:	ac df       	rcall	.-168    	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	aa df       	rcall	.-172    	; 0x29c <SPI_masterTransmit>
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	ad cf       	rjmp	.-166    	; 0x2ac <closePort>

00000352 <setRadioRXPayloadSize>:

  closePort();
}
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	00 d0       	rcall	.+0      	; 0x358 <setRadioRXPayloadSize+0x6>
 358:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	6a 83       	std	Y+2, r22	; 0x02
  size is the number of bytes in PL from 1-32
 ************************************************************/


void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size){
  openPort();
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	a3 df       	rcall	.-186    	; 0x2a8 <openPort>
 362:	89 81       	ldd	r24, Y+1	; 0x01
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
 364:	80 62       	ori	r24, 0x20	; 32
 366:	9a df       	rcall	.-204    	; 0x29c <SPI_masterTransmit>
 368:	6a 81       	ldd	r22, Y+2	; 0x02
 36a:	86 2f       	mov	r24, r22
  SPI_masterTransmit(size);  // size of payload for data pipe
 36c:	97 df       	rcall	.-210    	; 0x29c <SPI_masterTransmit>
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
  closePort();
}
 374:	cf 91       	pop	r28
 376:	9a cf       	rjmp	.-204    	; 0x2ac <closePort>

00000378 <setRadioTXPayload>:
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15

void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size){
  openPort();
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
  SPI_masterTransmit(size);  // size of payload for data pipe
  closePort();
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
}

void setRadioTXPayload(uint8_t* frame, int8_t payloadSize){
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	8c 01       	movw	r16, r24
 386:	e6 2e       	mov	r14, r22
  openPort();
 388:	8f df       	rcall	.-226    	; 0x2a8 <openPort>
 38a:	80 ea       	ldi	r24, 0xA0	; 160
  SPI_masterTransmit(0b10100000);  // Initiate writing of payload
 38c:	87 df       	rcall	.-242    	; 0x29c <SPI_masterTransmit>
 38e:	e8 01       	movw	r28, r16
 390:	ff 24       	eor	r15, r15
  for(int i = 0; i < payloadSize; i++)
 392:	e7 fc       	sbrc	r14, 7
 394:	f0 94       	com	r15
 396:	ce 01       	movw	r24, r28
 398:	80 1b       	sub	r24, r16
 39a:	91 0b       	sbc	r25, r17
 39c:	8e 15       	cp	r24, r14
 39e:	9f 05       	cpc	r25, r15
 3a0:	1c f4       	brge	.+6      	; 0x3a8 <setRadioTXPayload+0x30>
 3a2:	89 91       	ld	r24, Y+
 3a4:	7b df       	rcall	.-266    	; 0x29c <SPI_masterTransmit>
  {
    SPI_masterTransmit(frame[i]);
 3a6:	f7 cf       	rjmp	.-18     	; 0x396 <setRadioTXPayload+0x1e>
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
  }
  closePort();
}
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	7b cf       	rjmp	.-266    	; 0x2ac <closePort>

000003b6 <getRadioRXPayload>:
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
  SPI_masterTransmit(0b10100000);  // Initiate writing of payload
  for(int i = 0; i < payloadSize; i++)
  {
    SPI_masterTransmit(frame[i]);
  }
  closePort();
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
}


void getRadioRXPayload(uint8_t* payload, uint8_t payloadSize){
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	8c 01       	movw	r16, r24
 3c4:	e6 2e       	mov	r14, r22
  uint8_t radioStatus;
  openPort();
 3c6:	70 df       	rcall	.-288    	; 0x2a8 <openPort>
 3c8:	81 e6       	ldi	r24, 0x61	; 97
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
 3ca:	68 df       	rcall	.-304    	; 0x29c <SPI_masterTransmit>
 3cc:	e8 01       	movw	r28, r16
 3ce:	f1 2c       	mov	r15, r1
  for(int i = 0; i<payloadSize; i++)
 3d0:	ce 01       	movw	r24, r28
 3d2:	80 1b       	sub	r24, r16
 3d4:	91 0b       	sbc	r25, r17
 3d6:	8e 15       	cp	r24, r14
 3d8:	9f 05       	cpc	r25, r15
 3da:	1c f4       	brge	.+6      	; 0x3e2 <getRadioRXPayload+0x2c>
 3dc:	58 df       	rcall	.-336    	; 0x28e <SPI_masterReceive>
 3de:	89 93       	st	Y+, r24
  {
    payload[i] = SPI_masterReceive();
 3e0:	f7 cf       	rjmp	.-18     	; 0x3d0 <getRadioRXPayload+0x1a>
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
  }
  closePort();
}
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	5e cf       	rjmp	.-324    	; 0x2ac <closePort>

000003f0 <getRadioStatus>:
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
  for(int i = 0; i<payloadSize; i++)
  {
    payload[i] = SPI_masterReceive();
  }
  closePort();
 3f4:	ec 01       	movw	r28, r24
 3f6:	58 df       	rcall	.-336    	; 0x2a8 <openPort>
}


void getRadioStatus(uint8_t* status){
  openPort();
 3f8:	87 e0       	ldi	r24, 0x07	; 7
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
 3fa:	50 df       	rcall	.-352    	; 0x29c <SPI_masterTransmit>
 3fc:	88 83       	st	Y, r24
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
  closePort();
}
 402:	54 cf       	rjmp	.-344    	; 0x2ac <closePort>

00000404 <getRX_DR>:
 404:	cf 93       	push	r28


void getRadioStatus(uint8_t* status){
  openPort();
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
  closePort();
 406:	df 93       	push	r29
 408:	1f 92       	push	r1
/**************************************************
  Boolean valued functions. return 1 if bit
  is set, else returns 0 
 ***************************************************/

uint8_t getRX_DR(void){
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 40e:	ce 01       	movw	r24, r28
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	ee df       	rcall	.-36     	; 0x3f0 <getRadioStatus>
 414:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<6))  // if RX_DR is set
 416:	86 fb       	bst	r24, 6
    return 1;
  else
    return 0;
}
 418:	88 27       	eor	r24, r24
 41a:	80 f9       	bld	r24, 0
 41c:	0f 90       	pop	r0
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <getTX_DS>:
 424:	cf 93       	push	r28

uint8_t getTX_DS(void){
 426:	df 93       	push	r29
 428:	1f 92       	push	r1
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	de df       	rcall	.-68     	; 0x3f0 <getRadioStatus>
 434:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<5))  
 436:	85 fb       	bst	r24, 5
    return 1;
  else
    return 0;
}
 438:	88 27       	eor	r24, r24
 43a:	80 f9       	bld	r24, 0
 43c:	0f 90       	pop	r0
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <getMAX_RT>:
 444:	cf 93       	push	r28

uint8_t getMAX_RT(void){
 446:	df 93       	push	r29
 448:	1f 92       	push	r1
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 44e:	ce 01       	movw	r24, r28
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	ce df       	rcall	.-100    	; 0x3f0 <getRadioStatus>
 454:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<4))  
 456:	82 95       	swap	r24
    return 1;
  else
    return 0;
}
 458:	81 70       	andi	r24, 0x01	; 1
 45a:	0f 90       	pop	r0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <clearMAX_RT>:
 462:	22 df       	rcall	.-444    	; 0x2a8 <openPort>
}

/*********** Clear Status Bits **************/
void clearMAX_RT(void){   
  uint8_t status;
  openPort();
 464:	87 e2       	ldi	r24, 0x27	; 39
  status = SPI_masterTransmit(0x07 | 0b00100000);  
 466:	1a df       	rcall	.-460    	; 0x29c <SPI_masterTransmit>
 468:	80 61       	ori	r24, 0x10	; 16
 46a:	18 df       	rcall	.-464    	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<4));
 46c:	1f cf       	rjmp	.-450    	; 0x2ac <closePort>

0000046e <clearTX_DS>:
 46e:	1c df       	rcall	.-456    	; 0x2a8 <openPort>
 470:	87 e2       	ldi	r24, 0x27	; 39
  closePort();
 472:	14 df       	rcall	.-472    	; 0x29c <SPI_masterTransmit>
 474:	80 62       	ori	r24, 0x20	; 32
}

void clearTX_DS(void){
  uint8_t status;
  openPort();
  status = SPI_masterTransmit(0x07 | 0b00100000);  
 476:	12 df       	rcall	.-476    	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<5));
 478:	19 cf       	rjmp	.-462    	; 0x2ac <closePort>

0000047a <clearRX_DR>:
 47a:	16 df       	rcall	.-468    	; 0x2a8 <openPort>
 47c:	87 e2       	ldi	r24, 0x27	; 39
  closePort();
 47e:	0e df       	rcall	.-484    	; 0x29c <SPI_masterTransmit>
 480:	80 64       	ori	r24, 0x40	; 64
}

void clearRX_DR(void){
  uint8_t status;
  openPort();
  status = SPI_masterTransmit(0x07 | 0b00100000); 
 482:	0c df       	rcall	.-488    	; 0x29c <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<6));  //reset receive bit
 484:	13 cf       	rjmp	.-474    	; 0x2ac <closePort>

00000486 <malloc>:
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
  closePort();
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	91 05       	cpc	r25, r1
 48e:	10 f4       	brcc	.+4      	; 0x494 <malloc+0xe>
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	e0 91 0a 01 	lds	r30, 0x010A
 498:	f0 91 0b 01 	lds	r31, 0x010B
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	a0 e0       	ldi	r26, 0x00	; 0
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	30 97       	sbiw	r30, 0x00	; 0
 4a6:	39 f1       	breq	.+78     	; 0x4f6 <malloc+0x70>
 4a8:	40 81       	ld	r20, Z
 4aa:	51 81       	ldd	r21, Z+1	; 0x01
 4ac:	48 17       	cp	r20, r24
 4ae:	59 07       	cpc	r21, r25
 4b0:	b8 f0       	brcs	.+46     	; 0x4e0 <malloc+0x5a>
 4b2:	48 17       	cp	r20, r24
 4b4:	59 07       	cpc	r21, r25
 4b6:	71 f4       	brne	.+28     	; 0x4d4 <malloc+0x4e>
 4b8:	82 81       	ldd	r24, Z+2	; 0x02
 4ba:	93 81       	ldd	r25, Z+3	; 0x03
 4bc:	10 97       	sbiw	r26, 0x00	; 0
 4be:	29 f0       	breq	.+10     	; 0x4ca <malloc+0x44>
 4c0:	13 96       	adiw	r26, 0x03	; 3
 4c2:	9c 93       	st	X, r25
 4c4:	8e 93       	st	-X, r24
 4c6:	12 97       	sbiw	r26, 0x02	; 2
 4c8:	2c c0       	rjmp	.+88     	; 0x522 <malloc+0x9c>
 4ca:	90 93 0b 01 	sts	0x010B, r25
 4ce:	80 93 0a 01 	sts	0x010A, r24
 4d2:	27 c0       	rjmp	.+78     	; 0x522 <malloc+0x9c>
 4d4:	21 15       	cp	r18, r1
 4d6:	31 05       	cpc	r19, r1
 4d8:	31 f0       	breq	.+12     	; 0x4e6 <malloc+0x60>
 4da:	42 17       	cp	r20, r18
 4dc:	53 07       	cpc	r21, r19
 4de:	18 f0       	brcs	.+6      	; 0x4e6 <malloc+0x60>
 4e0:	a9 01       	movw	r20, r18
 4e2:	db 01       	movw	r26, r22
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <malloc+0x62>
 4e6:	ef 01       	movw	r28, r30
 4e8:	9a 01       	movw	r18, r20
 4ea:	bd 01       	movw	r22, r26
 4ec:	df 01       	movw	r26, r30
 4ee:	02 80       	ldd	r0, Z+2	; 0x02
 4f0:	f3 81       	ldd	r31, Z+3	; 0x03
 4f2:	e0 2d       	mov	r30, r0
 4f4:	d7 cf       	rjmp	.-82     	; 0x4a4 <malloc+0x1e>
 4f6:	21 15       	cp	r18, r1
 4f8:	31 05       	cpc	r19, r1
 4fa:	f9 f0       	breq	.+62     	; 0x53a <malloc+0xb4>
 4fc:	28 1b       	sub	r18, r24
 4fe:	39 0b       	sbc	r19, r25
 500:	24 30       	cpi	r18, 0x04	; 4
 502:	31 05       	cpc	r19, r1
 504:	80 f4       	brcc	.+32     	; 0x526 <malloc+0xa0>
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	9b 81       	ldd	r25, Y+3	; 0x03
 50a:	61 15       	cp	r22, r1
 50c:	71 05       	cpc	r23, r1
 50e:	21 f0       	breq	.+8      	; 0x518 <malloc+0x92>
 510:	fb 01       	movw	r30, r22
 512:	93 83       	std	Z+3, r25	; 0x03
 514:	82 83       	std	Z+2, r24	; 0x02
 516:	04 c0       	rjmp	.+8      	; 0x520 <malloc+0x9a>
 518:	90 93 0b 01 	sts	0x010B, r25
 51c:	80 93 0a 01 	sts	0x010A, r24
 520:	fe 01       	movw	r30, r28
 522:	32 96       	adiw	r30, 0x02	; 2
 524:	44 c0       	rjmp	.+136    	; 0x5ae <malloc+0x128>
 526:	fe 01       	movw	r30, r28
 528:	e2 0f       	add	r30, r18
 52a:	f3 1f       	adc	r31, r19
 52c:	81 93       	st	Z+, r24
 52e:	91 93       	st	Z+, r25
 530:	22 50       	subi	r18, 0x02	; 2
 532:	31 09       	sbc	r19, r1
 534:	39 83       	std	Y+1, r19	; 0x01
 536:	28 83       	st	Y, r18
 538:	3a c0       	rjmp	.+116    	; 0x5ae <malloc+0x128>
 53a:	20 91 08 01 	lds	r18, 0x0108
 53e:	30 91 09 01 	lds	r19, 0x0109
 542:	23 2b       	or	r18, r19
 544:	41 f4       	brne	.+16     	; 0x556 <malloc+0xd0>
 546:	20 91 03 01 	lds	r18, 0x0103
 54a:	30 91 04 01 	lds	r19, 0x0104
 54e:	30 93 09 01 	sts	0x0109, r19
 552:	20 93 08 01 	sts	0x0108, r18
 556:	20 91 01 01 	lds	r18, 0x0101
 55a:	30 91 02 01 	lds	r19, 0x0102
 55e:	21 15       	cp	r18, r1
 560:	31 05       	cpc	r19, r1
 562:	41 f4       	brne	.+16     	; 0x574 <malloc+0xee>
 564:	2d b7       	in	r18, 0x3d	; 61
 566:	3e b7       	in	r19, 0x3e	; 62
 568:	40 91 05 01 	lds	r20, 0x0105
 56c:	50 91 06 01 	lds	r21, 0x0106
 570:	24 1b       	sub	r18, r20
 572:	35 0b       	sbc	r19, r21
 574:	e0 91 08 01 	lds	r30, 0x0108
 578:	f0 91 09 01 	lds	r31, 0x0109
 57c:	e2 17       	cp	r30, r18
 57e:	f3 07       	cpc	r31, r19
 580:	a0 f4       	brcc	.+40     	; 0x5aa <malloc+0x124>
 582:	2e 1b       	sub	r18, r30
 584:	3f 0b       	sbc	r19, r31
 586:	28 17       	cp	r18, r24
 588:	39 07       	cpc	r19, r25
 58a:	78 f0       	brcs	.+30     	; 0x5aa <malloc+0x124>
 58c:	ac 01       	movw	r20, r24
 58e:	4e 5f       	subi	r20, 0xFE	; 254
 590:	5f 4f       	sbci	r21, 0xFF	; 255
 592:	24 17       	cp	r18, r20
 594:	35 07       	cpc	r19, r21
 596:	48 f0       	brcs	.+18     	; 0x5aa <malloc+0x124>
 598:	4e 0f       	add	r20, r30
 59a:	5f 1f       	adc	r21, r31
 59c:	50 93 09 01 	sts	0x0109, r21
 5a0:	40 93 08 01 	sts	0x0108, r20
 5a4:	81 93       	st	Z+, r24
 5a6:	91 93       	st	Z+, r25
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <malloc+0x128>
 5aa:	e0 e0       	ldi	r30, 0x00	; 0
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	cf 01       	movw	r24, r30
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <free>:
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	00 97       	sbiw	r24, 0x00	; 0
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <free+0xa>
 5be:	87 c0       	rjmp	.+270    	; 0x6ce <free+0x118>
 5c0:	fc 01       	movw	r30, r24
 5c2:	32 97       	sbiw	r30, 0x02	; 2
 5c4:	13 82       	std	Z+3, r1	; 0x03
 5c6:	12 82       	std	Z+2, r1	; 0x02
 5c8:	c0 91 0a 01 	lds	r28, 0x010A
 5cc:	d0 91 0b 01 	lds	r29, 0x010B
 5d0:	20 97       	sbiw	r28, 0x00	; 0
 5d2:	81 f4       	brne	.+32     	; 0x5f4 <free+0x3e>
 5d4:	20 81       	ld	r18, Z
 5d6:	31 81       	ldd	r19, Z+1	; 0x01
 5d8:	28 0f       	add	r18, r24
 5da:	39 1f       	adc	r19, r25
 5dc:	80 91 08 01 	lds	r24, 0x0108
 5e0:	90 91 09 01 	lds	r25, 0x0109
 5e4:	82 17       	cp	r24, r18
 5e6:	93 07       	cpc	r25, r19
 5e8:	79 f5       	brne	.+94     	; 0x648 <free+0x92>
 5ea:	f0 93 09 01 	sts	0x0109, r31
 5ee:	e0 93 08 01 	sts	0x0108, r30
 5f2:	6d c0       	rjmp	.+218    	; 0x6ce <free+0x118>
 5f4:	de 01       	movw	r26, r28
 5f6:	20 e0       	ldi	r18, 0x00	; 0
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	ae 17       	cp	r26, r30
 5fc:	bf 07       	cpc	r27, r31
 5fe:	50 f4       	brcc	.+20     	; 0x614 <free+0x5e>
 600:	12 96       	adiw	r26, 0x02	; 2
 602:	4d 91       	ld	r20, X+
 604:	5c 91       	ld	r21, X
 606:	13 97       	sbiw	r26, 0x03	; 3
 608:	9d 01       	movw	r18, r26
 60a:	41 15       	cp	r20, r1
 60c:	51 05       	cpc	r21, r1
 60e:	09 f1       	breq	.+66     	; 0x652 <free+0x9c>
 610:	da 01       	movw	r26, r20
 612:	f3 cf       	rjmp	.-26     	; 0x5fa <free+0x44>
 614:	b3 83       	std	Z+3, r27	; 0x03
 616:	a2 83       	std	Z+2, r26	; 0x02
 618:	40 81       	ld	r20, Z
 61a:	51 81       	ldd	r21, Z+1	; 0x01
 61c:	84 0f       	add	r24, r20
 61e:	95 1f       	adc	r25, r21
 620:	8a 17       	cp	r24, r26
 622:	9b 07       	cpc	r25, r27
 624:	71 f4       	brne	.+28     	; 0x642 <free+0x8c>
 626:	8d 91       	ld	r24, X+
 628:	9c 91       	ld	r25, X
 62a:	11 97       	sbiw	r26, 0x01	; 1
 62c:	84 0f       	add	r24, r20
 62e:	95 1f       	adc	r25, r21
 630:	02 96       	adiw	r24, 0x02	; 2
 632:	91 83       	std	Z+1, r25	; 0x01
 634:	80 83       	st	Z, r24
 636:	12 96       	adiw	r26, 0x02	; 2
 638:	8d 91       	ld	r24, X+
 63a:	9c 91       	ld	r25, X
 63c:	13 97       	sbiw	r26, 0x03	; 3
 63e:	93 83       	std	Z+3, r25	; 0x03
 640:	82 83       	std	Z+2, r24	; 0x02
 642:	21 15       	cp	r18, r1
 644:	31 05       	cpc	r19, r1
 646:	29 f4       	brne	.+10     	; 0x652 <free+0x9c>
 648:	f0 93 0b 01 	sts	0x010B, r31
 64c:	e0 93 0a 01 	sts	0x010A, r30
 650:	3e c0       	rjmp	.+124    	; 0x6ce <free+0x118>
 652:	d9 01       	movw	r26, r18
 654:	13 96       	adiw	r26, 0x03	; 3
 656:	fc 93       	st	X, r31
 658:	ee 93       	st	-X, r30
 65a:	12 97       	sbiw	r26, 0x02	; 2
 65c:	4d 91       	ld	r20, X+
 65e:	5d 91       	ld	r21, X+
 660:	a4 0f       	add	r26, r20
 662:	b5 1f       	adc	r27, r21
 664:	ea 17       	cp	r30, r26
 666:	fb 07       	cpc	r31, r27
 668:	79 f4       	brne	.+30     	; 0x688 <free+0xd2>
 66a:	80 81       	ld	r24, Z
 66c:	91 81       	ldd	r25, Z+1	; 0x01
 66e:	84 0f       	add	r24, r20
 670:	95 1f       	adc	r25, r21
 672:	02 96       	adiw	r24, 0x02	; 2
 674:	d9 01       	movw	r26, r18
 676:	11 96       	adiw	r26, 0x01	; 1
 678:	9c 93       	st	X, r25
 67a:	8e 93       	st	-X, r24
 67c:	82 81       	ldd	r24, Z+2	; 0x02
 67e:	93 81       	ldd	r25, Z+3	; 0x03
 680:	13 96       	adiw	r26, 0x03	; 3
 682:	9c 93       	st	X, r25
 684:	8e 93       	st	-X, r24
 686:	12 97       	sbiw	r26, 0x02	; 2
 688:	e0 e0       	ldi	r30, 0x00	; 0
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	9b 81       	ldd	r25, Y+3	; 0x03
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	19 f0       	breq	.+6      	; 0x69a <free+0xe4>
 694:	fe 01       	movw	r30, r28
 696:	ec 01       	movw	r28, r24
 698:	f9 cf       	rjmp	.-14     	; 0x68c <free+0xd6>
 69a:	ce 01       	movw	r24, r28
 69c:	02 96       	adiw	r24, 0x02	; 2
 69e:	28 81       	ld	r18, Y
 6a0:	39 81       	ldd	r19, Y+1	; 0x01
 6a2:	82 0f       	add	r24, r18
 6a4:	93 1f       	adc	r25, r19
 6a6:	20 91 08 01 	lds	r18, 0x0108
 6aa:	30 91 09 01 	lds	r19, 0x0109
 6ae:	28 17       	cp	r18, r24
 6b0:	39 07       	cpc	r19, r25
 6b2:	69 f4       	brne	.+26     	; 0x6ce <free+0x118>
 6b4:	30 97       	sbiw	r30, 0x00	; 0
 6b6:	29 f4       	brne	.+10     	; 0x6c2 <free+0x10c>
 6b8:	10 92 0b 01 	sts	0x010B, r1
 6bc:	10 92 0a 01 	sts	0x010A, r1
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <free+0x110>
 6c2:	13 82       	std	Z+3, r1	; 0x03
 6c4:	12 82       	std	Z+2, r1	; 0x02
 6c6:	d0 93 09 01 	sts	0x0109, r29
 6ca:	c0 93 08 01 	sts	0x0108, r28
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
