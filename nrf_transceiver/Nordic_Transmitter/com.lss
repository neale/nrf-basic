
com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000384  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001b8  00000000  00000000  00000410  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000012ad  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000057a  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000063a  00000000  00000000  00001def  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003b8  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000404  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000952  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000138  00000000  00000000  0000353a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{

  uint8_t data1 = 0; 


  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); //Send Start condition
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))    //breaks when TWINT == 1
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
    ;			//Wait for transmission to complete

  if ((TWSR & 0xF8) != START)
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
    ERROR2();               //If START condition not received, error


  TWDR = 0xD4;
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  TWCR = (1<<TWINT) | (1<<TWEN);  //Load SLA+W then initiate transfer
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
    ;			//Wait for transmission to complete


  if ((TWSR & 0xF8) != 0x18)
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
    ERROR2();		//ERROR if SLA+W not sent and acknowledged


  TWDR = data2;
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  TWCR = (1<<TWINT) | (1<<TWEN);  //Load data, start transmission
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop

  while (!(TWCR & (1<<TWINT)))
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
    ;			//Wait for transmission to complete

  if((TWSR & 0xF8) != 0x28)	
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop





  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    //repeat start condition
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))    //breaks when TWINT == 1
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
    ;			//Wait for transmission to complete

  if((TWSR & 0xF8) != 0x10)  //Error for repeat start condition
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
    ERROR2();


  TWDR = 0xD5;   //SLA+R
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop

  TWCR = (1<<TWINT) | (1<<TWEN);  //load data
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>


  while (!(TWCR & (1<<TWINT)))
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
    ;			//Wait for transmission to complete


  if((TWSR & 0xF8) != 0x40)  // checks if SLA+R and ACK has been sent
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
    ERROR2();



  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  //ready to receive,  ACK
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop

  while (!(TWCR & (1<<TWINT)))  // wait for reception
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
    ;

  data1 = TWDR;
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop

  TWCR = (1<<TWINT) | (1<<TWEN);   //send no ACK
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>

  while (!(TWCR & (1<<TWINT)))  // wait for reception
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
    ;

  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); //send stop condition
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop

  return data1; 

}
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop
  98:	1c c0       	rjmp	.+56     	; 0xd2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1a c0       	rjmp	.+52     	; 0xd2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	18 c0       	rjmp	.+48     	; 0xd2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	16 c0       	rjmp	.+44     	; 0xd2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	14 c0       	rjmp	.+40     	; 0xd2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e8       	ldi	r30, 0x84	; 132
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	42 d0       	rcall	.+132    	; 0x154 <main>
  d0:	57 c1       	rjmp	.+686    	; 0x380 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <transmit_payload>:
  UBRR1 = 25;  //38.4k baud
  UCSR1A = (1<<U2X1);
  UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
}
void transmit_payload(uint8_t *data){
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	00 d0       	rcall	.+0      	; 0xda <transmit_payload+0x6>
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
 
  CE_HIGH;
  de:	89 9a       	sbi	0x11, 1	; 17
  initRadioTX();
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	9a d0       	rcall	.+308    	; 0x21a <initRadioTX>
  e6:	af e0       	ldi	r26, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	b7 e2       	ldi	r27, 0x27	; 39
  ea:	11 97       	sbiw	r26, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <transmit_payload+0x16>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <transmit_payload+0x1c>
  f0:	00 00       	nop
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	e8 2f       	mov	r30, r24
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	f9 2f       	mov	r31, r25
  fa:	21 e6       	ldi	r18, 0x61	; 97
  fc:	21 93       	st	Z+, r18
  _delay_ms(5);
  for(int i = 0; i < PACKET_SIZE; ++i){
    data[i] = 'a' + i; 
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	21 37       	cpi	r18, 0x71	; 113
void transmit_payload(uint8_t *data){
 
  CE_HIGH;
  initRadioTX();
  _delay_ms(5);
  for(int i = 0; i < PACKET_SIZE; ++i){
 102:	e1 f7       	brne	.-8      	; 0xfc <transmit_payload+0x28>
 104:	60 e1       	ldi	r22, 0x10	; 16
    data[i] = 'a' + i; 
  }
  setRadioTXPayload(data, PACKET_SIZE);
 106:	e8 d0       	rcall	.+464    	; 0x2d8 <setRadioTXPayload>
 108:	89 9a       	sbi	0x11, 1	; 17
 10a:	b8 e2       	ldi	r27, 0x28	; 40
  CE_HIGH;
 10c:	ba 95       	dec	r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	f1 f7       	brne	.-4      	; 0x10c <transmit_payload+0x38>
 110:	89 98       	cbi	0x11, 1	; 17
 112:	0b d1       	rcall	.+534    	; 0x32a <getTX_DS>
    if(getMAX_RT()){

      clearMAX_RT();
      CE_HIGH;
      _delay_us(15);
      CE_LOW;
 114:	81 11       	cpse	r24, r1
  setRadioTXPayload(data, PACKET_SIZE);
  CE_HIGH;
  _delay_us(15);  // pulse CE to start transmition
  CE_LOW;

  while(!(getTX_DS())){
 116:	0f c0       	rjmp	.+30     	; 0x136 <transmit_payload+0x62>
 118:	e7 e5       	ldi	r30, 0x57	; 87
 11a:	f2 e0       	ldi	r31, 0x02	; 2
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <transmit_payload+0x48>
 120:	00 c0       	rjmp	.+0      	; 0x122 <transmit_payload+0x4e>
 122:	00 00       	nop
 124:	12 d1       	rcall	.+548    	; 0x34a <getMAX_RT>
 126:	88 23       	and	r24, r24
 128:	a1 f3       	breq	.-24     	; 0x112 <transmit_payload+0x3e>

    _delay_us(300);  //retransmit time determined by SETUP_RETR register

    if(getMAX_RT()){
 12a:	1e d1       	rcall	.+572    	; 0x368 <clearMAX_RT>
 12c:	89 9a       	sbi	0x11, 1	; 17
 12e:	f8 e2       	ldi	r31, 0x28	; 40
 130:	fa 95       	dec	r31

      clearMAX_RT();
 132:	f1 f7       	brne	.-4      	; 0x130 <transmit_payload+0x5c>
 134:	ed cf       	rjmp	.-38     	; 0x110 <transmit_payload+0x3c>
      CE_HIGH;
 136:	1e d1       	rcall	.+572    	; 0x374 <clearTX_DS>
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	97 e2       	ldi	r25, 0x27	; 39
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <transmit_payload+0x68>
      _delay_us(15);
      CE_LOW;
    }
  }
  clearTX_DS();
 140:	00 c0       	rjmp	.+0      	; 0x142 <transmit_payload+0x6e>
 142:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	82 e7       	ldi	r24, 0x72	; 114
 146:	80 93 00 01 	sts	0x0100, r24
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	df 91       	pop	r29
  _delay_ms(5);
  mode = 'r';
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <main>:
 154:	cf 93       	push	r28
}
 156:	df 93       	push	r29
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	61 97       	sbiw	r28, 0x11	; 17
 15e:	0f b6       	in	r0, 0x3f	; 63
    UDR1 = data[i];
  }
  CE_HIGH; 
  _delay_ms(5); 
}
int main(void){
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61

  uint8_t data[PACKET_SIZE] = {0};
 168:	8e 01       	movw	r16, r28
 16a:	0f 5f       	subi	r16, 0xFF	; 255
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	f8 01       	movw	r30, r16
 172:	11 92       	st	Z+, r1
 174:	8a 95       	dec	r24
 176:	e9 f7       	brne	.-6      	; 0x172 <main+0x1e>
  uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));

  DDRF &= ~(1 << PF0);
 178:	80 98       	cbi	0x10, 0	; 16
  PORTF &= ~(1 << PF0);
 17a:	88 98       	cbi	0x11, 0	; 17

  CPU_PRESCALE(0x01);  // run at 8 MHz
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	80 93 61 00 	sts	0x0061, r24
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 61 00 	sts	0x0061, r24
  INIT_CSN;
 188:	84 9a       	sbi	0x10, 4	; 16
  INIT_CE;
 18a:	81 9a       	sbi	0x10, 1	; 16
  CSN_HIGH;
 18c:	8c 9a       	sbi	0x11, 4	; 17
  initUART;
  SPI_masterInit();
 18e:	31 d0       	rcall	.+98     	; 0x1f2 <SPI_masterInit>
 190:	80 91 c8 00 	lds	r24, 0x00C8
  while(!(UCSR1A & (1 << UDRE1)));
 194:	85 ff       	sbrs	r24, 5
 196:	fc cf       	rjmp	.-8      	; 0x190 <main+0x3c>
 198:	80 91 00 01 	lds	r24, 0x0100
  UDR1 = mode; 
 19c:	80 93 ce 00 	sts	0x00CE, r24
 1a0:	42 d0       	rcall	.+132    	; 0x226 <initRadioRX>
 

  initRadioRX();
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	46 d0       	rcall	.+140    	; 0x232 <setRadioAddressWidth>
  setRadioAddressWidth(THREE_BYTES);
 1a6:	63 e2       	ldi	r22, 0x23	; 35
 1a8:	71 ec       	ldi	r23, 0xC1	; 193
 1aa:	8b ea       	ldi	r24, 0xAB	; 171
  setRadioTXAddress(0xABC123);        
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	53 d0       	rcall	.+166    	; 0x256 <setRadioTXAddress>
 1b0:	63 e2       	ldi	r22, 0x23	; 35
 1b2:	71 ec       	ldi	r23, 0xC1	; 193
 1b4:	8b ea       	ldi	r24, 0xAB	; 171
 1b6:	90 e0       	ldi	r25, 0x00	; 0
  setRadioRXAddress(0xABC123);
 1b8:	65 d0       	rcall	.+202    	; 0x284 <setRadioRXAddress>
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	43 d0       	rcall	.+134    	; 0x244 <setRadioFrequency>
 1be:	60 e1       	ldi	r22, 0x10	; 16
 1c0:	81 e1       	ldi	r24, 0x11	; 17
 1c2:	77 d0       	rcall	.+238    	; 0x2b2 <setRadioRXPayloadSize>
  setRadioFrequency(0b00000010);
 1c4:	8f e0       	ldi	r24, 0x0F	; 15
 1c6:	97 e2       	ldi	r25, 0x27	; 39
 1c8:	01 97       	sbiw	r24, 0x01	; 1
  setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x74>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x7a>
 1ce:	00 00       	nop
 1d0:	84 e7       	ldi	r24, 0x74	; 116
 1d2:	f8 2e       	mov	r15, r24
 1d4:	19 8a       	std	Y+17, r1	; 0x11
 1d6:	ce 01       	movw	r24, r28
 1d8:	41 96       	adiw	r24, 0x11	; 17
 1da:	9d d0       	rcall	.+314    	; 0x316 <getRadioStatus>
 1dc:	80 91 c8 00 	lds	r24, 0x00C8

  while(1){
    uint8_t radioStatus = 0;
    getRadioStatus(&radioStatus);
    while(!(UCSR1A & (1 << UDRE1)));
    UDR1 = 't'; 
 1e0:	85 ff       	sbrs	r24, 5
  setRadioFrequency(0b00000010);
  setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
  _delay_ms(5);

  while(1){
    uint8_t radioStatus = 0;
 1e2:	fc cf       	rjmp	.-8      	; 0x1dc <main+0x88>
    getRadioStatus(&radioStatus);
 1e4:	f0 92 ce 00 	sts	0x00CE, r15
 1e8:	f0 92 00 01 	sts	0x0100, r15
    while(!(UCSR1A & (1 << UDRE1)));
 1ec:	c8 01       	movw	r24, r16
 1ee:	72 df       	rcall	.-284    	; 0xd4 <transmit_payload>
 1f0:	f1 cf       	rjmp	.-30     	; 0x1d4 <main+0x80>

000001f2 <SPI_masterInit>:

/************* Basic SPI Functions ****************/
void SPI_masterInit(void)
{
  /* Set MOSI, /SS and SCK to output, all others to input */
  DDRB = ((1<<DDB0) | (1<<DDB2) | (1<<DDB1));
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	84 b9       	out	0x04, r24	; 4

  /* Enable SPI and Master mode, set clock rate to fck/4 */
  SPCR = (1<<SPE) | (1<<MSTR);
 1f6:	80 e5       	ldi	r24, 0x50	; 80
 1f8:	8c bd       	out	0x2c, r24	; 44
 1fa:	08 95       	ret

000001fc <SPI_masterTransmit>:
  return SPDR;
}

int8_t SPI_masterTransmit(int8_t cData)
{	
  SPDR = cData;
 1fc:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF))){}
 1fe:	0d b4       	in	r0, 0x2d	; 45
 200:	07 fe       	sbrs	r0, 7
 202:	fd cf       	rjmp	.-6      	; 0x1fe <SPI_masterTransmit+0x2>
  return SPDR;
 204:	8e b5       	in	r24, 0x2e	; 46
}
 206:	08 95       	ret

00000208 <openPort>:
#include "spi.h"

/*************** PORT OPERATIONS ****************/
void openPort(void){

  CSN_LOW;
 208:	8c 98       	cbi	0x11, 4	; 17
 20a:	08 95       	ret

0000020c <closePort>:
}

void closePort(void){ 
  CSN_HIGH;        // sets port high
 20c:	8c 9a       	sbi	0x11, 4	; 17
  while(!(CSN_PIN_R &= (1<<CSN_PIN)));    //while port is low
 20e:	8f b1       	in	r24, 0x0f	; 15
 210:	80 71       	andi	r24, 0x10	; 16
 212:	8f b9       	out	0x0f, r24	; 15
 214:	88 23       	and	r24, r24
 216:	d9 f3       	breq	.-10     	; 0x20e <closePort+0x2>
}
 218:	08 95       	ret

0000021a <initRadioTX>:

/*************** Radio Functions ******************/
void initRadioTX(void){
  openPort();
 21a:	f6 df       	rcall	.-20     	; 0x208 <openPort>
 21c:	80 e2       	ldi	r24, 0x20	; 32
  SPI_masterTransmit(0b00100000);
 21e:	ee df       	rcall	.-36     	; 0x1fc <SPI_masterTransmit>
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	ec df       	rcall	.-40     	; 0x1fc <SPI_masterTransmit>
  SPI_masterTransmit(0b00001010);  // sets TX mode on 
 224:	f3 cf       	rjmp	.-26     	; 0x20c <closePort>

00000226 <initRadioRX>:
 226:	f0 df       	rcall	.-32     	; 0x208 <openPort>
 228:	80 e2       	ldi	r24, 0x20	; 32
  closePort();
 22a:	e8 df       	rcall	.-48     	; 0x1fc <SPI_masterTransmit>
 22c:	8b e0       	ldi	r24, 0x0B	; 11
}

void initRadioRX(void){
  openPort(); 
  SPI_masterTransmit(0b00100000);
 22e:	e6 df       	rcall	.-52     	; 0x1fc <SPI_masterTransmit>
  SPI_masterTransmit(0b00001011);  // sets RX mode on 
 230:	ed cf       	rjmp	.-38     	; 0x20c <closePort>

00000232 <setRadioAddressWidth>:
 232:	cf 93       	push	r28
 234:	c8 2f       	mov	r28, r24
  closePort();
 236:	e8 df       	rcall	.-48     	; 0x208 <openPort>
 238:	83 e2       	ldi	r24, 0x23	; 35
}

/*************************************************************/
void setRadioAddressWidth(uint8_t width){
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
 23a:	e0 df       	rcall	.-64     	; 0x1fc <SPI_masterTransmit>
 23c:	8c 2f       	mov	r24, r28
 23e:	de df       	rcall	.-68     	; 0x1fc <SPI_masterTransmit>
  SPI_masterTransmit(width);  // sets address 
 240:	cf 91       	pop	r28
 242:	e4 cf       	rjmp	.-56     	; 0x20c <closePort>

00000244 <setRadioFrequency>:
 244:	cf 93       	push	r28
  closePort();
}
 246:	c8 2f       	mov	r28, r24
/*************************************************************/
void setRadioAddressWidth(uint8_t width){
  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
  SPI_masterTransmit(width);  // sets address 
  closePort();
 248:	df df       	rcall	.-66     	; 0x208 <openPort>
 24a:	85 e2       	ldi	r24, 0x25	; 37
}

void setRadioFrequency(uint8_t frequency){
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
 24c:	d7 df       	rcall	.-82     	; 0x1fc <SPI_masterTransmit>
 24e:	8c 2f       	mov	r24, r28
 250:	d5 df       	rcall	.-86     	; 0x1fc <SPI_masterTransmit>
  SPI_masterTransmit(frequency);  // sets frequency 
 252:	cf 91       	pop	r28
 254:	db cf       	rjmp	.-74     	; 0x20c <closePort>

00000256 <setRadioTXAddress>:
 256:	cf 93       	push	r28
  closePort(); 
}
 258:	df 93       	push	r29

void setRadioFrequency(uint8_t frequency){
  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
  SPI_masterTransmit(frequency);  // sets frequency 
  closePort(); 
 25a:	00 d0       	rcall	.+0      	; 0x25c <setRadioTXAddress+0x6>
 25c:	cd b7       	in	r28, 0x3d	; 61
}

void setRadioTXAddress(uint32_t address){
 25e:	de b7       	in	r29, 0x3e	; 62
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 260:	69 83       	std	Y+1, r22	; 0x01
 262:	7a 83       	std	Y+2, r23	; 0x02
 264:	d1 df       	rcall	.-94     	; 0x208 <openPort>
 266:	80 e3       	ldi	r24, 0x30	; 48
  SPI_masterTransmit(0x30);  // TX_ADDR register
 268:	c9 df       	rcall	.-110    	; 0x1fc <SPI_masterTransmit>
 26a:	69 81       	ldd	r22, Y+1	; 0x01
 26c:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 26e:	c6 df       	rcall	.-116    	; 0x1fc <SPI_masterTransmit>
 270:	7a 81       	ldd	r23, Y+2	; 0x02
 272:	87 2f       	mov	r24, r23
 274:	c3 df       	rcall	.-122    	; 0x1fc <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	c1 df       	rcall	.-126    	; 0x1fc <SPI_masterTransmit>
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	c4 cf       	rjmp	.-120    	; 0x20c <closePort>

00000284 <setRadioRXAddress>:

  closePort();
}
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	00 d0       	rcall	.+0      	; 0x28a <setRadioRXAddress+0x6>
 28a:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x30);  // TX_ADDR register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	69 83       	std	Y+1, r22	; 0x01
void setRadioRXAddress(int32_t address){
  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 290:	7a 83       	std	Y+2, r23	; 0x02
 292:	ba df       	rcall	.-140    	; 0x208 <openPort>
 294:	8a e2       	ldi	r24, 0x2A	; 42
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
 296:	b2 df       	rcall	.-156    	; 0x1fc <SPI_masterTransmit>
 298:	69 81       	ldd	r22, Y+1	; 0x01
 29a:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 29c:	af df       	rcall	.-162    	; 0x1fc <SPI_masterTransmit>
 29e:	7a 81       	ldd	r23, Y+2	; 0x02
 2a0:	87 2f       	mov	r24, r23
 2a2:	ac df       	rcall	.-168    	; 0x1fc <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	aa df       	rcall	.-172    	; 0x1fc <SPI_masterTransmit>
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	ad cf       	rjmp	.-166    	; 0x20c <closePort>

000002b2 <setRadioRXPayloadSize>:

  closePort();
}
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <setRadioRXPayloadSize+0x6>
 2b8:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	6a 83       	std	Y+2, r22	; 0x02
  size is the number of bytes in PL from 1-32
 ************************************************************/


void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size){
  openPort();
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	a3 df       	rcall	.-186    	; 0x208 <openPort>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	9a df       	rcall	.-204    	; 0x1fc <SPI_masterTransmit>
 2c8:	6a 81       	ldd	r22, Y+2	; 0x02
 2ca:	86 2f       	mov	r24, r22
  SPI_masterTransmit(size);  // size of payload for data pipe
 2cc:	97 df       	rcall	.-210    	; 0x1fc <SPI_masterTransmit>
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	df 91       	pop	r29
  closePort();
}
 2d4:	cf 91       	pop	r28
 2d6:	9a cf       	rjmp	.-204    	; 0x20c <closePort>

000002d8 <setRadioTXPayload>:
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15

void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size){
  openPort();
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
  SPI_masterTransmit(size);  // size of payload for data pipe
  closePort();
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
}

void setRadioTXPayload(uint8_t* frame, int8_t payloadSize){
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	8c 01       	movw	r16, r24
 2e6:	e6 2e       	mov	r14, r22
  openPort();
 2e8:	8f df       	rcall	.-226    	; 0x208 <openPort>
 2ea:	80 ea       	ldi	r24, 0xA0	; 160
  SPI_masterTransmit(0b10100000);  // Initiate writing of payload
 2ec:	87 df       	rcall	.-242    	; 0x1fc <SPI_masterTransmit>
 2ee:	e8 01       	movw	r28, r16
 2f0:	ff 24       	eor	r15, r15
  for(int i = 0; i < payloadSize; i++)
 2f2:	e7 fc       	sbrc	r14, 7
 2f4:	f0 94       	com	r15
 2f6:	ce 01       	movw	r24, r28
 2f8:	80 1b       	sub	r24, r16
 2fa:	91 0b       	sbc	r25, r17
 2fc:	8e 15       	cp	r24, r14
 2fe:	9f 05       	cpc	r25, r15
 300:	1c f4       	brge	.+6      	; 0x308 <setRadioTXPayload+0x30>
 302:	89 91       	ld	r24, Y+
 304:	7b df       	rcall	.-266    	; 0x1fc <SPI_masterTransmit>
  {
    SPI_masterTransmit(frame[i]);
 306:	f7 cf       	rjmp	.-18     	; 0x2f6 <setRadioTXPayload+0x1e>
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
  }
  closePort();
}
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	7b cf       	rjmp	.-266    	; 0x20c <closePort>

00000316 <getRadioStatus>:
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
  SPI_masterTransmit(0b10100000);  // Initiate writing of payload
  for(int i = 0; i < payloadSize; i++)
  {
    SPI_masterTransmit(frame[i]);
  }
  closePort();
 31a:	ec 01       	movw	r28, r24
 31c:	75 df       	rcall	.-278    	; 0x208 <openPort>
  closePort();
}


void getRadioStatus(uint8_t* status){
  openPort();
 31e:	87 e0       	ldi	r24, 0x07	; 7
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
 320:	6d df       	rcall	.-294    	; 0x1fc <SPI_masterTransmit>
 322:	88 83       	st	Y, r24
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
  closePort();
}
 328:	71 cf       	rjmp	.-286    	; 0x20c <closePort>

0000032a <getTX_DS>:
 32a:	cf 93       	push	r28


void getRadioStatus(uint8_t* status){
  openPort();
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
  closePort();
 32c:	df 93       	push	r29
 32e:	1f 92       	push	r1
    return 1;
  else
    return 0;
}

uint8_t getTX_DS(void){
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 334:	ce 01       	movw	r24, r28
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	ee df       	rcall	.-36     	; 0x316 <getRadioStatus>
 33a:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<5))  
 33c:	85 fb       	bst	r24, 5
    return 1;
  else
    return 0;
}
 33e:	88 27       	eor	r24, r24
 340:	80 f9       	bld	r24, 0
 342:	0f 90       	pop	r0
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <getMAX_RT>:
 34a:	cf 93       	push	r28

uint8_t getMAX_RT(void){
 34c:	df 93       	push	r29
 34e:	1f 92       	push	r1
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
  uint8_t status;
  getRadioStatus(&status);
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	de df       	rcall	.-68     	; 0x316 <getRadioStatus>
 35a:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<4))  
 35c:	82 95       	swap	r24
    return 1;
  else
    return 0;
}
 35e:	81 70       	andi	r24, 0x01	; 1
 360:	0f 90       	pop	r0
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <clearMAX_RT>:
 368:	4f df       	rcall	.-354    	; 0x208 <openPort>
}

/*********** Clear Status Bits **************/
void clearMAX_RT(void){   
  uint8_t status;
  openPort();
 36a:	87 e2       	ldi	r24, 0x27	; 39
  status = SPI_masterTransmit(0x07 | 0b00100000);  
 36c:	47 df       	rcall	.-370    	; 0x1fc <SPI_masterTransmit>
 36e:	80 61       	ori	r24, 0x10	; 16
 370:	45 df       	rcall	.-374    	; 0x1fc <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<4));
 372:	4c cf       	rjmp	.-360    	; 0x20c <closePort>

00000374 <clearTX_DS>:
 374:	49 df       	rcall	.-366    	; 0x208 <openPort>
 376:	87 e2       	ldi	r24, 0x27	; 39
  closePort();
 378:	41 df       	rcall	.-382    	; 0x1fc <SPI_masterTransmit>
 37a:	80 62       	ori	r24, 0x20	; 32
}

void clearTX_DS(void){
  uint8_t status;
  openPort();
  status = SPI_masterTransmit(0x07 | 0b00100000);  
 37c:	3f df       	rcall	.-386    	; 0x1fc <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<5));
 37e:	46 cf       	rjmp	.-372    	; 0x20c <closePort>

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
